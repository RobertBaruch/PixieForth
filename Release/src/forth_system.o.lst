   1              	# 1 "../src/forth_system.S"
   1              	/*
   0              	
   0              	
   0              	
   2              	 * This is the core PixieForth system, which closely follows
   3              	 * the JonesForth tut by Richard Jones available at
   4              	 * http://git.annexia.org/?p=jonesforth.git;a=summary.
   5              	 */
   6              	
   7              	.syntax unified
   8              	
   9              	/* This macro writes the header of the function. */
  10              	.macro __new_func name
  11              	    .text
  12              	    .global \name
  13              	    .thumb_func
  14              	    .align 2
  16              	\name\():
  17              	.endm
  18              	
  19              	/* This macro writes the footer of the function. */
  20              	.macro __end_func name
  21              	    .pool
  23              	.endm
  24              	
  25              	/*
  26              	 * The ABI for words:
  27              	 *  r11 is the parameter stack pointer. Appears in dumps as fp.
  28              	 *  r12 is the instruction pointer. Appears in dumps as ip.
  29              	 *    Note that during execution of an instruction, r12 points to
  30              	 *    the next instruction (as long as the current instruction is
  31              	 *    not EXIT).
  32              	 *  r8 is the saved stack pointer from C. TODO: change to r10.
  33              	 *  sp ("r13") is the return stack pointer.
  34              	 *  lr ("r14") is the address to return to in C
  35              	 *
  36              	 *  Note that C is under no obligation to save r12, so all calls to C
  37              	 *  must save and restore r12.
  38              	 *
  39              	 *  Forth may freely use r0-r7, r9, r10.
  40              	 *  Forth may clobber r0-r7, r9-r12, sp, lr. All are saved/restored except r0 and r1.
  41              	 */
  42              	
  43              	.set F_IMMED,0x80
  44              	.set F_UNUSED,0x40
  45              	.set F_HIDDEN,0x20
  46              	.set F_LENMASK,0x1f // length mask
  47              	
  48              	// Stores the chain of links.
  49              	.set link, 0
  50              	
  51              	/*
  52              	 * The format of a word definition is:
  53              	 *   forth_name_<label>:
  54              	 *     .4byte <pointer to next definition>
  55              	 *     .4byte <pointer to forth_<label>>
  56              	 *     .byte <len of name>
  57              	 *     .ascii <name, with enough padding at end for alignment>
  58              	 *   forth_<label>:
  59              	 *     .4byte <address of forth_do_colon>
  60              	 *     .4byte <words in the definition>
  61              	 *     ... <more words>
  62              	 *     .4byte forth_exit
  63              	 */
  64              	.macro __defword name, flags=0, label
  65              	    .text
  67              	    .align 2
  68              	    .global forth_name_\label
  69              	forth_name_\label\():
  70              	    .4byte link
  71              	    .4byte forth_\label\()
  72              	    .set link, forth_name_\label
  73              	    .byte forth_end_name_\label\()-.-1+\flags
  74              	    .ascii "\name"
  75              	forth_end_name_\label\():
  76              	    .align 2, 0
  78              	    .global forth_\label
  80              	forth_\label\():
  81              	    .4byte forth_do_colon
  82              	    // list of word pointers go here, use __word macro.
  83              	.endm
  84              	
  85              	/* This macro writes the footer of a word definition. */
  86              	.macro __end_defword label
  87              	    .4byte forth_exit
  89              	.endm
  90              	
  91              	/* This macro writes a word pointer. */
  92              	.macro __word label
  93              	    .4byte forth_\label
  94              	.endm
  95              	
  96              	/*
  97              	 * The format of a native definition is:
  98              	 *   forth_name_<label>:
  99              	 *     .4byte <pointer to next definition>
 100              	 *     .4byte <pointer to forth_<label>>
 101              	 *     .byte <len of name>
 102              	 *     .ascii <name, with enough padding at end for alignment>
 103              	 *   forth_<label>:
 104              	 *     .4byte <address of forth_code_<label>>
 105              	 *   forth_code_<label>:
 106              	 *     <native code>
 107              	 *     __next
 108              	 */
 109              	.macro __defnative name, flags=0, label
 110              	    .text
 112              	    .align 2
 113              	    .global forth_name_\label
 114              	forth_name_\label\():
 115              	    .4byte link
 116              	    .4byte forth_\label\()
 117              	    .set link, forth_name_\label
 118              	    .byte forth_end_name_\label\()-.-1+\flags
 119              	    .ascii "\name"
 120              	forth_end_name_\label\():
 121              	    .align 2, 0
 123              	    .global forth_\label
 125              	forth_\label\():
 126              	    .4byte forth_code_\label
 128              	    .global forth_code_\label
 129              	    .thumb_func
 131              	forth_code_\label\():
 132              	.endm
 133              	
 134              	/* This macro writes the footer of a native definition. */
 135              	.macro __end_defnative label
 136              	    __next
 137              	    .pool
 139              	.endm
 140              	
 141              	/*
 142              	 * This macro creates a native definition for a global variable.
 143              	 */
 144              	.macro __defvar name, flags=0, label, initial=0
 145              	    __defnative \name\(),\flags\(),\label\()
 146              	    ldr r0, =forth_var_\name\()
 147              	    ldr r0, [r0]
 148              	    __pushreg r0
 149              	    __end_defnative \label
 150              	
 151              	    .section .data
 153              	    .align 2
 154              	    .global forth_var_\name
 155              	forth_var_\name\():
 156              	    .4byte \initial
 158              	.endm
 159              	
 160              	/*
 161              	 * Some useful macros for writing native definitions.
 162              	 */
 163              	
 164              	/* Pushes the given register onto the parameter stack. */
 165              	.macro __pushreg reg
 166              	     str \reg\(), [r11], #4
 167              	.endm
 168              	
 169              	/* Pushes reg1 then reg2 onto the parameter stack. */
 170              	.macro __pushreg2 reg1, reg2
 171              	    strd \reg1\(), \reg2\(), [r11], #8
 172              	.endm
 173              	
 174              	/* Pops the parameter stack into the given register. */
 175              	.macro __popreg reg
 176              	     ldr \reg\(), [r11, #-4]!
 177              	.endm
 178              	
 179              	/* Pops reg1 then reg2 from the parameter stack. */
 180              	.macro __popreg2 reg1 reg2
 181              	     ldrd \reg2\(), \reg1\(), [r11, #-8]!
 182              	.endm
 183              	
 184              	/* Loads the given register with the top of the parameter stack. */
 185              	.macro __peekreg reg
 186              	    ldr \reg\(), [r11, #-4]
 187              	.endm
 188              	
 189              	/* Stores the given register to the top of the parameter stack. */
 190              	.macro __putreg reg
 191              	    str \reg\(), [r11, #-4]
 192              	.endm
 193              	
 194              	/* Loads the given variable into the given register. */
 195              	.macro __loadvar name reg
 196              	    ldr \reg\(), =forth_var_\name
 197              	    ldr \reg\(), [\reg\()]
 198              	.endm
 199              	
 200              	/*
 201              	 * Stores the given register into the given variable. This requires
 202              	 * a scratch register.
 203              	 */
 204              	.macro __storevar reg name scratchreg
 205              	    ldr \scratchreg\(), =forth_var_\name
 206              	    str \reg\(), [\scratchreg\()]
 207              	.endm
 208              	
 209              	/*
 210              	 * Saves r12 before calling into C.
 211              	 * The ARM ABI requires that subroutines save r4-r11 if
 212              	 * they use them. If we are calling into C, then we are responsible
 213              	 * for saving any other registers we use.
 214              	 */
 215              	.macro __begin_c_call
 216              	    push {r12}
 217              	.endm
 218              	
 219              	/* Restores r12 after returning from C. */
 220              	.macro __end_c_call
 221              	    pop {r12}
 222              	.endm
 223              	
 224              	 /*
 225              	  * This macro implements the NEXT fragment. All native
 226              	  * routines must end in NEXT. The beginning of all words
 227              	  * is a pointer to the routine to start that word. Sometimes
 228              	  * it is just a pointer to native assembly, if the word was
 229              	  * native. Otherwise, it is a pointer to standard
 230              	  * "interpret" routine.
 231              	  */
 232              	.macro __next
 233              	    ldr r10, [r12], #4 // increment the instruction pointer
 234              	    ldr r9, [r10]  // r9 is now the top of the callee
 235              	    bx r9
 236              	.endm
 237              	
 238 0000 00000000 	__defvar "BASE",,base,10 // current base for interpreting text numbers
 238      00000000 
 238      04424153 
 238      45000000 
 238      00000000 
 239              	// The initial value must be the last name in the builtins.
 240 0004 00000000 	__defvar "LATEST",,latest,forth_name_testing // the addr of the last definition.
 241 0008 00000000 	__defvar "HERE",,here // the addr of free data
 242 000c 00000000 	__defvar "STATE",,state // the Forth state: 0 = interpreting, 1 = compiling.
 243              	
 244              	/*
 245              	 * Accepts control from C.
 246              	 * r0 (first parameter) is the pointer to the parameter stack.
 247              	 * r1 (second parameter) is the address of the Forth routine to jump to,
 248              	 *     which is forth_<x>, not code_forth_<x>.
 249              	 * TODO: change this to a struct so we can pass and return all sorts of things,
 250              	 *       like the HERE pointer.
 251              	 */
 252              	__new_func forth_enter
 253 00b0 2DE9FC5F 	    push {r2-r12, lr}
 254 00b4 E846     	    mov r8, sp
 255 00b6 02B4     	    push {r1}
 256 00b8 8346     	    mov r11, r0
 257 00ba EC46     	    mov r12, sp
 258 00bc 5CF804AB 	    __next
 258      DAF80090 
 258      4847
 259              	__end_func forth_enter
 260              	
 261              	/* Returns control to C, returning r11 so we know where we stopped. */
 262 00c6 00BF8400 	__defnative "QUIT",,quit
 262      00000000 
 262      00000451 
 262      55495400 
 262      00000000 
 263 00dc 5846     	    mov r0, r11
 264 00de C546     	    mov sp, r8
 265 00e0 BDE8FC5F 	    pop {r2-r12, lr}
 266 00e4 7047     	    bx lr
 267 00e6 5CF804AB 	__end_defnative quit
 267      DAF80090 
 267      4847
 268              	
 269              	/*
 270              	 * This is the "interpret" routine for non-native words.
 271              	 */
 272              	__new_func forth_do_colon
 273 00f0 4DF804CD 	    push {r12} // r12 is the instruction coming next in the caller
 274 00f4 1AF1040C 	    adds r12, r10, #4 // point to next instruction
 275 00f8 5CF804AB 	    __next
 275      DAF80090 
 275      4847
 276              	__end_func forth_do_colon
 277              	
 278              	/* Returns control to the Forth caller. */
 279 0102 00BFC800 	__defnative "EXIT",,exit
 279      00000000 
 279      00000445 
 279      58495400 
 279      00000000 
 280 0118 5DF804CB 	    pop {r12}
 281 011c 5CF804AB 	__end_defnative exit
 281      DAF80090 
 281      4847
 282              	
 283              	/* ( -- x ) */
 284 0126 00BF0401 	__defnative "LIT",,literal
 284      00000000 
 284      0000034C 
 284      49540000 
 284      0000
 285 0138 5CF8040B 	    ldr r0, [r12], #4
 286 013c 4BF8040B 	    __pushreg r0
 287 0140 5CF804AB 	__end_defnative literal
 287      DAF80090 
 287      4847
 288              	
 289              	/* ( x -- ) */
 290 014a 00BF2801 	__defnative "DROP",,drop
 290      00000000 
 290      00000444 
 290      524F5000 
 290      00000000 
 291 0160 BBF1040B 	    subs r11, #4
 292 0164 5CF804AB 	__end_defnative drop
 292      DAF80090 
 292      4847
 293              	
 294              	/* ( x y -- ) */
 295 016e 00BF4C01 	__defnative "2DROP",,2drop
 295      00000000 
 295      00000532 
 295      44524F50 
 295      00000000 
 296 0184 BBF1080B 	    subs r11, #8
 297 0188 5CF804AB 	__end_defnative 2drop
 297      DAF80090 
 297      4847
 298              	
 299              	/* ( x y -- y x ) */
 300 0192 00BF7001 	__defnative "SWAP",,swap
 300      00000000 
 300      00000453 
 300      57415000 
 300      00000000 
 301 01a8 3BE90300 	    ldmdb r11!, {r0, r1} // r0,r1 <- x,y
 302 01ac EBE80201 	    __pushreg2 r0, r1
 303 01b0 5CF804AB 	__end_defnative swap
 303      DAF80090 
 303      4847
 304              	
 305              	/* ( a b c d -- c d a b ) */
 306 01ba 00BF9401 	__defnative "2SWAP",,2swap
 306      00000000 
 306      00000532 
 306      53574150 
 306      00000000 
 307 01d0 3BE90F00 	    ldmdb r11!, {r0, r1, r2, r3} // r0,r1,r2,r3 <- a,b,c,d
 308 01d4 EBE80223 	    __pushreg2 r2, r3
 309 01d8 EBE80201 	    __pushreg2 r0, r1
 310 01dc 5CF804AB 	__end_defnative 2swap
 310      DAF80090 
 310      4847
 311              	
 312              	/* ( x -- x x ) */
 313 01e6 00BFBC01 	__defnative "DUP",,dup
 313      00000000 
 313      00000344 
 313      55500000 
 313      0000
 314 01f8 5BF8040C 	    __peekreg r0
 315 01fc 4BF8040B 	    __pushreg r0
 316 0200 5CF804AB 	__end_defnative dup
 316      DAF80090 
 316      4847
 317              	
 318              	/* ( x y -- x y x y ) */
 319 020a 00BFE801 	__defnative "2DUP",,2dup
 319      00000000 
 319      00000432 
 319      44555000 
 319      00000000 
 320 0220 1BE90300 	    ldmdb r11, {r0, r1} // r0,r1 <- x,y
 321 0224 EBE80201 	    __pushreg2 r0, r1
 322 0228 5CF804AB 	__end_defnative 2dup
 322      DAF80090 
 322      4847
 323              	
 324              	/* ( x -- 0 | x x ) */
 325 0232 00BF0C02 	__defnative "?DUP",,maybe_dup
 325      00000000 
 325      0000043F 
 325      44555000 
 325      00000000 
 326 0248 5BF8040C 	    __peekreg r0
 327 024c 08B1     	    cbz r0, skip_maybe_dup
 328 024e 4BF8040B 	    __pushreg r0
 329              	skip_maybe_dup:
 330 0252 5CF804AB 	__end_defnative maybe_dup
 330      DAF80090 
 330      4847
 331              	
 332              	/* ( x y -- x y x ) */
 333 025c 34020000 	__defnative "OVER",,over
 333      00000000 
 333      044F5645 
 333      52000000 
 333      00000000 
 334 0270 5BF8080C 	    ldr r0, [r11, #-8]
 335 0274 4BF8040B 	    __pushreg r0
 336 0278 5CF804AB 	__end_defnative over
 336      DAF80090 
 336      4847
 337              	
 338              	/* ( x y z -- y z x ) */
 339 0282 00BF5C02 	__defnative "ROT",,rot
 339      00000000 
 339      00000352 
 339      4F540000 
 339      0000
 340 0294 3BE90700 	    ldmdb r11!, {r0, r1, r2} // r0,r1,r2 <- x,y,z
 341 0298 EBE80212 	    __pushreg2 r1, r2
 342 029c 4BF8040B 	    __pushreg r0
 343 02a0 5CF804AB 	__end_defnative rot
 343      DAF80090 
 343      4847
 344              	
 345              	/* ( x y z -- z x y ) */
 346 02aa 00BF8402 	__defnative "-ROT",,nrot
 346      00000000 
 346      0000042D 
 346      524F5400 
 346      00000000 
 347 02c0 3BE90700 	    ldmdb r11!, {r0, r1, r2} // r0,r1,r2 <- x,y,z
 348 02c4 EBE80220 	    __pushreg2 r2, r0
 349 02c8 4BF8041B 	    __pushreg r1
 350 02cc 5CF804AB 	__end_defnative nrot
 350      DAF80090 
 350      4847
 351              	
 352              	/* ( x -- x+1 ) */
 353 02d6 00BFAC02 	__defnative "1+",,inc
 353      00000000 
 353      00000231 
 353      2B000000 
 353      0000
 354 02e8 5BF8040C 	    __peekreg r0
 355 02ec 0130     	    adds r0, #1
 356 02ee 4BF8040C 	    __putreg r0
 357 02f2 5CF804AB 	__end_defnative inc
 357      DAF80090 
 357      4847
 358              	
 359              	/* ( x -- x-1 ) */
 360 02fc D8020000 	__defnative "1-",,dec
 360      00000000 
 360      02312D00 
 360      00000000 
 361 030c 5BF8040C 	    __peekreg r0
 362 0310 0138     	    subs r0, #1
 363 0312 4BF8040C 	    __putreg r0
 364 0316 5CF804AB 	__end_defnative dec
 364      DAF80090 
 364      4847
 365              	
 366              	/* ( x -- x+4 ) */
 367 0320 FC020000 	__defnative "4+",,inc4
 367      00000000 
 367      02342B00 
 367      00000000 
 368 0330 5BF8040C 	    __peekreg r0
 369 0334 0430     	    adds r0, #4
 370 0336 4BF8040C 	    __putreg r0
 371 033a 5CF804AB 	__end_defnative inc4
 371      DAF80090 
 371      4847
 372              	
 373              	/* ( x -- x-4 ) */
 374 0344 20030000 	__defnative "4-",,dec4
 374      00000000 
 374      02342D00 
 374      00000000 
 375 0354 5BF8040C 	    __peekreg r0
 376 0358 0438     	    subs r0, #4
 377 035a 4BF8040C 	    __putreg r0
 378 035e 5CF804AB 	__end_defnative dec4
 378      DAF80090 
 378      4847
 379              	
 380              	/* ( x y -- x+y ) */
 381 0368 44030000 	__defnative "+",,add
 381      00000000 
 381      012B0000 
 381      00000000 
 382 0378 3BE90300 	    ldmdb r11!, {r0, r1} // r0,r1 <- x,y
 383 037c 0918     	    adds r1, r0
 384 037e 4BF8041B 	    __pushreg r1
 385 0382 5CF804AB 	__end_defnative add
 385      DAF80090 
 385      4847
 386              	
 387              	/* ( x y -- x-y ) */
 388 038c 68030000 	__defnative "-",,sub
 388      00000000 
 388      012D0000 
 388      00000000 
 389 039c 3BE90300 	    ldmdb r11!, {r0, r1} // r0,r1 <- x,y
 390 03a0 A0EB0100 	    sub r0, r1
 391 03a4 4BF8040B 	    __pushreg r0
 392 03a8 5CF804AB 	__end_defnative sub
 392      DAF80090 
 392      4847
 393              	
 394              	/* ( x y -- x*y ) */
 395 03b2 00BF8C03 	__defnative "*",,mul
 395      00000000 
 395      0000012A 
 395      00000000 
 395      0000
 396 03c4 3BE90300 	    ldmdb r11!, {r0, r1} // r0,r1 <- x,y
 397 03c8 00FB01F1 	    mul r1, r0
 398 03cc 4BF8041B 	    __pushreg r1
 399 03d0 5CF804AB 	__end_defnative mul
 399      DAF80090 
 399      4847
 400              	
 401              	/* ( x y -- x%y x/y ) */
 402 03da 00BFB403 	__defnative "/MOD",,divmod
 402      00000000 
 402      0000042F 
 402      4D4F4400 
 402      00000000 
 403 03f0 3BE90300 	    ldmdb r11!, {r0, r1} // r0,r1 <- x,y
 404 03f4 90FBF1F2 	    sdiv r2, r0, r1  // q <- x/y
 405 03f8 02FB1101 	    mls r1, r2, r1, r0 // r, q, y, x: r <- x - q*y
 406 03fc EBE80212 	    __pushreg2 r1, r2
 407 0400 5CF804AB 	__end_defnative divmod
 407      DAF80090 
 407      4847
 408              	
 409              	/* Signed division. */
 410              	/* ( x y -- x/y ) */
 411 040a 00BFDC03 	__defnative "/",,div
 411      00000000 
 411      0000012F 
 411      00000000 
 411      0000
 412 041c 3BE90300 	    ldmdb r11!, {r0, r1} // r0,r1 <- x,y
 413 0420 90FBF1F0 	    sdiv r0, r1
 414 0424 4BF8041B 	    __pushreg r1
 415 0428 5CF804AB 	__end_defnative div
 415      DAF80090 
 415      4847
 416              	
 417              	/* ( x y -- 0 | 0xffffffff ) */
 418 0432 00BF0C04 	__defnative "=",,eq
 418      00000000 
 418      0000013D 
 418      00000000 
 418      0000
 419 0444 3BE90300 	    ldmdb r11!, {r0, r1} // r0,r1 <- x,y
 420 0448 8842     	    cmp r0, r1
 421 044a 0CBF     	    ite eq
 422 044c 6FF00000 	    mvneq r0, #0
 423 0450 0020     	    movne r0, #0
 424 0452 4BF8040B 	    __pushreg r0
 425 0456 5CF804AB 	__end_defnative eq
 425      DAF80090 
 425      4847
 426              	
 427              	/* ( x y -- 0 | 0xffffffff ) */
 428 0460 34040000 	__defnative "<>",,ne
 428      00000000 
 428      023C3E00 
 428      00000000 
 429 0470 3BE90300 	    ldmdb r11!, {r0, r1} // r0,r1 <- x,y
 430 0474 8842     	    cmp r0, r1
 431 0476 14BF     	    ite ne
 432 0478 6FF00000 	    mvnne r0, #0
 433 047c 0020     	    moveq r0, #0
 434 047e 4BF8040B 	    __pushreg r0
 435 0482 5CF804AB 	__end_defnative ne
 435      DAF80090 
 435      4847
 436              	
 437              	/* Signed comparison, x < y */
 438              	/* ( x y -- 0 | 0xffffffff ) */
 439 048c 60040000 	__defnative "<",,lt
 439      00000000 
 439      013C0000 
 439      00000000 
 440 049c 3BE90300 	    ldmdb r11!, {r0, r1} // r0,r1 <- x,y
 441 04a0 8842     	    cmp r0, r1
 442 04a2 B4BF     	    ite lt
 443 04a4 6FF00000 	    mvnlt r0, #0
 444 04a8 0020     	    movge r0, #0
 445 04aa 4BF8040B 	    __pushreg r0
 446 04ae 5CF804AB 	__end_defnative lt
 446      DAF80090 
 446      4847
 447              	
 448              	/* Signed comparison, x > y */
 449              	/* ( x y -- 0 | 0xffffffff ) */
 450 04b8 8C040000 	__defnative ">",,gt
 450      00000000 
 450      013E0000 
 450      00000000 
 451 04c8 3BE90300 	    ldmdb r11!, {r0, r1} // r0,r1 <- x,y
 452 04cc 8842     	    cmp r0, r1
 453 04ce CCBF     	    ite gt
 454 04d0 6FF00000 	    mvngt r0, #0
 455 04d4 0020     	    movle r0, #0
 456 04d6 4BF8040B 	    __pushreg r0
 457 04da 5CF804AB 	__end_defnative gt
 457      DAF80090 
 457      4847
 458              	
 459              	/* Signed comparison, x <= y */
 460              	/* ( x y -- 0 | 0xffffffff ) */
 461 04e4 B8040000 	__defnative "<=",,le
 461      00000000 
 461      023C3D00 
 461      00000000 
 462 04f4 3BE90300 	    ldmdb r11!, {r0, r1} // r0,r1 <- x,y
 463 04f8 8842     	    cmp r0, r1
 464 04fa D4BF     	    ite le
 465 04fc 6FF00000 	    mvnle r0, #0
 466 0500 0020     	    movgt r0, #0
 467 0502 4BF8040B 	    __pushreg r0
 468 0506 5CF804AB 	__end_defnative le
 468      DAF80090 
 468      4847
 469              	
 470              	/* Signed comparison, x >= y */
 471              	/* ( x y -- 0 | 0xffffffff ) */
 472 0510 E4040000 	__defnative ">=",,ge
 472      00000000 
 472      023E3D00 
 472      00000000 
 473 0520 3BE90300 	    ldmdb r11!, {r0, r1} // r0,r1 <- x,y
 474 0524 8842     	    cmp r0, r1
 475 0526 ACBF     	    ite ge
 476 0528 6FF00000 	    mvnge r0, #0
 477 052c 0020     	    movlt r0, #0
 478 052e 4BF8040B 	    __pushreg r0
 479 0532 5CF804AB 	__end_defnative ge
 479      DAF80090 
 479      4847
 480              	
 481              	/* ( x -- 0 | 0xffffffff ) */
 482 053c 10050000 	__defnative "0=",,eqz
 482      00000000 
 482      02303D00 
 482      00000000 
 483 054c 5BF8040C 	    __peekreg r0
 484 0550 0028     	    cmp r0, #0
 485 0552 0CBF     	    ite eq
 486 0554 6FF00000 	    mvneq r0, #0
 487 0558 0020     	    movne r0, #0
 488 055a 4BF8040C 	    __putreg r0
 489 055e 5CF804AB 	__end_defnative eqz
 489      DAF80090 
 489      4847
 490              	
 491              	/* ( x -- 0 | 0xffffffff ) */
 492 0568 3C050000 	__defnative "0<>",,nez
 492      00000000 
 492      03303C3E 
 492      00000000 
 493 0578 5BF8040C 	    __peekreg r0
 494 057c 18B1     	    cbz r0, skip_nez
 495 057e 6FF00000 	    mvn r0, #0
 496 0582 4BF8040C 	    __putreg r0
 497              	skip_nez:
 498 0586 5CF804AB 	__end_defnative nez
 498      DAF80090 
 498      4847
 499              	
 500              	/* Signed comparison, x < 0 */
 501              	/* ( x -- 0 | 0xffffffff ) */
 502 0590 68050000 	__defnative "0<",,ltz
 502      00000000 
 502      02303C00 
 502      00000000 
 503 05a0 5BF8040C 	    __peekreg r0
 504 05a4 0028     	    cmp r0, #0
 505 05a6 B4BF     	    ite lt
 506 05a8 6FF00000 	    mvnlt r0, #0
 507 05ac 0020     	    movge r0, #0
 508 05ae 4BF8040C 	    __putreg r0
 509 05b2 5CF804AB 	__end_defnative ltz
 509      DAF80090 
 509      4847
 510              	
 511              	/* Signed comparison, x > 0 */
 512              	/* ( x -- 0 | 0xffffffff ) */
 513 05bc 90050000 	__defnative "0>",,gtz
 513      00000000 
 513      02303E00 
 513      00000000 
 514 05cc 5BF8040C 	    __peekreg r0
 515 05d0 0028     	    cmp r0, #0
 516 05d2 CCBF     	    ite gt
 517 05d4 6FF00000 	    mvngt r0, #0
 518 05d8 0020     	    movle r0, #0
 519 05da 4BF8040C 	    __putreg r0
 520 05de 5CF804AB 	__end_defnative gtz
 520      DAF80090 
 520      4847
 521              	
 522              	/* Signed comparison, x <= 0 */
 523              	/* ( x -- 0 | 0xffffffff ) */
 524 05e8 BC050000 	__defnative "0<=",,lez
 524      00000000 
 524      03303C3D 
 524      00000000 
 525 05f8 5BF8040C 	    __peekreg r0
 526 05fc 0028     	    cmp r0, #0
 527 05fe D4BF     	    ite le
 528 0600 6FF00000 	    mvnle r0, #0
 529 0604 0020     	    movgt r0, #0
 530 0606 4BF8040C 	    __putreg r0
 531 060a 5CF804AB 	__end_defnative lez
 531      DAF80090 
 531      4847
 532              	
 533              	/* Signed comparison, x >= 0 */
 534              	/* ( x -- 0 | 0xffffffff ) */
 535 0614 E8050000 	__defnative "0>=",,gez
 535      00000000 
 535      03303E3D 
 535      00000000 
 536 0624 5BF8040C 	    __peekreg r0
 537 0628 0028     	    cmp r0, #0
 538 062a ACBF     	    ite ge
 539 062c 6FF00000 	    mvnge r0, #0
 540 0630 0020     	    movlt r0, #0
 541 0632 4BF8040C 	    __putreg r0
 542 0636 5CF804AB 	__end_defnative gez
 542      DAF80090 
 542      4847
 543              	
 544              	/* ( x y -- x&y ) */
 545 0640 14060000 	__defnative "AND",,and
 545      00000000 
 545      03414E44 
 545      00000000 
 546 0650 3BE90300 	    ldmdb r11!, {r0, r1} // r0,r1 <- x,y
 547 0654 0140     	    ands r1, r0
 548 0656 4BF8041B 	    __pushreg r1
 549 065a 5CF804AB 	__end_defnative and
 549      DAF80090 
 549      4847
 550              	
 551              	/* ( x y -- x|y ) */
 552 0664 40060000 	__defnative "OR",,or
 552      00000000 
 552      024F5200 
 552      00000000 
 553 0674 3BE90300 	    ldmdb r11!, {r0, r1} // r0,r1 <- x,y
 554 0678 0143     	    orrs r1, r0
 555 067a 4BF8041B 	    __pushreg r1
 556 067e 5CF804AB 	__end_defnative or
 556      DAF80090 
 556      4847
 557              	
 558              	/* ( x y -- x^y ) */
 559 0688 64060000 	__defnative "XOR",,xor
 559      00000000 
 559      03584F52 
 559      00000000 
 560 0698 3BE90300 	    ldmdb r11!, {r0, r1} // r0,r1 <- x,y
 561 069c 4140     	    eors r1, r0
 562 069e 4BF8041B 	    __pushreg r1
 563 06a2 5CF804AB 	__end_defnative xor
 563      DAF80090 
 563      4847
 564              	
 565              	/* ( x -- ~x ) */
 566 06ac 88060000 	__defnative "INVERT",,not
 566      00000000 
 566      06494E56 
 566      45525400 
 566      00000000 
 567 06c0 5BF8040C 	    __peekreg r0
 568 06c4 6FEA0000 	    mvn r0, r0
 569 06c8 4BF8040C 	    __putreg r0
 570 06cc 5CF804AB 	__end_defnative not
 570      DAF80090 
 570      4847
 571              	
 572              	/* ( x addr -- ) */
 573 06d6 00BFAC06 	__defnative "!",,store
 573      00000000 
 573      00000121 
 573      00000000 
 573      0000
 574 06e8 3BE90300 	    ldmdb r11!, {r0, r1} // r0,r1 <- x,addr
 575 06ec 0860     	    str r0, [r1]
 576 06ee 5CF804AB 	__end_defnative store
 576      DAF80090 
 576      4847
 577              	
 578              	/* ( x addr -- ) */
 579 06f8 D8060000 	__defnative "C!",,store_char
 579      00000000 
 579      02432100 
 579      00000000 
 580 0708 3BE90300 	    ldmdb r11!, {r0, r1} // r0,r1 <- x,addr
 581 070c 0870     	    strb r0, [r1]
 582 070e 5CF804AB 	__end_defnative store_char
 582      DAF80090 
 582      4847
 583              	
 584              	/* ( addr -- x ) */
 585 0718 F8060000 	__defnative "\@",,fetch
 585      00000000 
 585      01400000 
 585      00000000 
 586 0728 5BF8040C 	    __peekreg r0
 587 072c 0068     	    ldr r0, [r0]
 588 072e 4BF8040C 	    __putreg r0
 589 0732 5CF804AB 	__end_defnative fetch
 589      DAF80090 
 589      4847
 590              	
 591              	/* ( addr -- x ) */
 592 073c 18070000 	__defnative "C\@",,fetch_char
 592      00000000 
 592      02434000 
 592      00000000 
 593 074c 5BF8040C 	    __peekreg r0
 594 0750 0078     	    ldrb r0, [r0]
 595 0752 4BF8040C 	    __putreg r0
 596 0756 5CF804AB 	__end_defnative fetch_char
 596      DAF80090 
 596      4847
 597              	
 598              	/* ( x addr -- ) */
 599 0760 3C070000 	__defnative "+!",,addstore
 599      00000000 
 599      022B2100 
 599      00000000 
 600 0770 3BE90300 	    ldmdb r11!, {r0, r1} // r0,r1 <- x,addr
 601 0774 0A68     	    ldr r2, [r1]
 602 0776 1218     	    adds r2, r0
 603 0778 0A60     	    str r2, [r1]
 604 077a 5CF804AB 	__end_defnative addstore
 604      DAF80090 
 604      4847
 605              	
 606              	/* ( x addr -- ) */
 607 0784 60070000 	__defnative "-!",,substore
 607      00000000 
 607      022D2100 
 607      00000000 
 608 0794 3BE90300 	    ldmdb r11!, {r0, r1} // r0,r1 <- x,addr
 609 0798 0A68     	    ldr r2, [r1]
 610 079a 121A     	    subs r2, r0
 611 079c 0A60     	    str r2, [r1]
 612 079e 5CF804AB 	__end_defnative substore
 612      DAF80090 
 612      4847
 613              	
 614              	/* Block move only for non-overlapping regions. If the blocks overlap, the result is undefined. */
 615              	/* ( src-addr dest-addr len -- ) */
 616              	/* Which is backwards from memcpy, which is dest, src, len. */
 617 07a8 84070000 	__defnative "MEMCOPY",,memcpy
 617      00000000 
 617      074D454D 
 617      434F5059 
 617      00000000 
 618              	    // Want r0 = dest, r1 = src, r2 = len.
 619 07bc 7BE90202 	    __popreg2 r2, r0
 620 07c0 5BF8041D 	    __popreg r1
 621 07c4 FFF7FEFF 	    bl memcpy
 622 07c8 5CF804AB 	__end_defnative memcpy
 622      DAF80090 
 622      4847
 623              	
 624              	/* Block move with overlapping regions allowed. */
 625              	/* ( src-addr dest-addr len -- ) */
 626 07d2 00BFA807 	__defnative "MEMMOVE",,memmove
 626      00000000 
 626      0000074D 
 626      454D4D4F 
 626      56450000 
 627              	    // Want r0 = dest, r1 = src, r2 = len.
 628 07e8 7BE90202 	    __popreg2 r2, r0
 629 07ec 5BF8041D 	    __popreg r1
 630 07f0 002A     	    cmp r2, #0
 631 07f2 06DB     	    blt end_memmove
 632              	loop_memmove:
 633 07f4 2AB1     	    cbz r2, end_memmove
 634 07f6 11F8013B 	    ldrb r3, [r1], #1
 635 07fa 02F8013B 	    strb r3, [r2], #1
 636 07fe 013A     	    subs r2, #1
 637 0800 F8E7     	    b loop_memmove
 638              	end_memmove:
 639 0802 5CF804AB 	__end_defnative memmove
 639      DAF80090 
 639      4847
 640              	
 641              	/* Pop param stack and push onto return stack */
 642              	/* ( addr -- ) */
 643 080c D4070000 	__defnative ">R",,param_to_return
 643      00000000 
 643      023E5200 
 643      00000000 
 644 081c 5BF8040D 	    __popreg r0
 645 0820 01B4     	    push {r0}
 646 0822 5CF804AB 	__end_defnative param_to_return
 646      DAF80090 
 646      4847
 647              	
 648              	/* Pop return stack and push onto param stack */
 649              	/* ( -- addr ) */
 650 082c 0C080000 	__defnative "R>",,return_to_param
 650      00000000 
 650      02523E00 
 650      00000000 
 651 083c 01BC     	    pop {r0}
 652 083e 4BF8040B 	    __pushreg r0
 653 0842 5CF804AB 	__end_defnative return_to_param
 653      DAF80090 
 653      4847
 654              	
 655              	/* Fetch top of return stack, push onto param stack */
 656              	/* ( -- addr ) */
 657 084c 2C080000 	__defnative "R\@",,fetch_return
 657      00000000 
 657      02524000 
 657      00000000 
 658 085c 0098     	    ldr r0, [sp]
 659 085e 4BF8040B 	    __pushreg r0
 660 0862 5CF804AB 	__end_defnative fetch_return
 660      DAF80090 
 660      4847
 661              	
 662              	/* Replace top of return stack with popped value from param stack */
 663              	/* ( addr -- ) */
 664 086c 4C080000 	__defnative "R!",,store_return
 664      00000000 
 664      02522100 
 664      00000000 
 665 087c 5BF8040D 	    __popreg r0
 666 0880 0090     	    str r0, [sp]
 667 0882 5CF804AB 	__end_defnative store_return
 667      DAF80090 
 667      4847
 668              	
 669              	/* Waits for a byte from serial. */
 670              	/* ( -- k ) */
 671 088c 6C080000 	__defnative "KEY",,key
 671      00000000 
 671      034B4559 
 671      00000000 
 672 089c 4DF804CD 	    __begin_c_call
 673              	await_key:
 674 08a0 FFF7FEFF 	    bl usb_serial_getchar
 675 08a4 10F1010F 	    cmn r0, #1
 676 08a8 FAD0     	    beq await_key
 677 08aa 4BF8040B 	    __pushreg r0
 678 08ae 5DF804CB 	    __end_c_call
 679 08b2 5CF804AB 	__end_defnative key
 679      DAF80090 
 679      4847
 680              	
 681              	/* Outputs a byte to serial. */
 682              	/* ( k -- ) */
 683 08bc 8C080000 	__defnative "EMIT",,emit
 683      00000000 
 683      04454D49 
 683      54000000 
 683      00000000 
 684 08d0 4DF804CD 	    __begin_c_call
 685 08d4 5BF8040D 	    __popreg r0
 686 08d8 FFF7FEFF 	    bl usb_serial_putchar
 687 08dc 5DF804CB 	    __end_c_call
 688 08e0 5CF804AB 	__end_defnative emit
 688      DAF80090 
 688      4847
 689              	
 690              	/*
 691              	 * Waits for a "word" from serial. A word starts with any non-whitespace
 692              	 * character except backslash, and continues to any whitespace character.
 693              	 * Characters between backslash and newline (inclusive) are ignored.
 694              	 * The maximum size of a word if F_LENMASK. We accept characters after that,
 695              	 * but ignore them.
 696              	 */
 697              	/* ( -- buff-addr len ) */
 698 08ea 00BF     	    .section .data
 700              	    .align 2
 701              	    .global forth_word_buffer
 702              	forth_word_buffer:
 703 0010 00000000 	    .space F_LENMASK
 703      00000000 
 703      00000000 
 703      00000000 
 703      00000000 
 705              	
 706              	__defnative "WORD",,word
 707 0900 4DF804CD 	    __begin_c_call
 708 0904 194C     	    ldr r4, =forth_word_buffer
 709 0906 4BF8044B 	    __pushreg r4
 710 090a 0025     	    movs r5, #0
 711              	await_word:
 712 090c FFF7FEFF 	    bl usb_serial_getchar
 713 0910 10F1010F 	    cmn r0, #1
 714 0914 FAD0     	    beq await_word
 715 0916 2028     	    cmp r0, ' '
 716 0918 F8D0     	    beq await_word
 717 091a 0928     	    cmp r0, '\t'
 718 091c F6D0     	    beq await_word
 719 091e 0A28     	    cmp r0, '\n'
 720 0920 F4D0     	    beq await_word
 721 0922 0D28     	    cmp r0, '\r'
 722 0924 F2D0     	    beq await_word
 723              	start_word:
 724 0926 5C28     	    cmp r0, '\\'
 725 0928 12D0     	    beq await_end_comment_word
 726 092a 1F2D     	    cmp r5, F_LENMASK // We ignore anything that would overflow the buffer
 727 092c 02D0     	    beq getchar_for_word
 728 092e 04F8010B 	    strb r0, [r4], #1
 729 0932 0135     	    adds r5, #1
 730              	getchar_for_word:
 731 0934 FFF7FEFF 	    bl usb_serial_getchar
 732 0938 10F1010F 	    cmn r0, #1
 733 093c FAD0     	    beq getchar_for_word
 734 093e 2028     	    cmp r0, ' '
 735 0940 0BD0     	    beq end_word
 736 0942 0928     	    cmp r0, '\t'
 737 0944 09D0     	    beq end_word
 738 0946 0A28     	    cmp r0, '\n'
 739 0948 07D0     	    beq end_word
 740 094a 0D28     	    cmp r0, '\r'
 741 094c 05D0     	    beq end_word
 742 094e EAE7     	    b start_word
 743              	await_end_comment_word:
 744 0950 FFF7FEFF 	    bl usb_serial_getchar
 745 0954 0A28     	    cmp r0, '\n'
 746 0956 FBD1     	    bne await_end_comment_word
 747 0958 ECE7     	    b getchar_for_word
 748              	end_word:
 749 095a 4BF8045B 	    __pushreg r5
 750 095e 5DF804CB 	    __end_c_call
 751 0962 5CF804AB 	__end_defnative word
 751      DAF80090 
 751      48470000 
 751      0000
 752              	
 753              	/* ( buff-addr len -- number unconverted-char-count ) */
 754 0970 EC080000 	__defnative "NUMBER",,number
 754      00000000 
 754      064E554D 
 754      42455200 
 754      00000000 
 755 0984 3BE90300 	    ldmdb r11!, {r0, r1} // r0,r1 <- buff_addr,len
 756 0988 0025     	    movs r5, #0 // r5 = sign: 0 = positive, nz = negative
 757 098a 0022     	    movs r2, #0 // r2 = number
 758 098c 164C2468 	    __loadvar "BASE", r4 // r4 = base
 759 0990 01B3     	    cbz r1, end_number
 760 0992 0378     	    ldrb r3, [r0]
 761 0994 2D2B     	    cmp r3, '-'  // first char '-'? skip over it and set flag
 762 0996 03D1     	    bne is_hex_number
 763 0998 0125     	    movs r5, #1
 764 099a 0130     	    adds r0, #1
 765 099c 0139     	    subs r1, #1
 766 099e 04E0     	    b next_number
 767              	is_hex_number:
 768 09a0 242B     	    cmp r3, '$'  // first char '$'? skip over it and override base
 769 09a2 02BF     	    ittt eq
 770 09a4 1024     	    moveq r4, #16
 771 09a6 0130     	    addeq r0, #1
 772 09a8 0139     	    subeq r1, #1
 773              	next_number:
 774 09aa 99B1     	    cbz r1, end_number
 775 09ac 10F8013B 	    ldrb r3, [r0], #1 // r3 = character to convert
 776 09b0 302B     	    cmp r3, '0'
 777 09b2 0FD3     	    blo end_number
 778 09b4 392B     	    cmp r3, '9'
 779 09b6 01D8     	    bhi convert_az_number
 780 09b8 303B     	    subs r3, '0'
 781 09ba 05E0     	    b check_number
 782              	convert_az_number:
 783 09bc 612B     	    cmp r3, 'a'
 784 09be 28BF     	    it hs
 785 09c0 203B     	    subhs r3, #0x20 // converts lower case to upper case
 786 09c2 412B     	    cmp r3, 'A'
 787 09c4 06D3     	    blo end_number
 788 09c6 373B     	    subs r3, 'A' - 10
 789              	check_number:
 790 09c8 A342     	    cmp r3, r4
 791 09ca 3EBF     	    ittt lo
 792 09cc 02FB0432 	    mlalo r2, r2, r4, r3 // num <- num * base + digit
 793 09d0 0139     	    sublo r1, #1
 794 09d2 EAE7     	    blo next_number
 795              	end_number:
 796 09d4 012D     	    cmp r5, #1
 797 09d6 08BF     	    it eq
 798 09d8 5242     	    rsbeq r2, #0
 799 09da EBE80221 	    __pushreg2 r2, r1
 800 09de 5CF804AB 	__end_defnative number
 800      DAF80090 
 800      48470000 
 800      0000
 801              	
 802              	/*
 803              	 * Finds the given definition in the dictionary by word name,
 804              	 * returning its address (forth_name_<label>), or 0 if not found.
 805              	 * Note that if len > F_LENMASK, the results of this function are
 806              	 * undefined.
 807              	 *
 808              	 * The format of a definition is:
 809              	 *   forth_name_<label>:
 810              	 *     .4byte <pointer to next definition>
 811              	 *     .4byte <pointer to forth_<label>>
 812              	 *     .byte len+flags
 813              	 *     .ascii <name, with enough padding at end for alignment>
 814              	 *   forth_<label>:
 815              	 */
 816              	/* ( buff-addr len -- 0 | defn-addr ) */
 817 09ec 70090000 	__defnative "FIND",,find
 817      00000000 
 817      0446494E 
 817      44000000 
 817      00000000 
 818 0a00 3BE90300 	    ldmdb r11!, {r0, r1} // r0,r1 <- buff-addr,len
 819 0a04 0F4A1268 	    __loadvar "LATEST", r2 // r2 <- current definition address
 820              	check_current_find:
 821 0a08 AAB1     	    cbz r2, end_find
 822 0a0a 1368     	    ldr r3, [r2] // r3 <- next definition address
 823 0a0c 147A     	    ldrb r4, [r2, #8] // r4 <- definition name length + flags
 824 0a0e 14F03F04 	    ands r4, F_HIDDEN | F_LENMASK
 825 0a12 8C42     	    cmp r4, r1 // skip hidden entries and entries not matching the string length
 826 0a14 1CBF     	    itt ne
 827 0a16 1346     	    movne r3, r2
 828 0a18 F6E7     	    bne check_current_find
 829 0a1a 0546     	    mov r5, r0 // r5 <- ptr to buffer
 830 0a1c 12F10906 	    adds r6, r2, #9 // r6 <- ptr to name
 831              	check_name_find:
 832 0a20 15F8017B 	    ldrb r7, [r5], #1
 833 0a24 16F8019B 	    ldrb r9, [r6], #1
 834 0a28 4F45     	    cmp r7, r9
 835 0a2a 1CBF     	    itt ne
 836 0a2c 1346     	    movne r3, r2
 837 0a2e EBE7     	    bne check_current_find
 838 0a30 013C     	    subs r4, #1
 839 0a32 04B1     	    cbz r4, end_find
 840 0a34 F4E7     	    b check_name_find
 841              	end_find:
 842 0a36 4BF8042B 	    __pushreg r2
 843 0a3a 5CF804AB 	__end_defnative find
 843      DAF80090 
 843      48470000 
 843      0000
 844              	
 845              	/* ( defn-addr -- code-addr ) */
 846 0a48 EC090000 	__defnative ">CFA",,to_code_field_addr
 846      00000000 
 846      043E4346 
 846      41000000 
 846      00000000 
 847 0a5c 5BF8040C 	    __peekreg r0
 848 0a60 4068     	    ldr r0, [r0, #4]
 849 0a62 4BF8040C 	    __putreg r0
 850 0a66 5CF804AB 	__end_defnative to_code_field_addr
 850      DAF80090 
 850      4847
 851              	
 852              	/*
 853              	 * Returns the data field address for a definition. For a
 854              	 * native definition, this is the beginning of the native
 855              	 * routine. For a non-native definition, this is the word
 856              	 * immediately after the do_colon word.
 857              	 */
 858              	/* ( defn-addr -- data-addr ) */
 859 0a70 480A0000 	__defnative ">DFA",,to_data_field_addr
 859      00000000 
 859      043E4446 
 859      41000000 
 859      00000000 
 860 0a84 5BF8040C 	    __peekreg r0
 861 0a88 4068     	    ldr r0, [r0, #4]
 862 0a8a 0430     	    adds r0, #4
 863 0a8c 4BF8040C 	    __putreg r0
 864 0a90 5CF804AB 	__end_defnative to_data_field_addr
 864      DAF80090 
 864      4847
 865              	
 866              	/*
 867              	 * Creates the header for a definition and places it at
 868              	 * HERE, updating HERE and LATEST. The header is the link
 869              	 * to the next definition, and the name (and name length).
 870              	 * the flags are always zero.
 871              	 */
 872              	/* ( buff-addr len -- ) */
 873 0a9a 00BF700A 	__defnative "CREATE",,create
 873      00000000 
 873      00000643 
 873      52454154 
 873      45000000 
 874 0ab0 3BE90300 	    ldmdb r11!, {r0, r1} // r0,r1 <- buff-addr,len
 875 0ab4 124A1268 	    __loadvar "HERE", r2 // r2 <- HERE
 876 0ab8 124B1B68 	    __loadvar "LATEST", r3 // r3 <- LATEST
 877 0abc 114C2260 	    __storevar r2, "LATEST", r4 // update LATEST to HERE
 878 0ac0 42F8083B 	    str r3, [r2], #8 // Write link. Skip over the pointer to code for now
 879 0ac4 02F8011B 	    strb r1, [r2], #1 // writes the len byte
 880 0ac8 11F00304 	    ands r4, r1, #3 // r4 = amount of padding required at end.
 881              	    // Because of the len byte, the amount of padding to get to
 882              	    // 4-byte alignment based on the last 2 bits of the length are:
 883              	    // 0: 3 bytes
 884              	    // 1: 2 bytes
 885              	    // 2: 1 byte
 886              	    // 3: 0 bytes
 887 0acc C4F10304 	    rsb r4, #3 // so r4 = 3-(len&3)
 888              	copy_name_create:
 889 0ad0 29B1     	    cbz r1, pad_name_create
 890 0ad2 10F8015B 	    ldrb r5, [r0], #1
 891 0ad6 02F8015B 	    strb r5, [r2], #1
 892 0ada 0139     	    subs r1, #1
 893 0adc F8E7     	    b copy_name_create
 894              	pad_name_create:
 895 0ade 94F0000F 	    teq r4, #0
 896 0ae2 1EBF     	    ittt ne
 897 0ae4 02F8011B 	    strbne r1, [r2], #1 // r1 was zero!
 898 0ae8 013C     	    subne r4, #1
 899 0aea F8E7     	    bne pad_name_create
 900 0aec 05480068 	    __loadvar "LATEST", r0 // r0 <- beginning of the header
 901 0af0 4260     	    str r2, [r0, #4] // now we can write the code address
 902 0af2 03480260 	    __storevar r2, "HERE", r0 // and update HERE
 903 0af6 5CF804AB 	__end_defnative create
 903      DAF80090 
 903      48470000 
 903      00000000 
 903      0000
 904              	
 905              	/*
 906              	 * Stores a value into HERE, and increments HERE by 4. The
 907              	 * implication is that HERE has special semantics: it points to
 908              	 * available memory, but the content of that memory is undefined.
 909              	 * Thus, it makes sense that once we write to the memory at
 910              	 * HERE, we should increment HERE to point to the next available
 911              	 * location.
 912              	 */
 913              	/* ( x -- ) */
 914 0b08 9C0A0000 	__defnative "HERE!",,store_to_here
 914      00000000 
 914      05484552 
 914      45210000 
 914      00000000 
 915 0b1c 5BF8040D 	    __popreg r0
 916 0b20 0449     	    ldr r1, =forth_var_HERE
 917 0b22 0A68     	    ldr r2, [r1] // r2 <- HERE
 918 0b24 42F8040B 	    str r0, [r2], #4
 919 0b28 0A60     	    str r2, [r1] // update HERE
 920 0b2a 5CF804AB 	__end_defnative store_to_here
 920      DAF80090 
 920      48470000 
 920      0000
 921              	
 922              	/* Switch to immediate mode, immediately. */
 923 0b38 080B0000 	__defnative "[",F_IMMED,immediate_mode
 923      00000000 
 923      815B0000 
 923      00000000 
 924 0b48 0020     	    movs r0, #0
 925 0b4a 03490860 	    __storevar r0, "STATE", r1
 926 0b4e 5CF804AB 	__end_defnative immediate_mode
 926      DAF80090 
 926      48470000 
 926      0000
 927              	
 928              	/* Switch to compile mode. */
 929 0b5c 380B0000 	__defnative "]",,compile_mode
 929      00000000 
 929      015D0000 
 929      00000000 
 930 0b6c 0120     	    movs r0, #1
 931 0b6e 03490860 	    __storevar r0, "STATE", r1
 932 0b72 5CF804AB 	__end_defnative compile_mode
 932      DAF80090 
 932      48470000 
 932      0000
 933              	
 934              	/* ( defn-addr -- ) */
 935 0b80 5C0B0000 	__defnative "TOGGLE_HIDDEN",,toggle_hidden
 935      00000000 
 935      0D544F47 
 935      474C455F 
 935      48494444 
 936 0b9c 5BF8040D 	    __popreg r0
 937 0ba0 10F8081F 	    ldrb r1, [r0, #8]!
 938 0ba4 91F02001 	    eors r1, F_HIDDEN
 939 0ba8 0170     	    strb r1, [r0]
 940 0baa 5CF804AB 	__end_defnative toggle_hidden
 940      DAF80090 
 940      4847
 941              	
 942 0bb4 800B0000 	__defnative "TOGGLE_IMMEDIATE",,toggle_immediate
 942      00000000 
 942      10544F47 
 942      474C455F 
 942      494D4D45 
 943 0bd4 05480068 	    __loadvar "LATEST", r0
 944 0bd8 10F8081F 	    ldrb r1, [r0, #8]!
 945 0bdc 91F08001 	    eors r1, F_IMMED
 946 0be0 0170     	    strb r1, [r0]
 947 0be2 5CF804AB 	__end_defnative toggle_immediate
 947      DAF80090 
 947      48470000 
 947      0000
 948              	
 949              	/*
 950              	 * Add the offset in the next word to the instruction pointer
 951              	 * of the caller, so that when this word returns, the caller
 952              	 * is executing there.
 953              	 */
 954 0bf0 B40B0000 	__defnative "BRANCH",,branch
 954      00000000 
 954      06425241 
 954      4E434800 
 954      00000000 
 955 0c04 01BC     	    pop {r0}
 956 0c06 50F8041B 	    ldr r1, [r0], #4 // r1 <- offset, ptr += 4
 957 0c0a 4FEA8101 	    lsl r1, #2 // r1 *= 4
 958 0c0e 0918     	    adds r1, r0 // so offset zero just goes to next word
 959 0c10 02B4     	    push {r1}
 960 0c12 5CF804AB 	__end_defnative branch
 960      DAF80090 
 960      4847
 961              	
 962              	/*
 963              	 * If the parameter on the stack is zero, add the offset in the
 964              	 * next word to the instruction pointer of the caller, so that
 965              	 * when this word returns, the caller is executing there.
 966              	 * Otherwise, do nothing.
 967              	 */
 968              	/* ( x -- ) */
 969 0c1c F00B0000 	__defnative "0BRANCH",,brancheq
 969      00000000 
 969      07304252 
 969      414E4348 
 969      00000000 
 970 0c30 5BF8042D 	    __popreg r2
 971 0c34 01BC     	    pop {r0}
 972 0c36 50F8041B 	    ldr r1, [r0], #4 // r1 <- offset, ptr += 4
 973 0c3a 92F0000F 	    teq r2, #0
 974 0c3e 04BF     	    itt eq  // add offset only if parameter was zero
 975 0c40 8900     	    lsleq r1, #2 // r1 *= 4
 976 0c42 0918     	    addeq r1, r0 // so offset zero just goes to next word
 977 0c44 02B4     	    push {r1}
 978 0c46 5CF804AB 	__end_defnative brancheq
 978      DAF80090 
 978      4847
 979              	
 980              	/* Compile a definition. */
 981 0c50 1C0C0000 	__defword ":",,compile
 981      00000000 
 981      013A0000 
 981      00000000 
 982 0c60 00000000 	    __word word
 983 0c64 00000000 	    __word create
 984 0c68 00000000 	    __word literal
 985 0c6c 00000000 	    __word do_colon
 986 0c70 00000000 	    __word store_to_here
 987 0c74 00000000 	    __word latest
 988 0c78 00000000 	    __word fetch
 989 0c7c 00000000 	    __word toggle_hidden
 990 0c80 00000000 	    __word compile_mode
 991 0c84 00000000 	__end_defword compile
 992              	
 993              	/* End compilation of a definition. */
 994 0c88 500C0000 	__defword ";",F_IMMED,end_compile
 994      00000000 
 994      813B0000 
 994      00000000 
 995 0c98 00000000 	    __word literal
 996 0c9c 00000000 	    __word exit
 997 0ca0 00000000 	    __word store_to_here
 998 0ca4 00000000 	    __word latest
 999 0ca8 00000000 	    __word fetch
 1000 0cac 00000000 	    __word toggle_hidden
 1001 0cb0 00000000 	    __word immediate_mode
 1002 0cb4 00000000 	__end_defword end_compile
 1003              	
 1004              	/* Toggle hidden on the next word. */
 1005 0cb8 880C0000 	__defword "HIDE",,hide
 1005      00000000 
 1005      04484944 
 1005      45000000 
 1005      00000000 
 1006 0ccc 00000000 	    __word word
 1007 0cd0 00000000 	    __word find
 1008 0cd4 00000000 	    __word toggle_hidden
 1009 0cd8 00000000 	__end_defword hide
 1010              	
 1011              	/* Gets the code field address of the next word. */
 1012              	/* ( -- code-addr ) */
 1013 0cdc B80C0000 	__defword "'",,code_field_addr_of_next_word
 1013      00000000 
 1013      01270000 
 1013      00000000 
 1014 0cec 00000000 	    __word word
 1015 0cf0 00000000 	    __word find
 1016 0cf4 00000000 	    __word to_code_field_addr
 1017 0cf8 00000000 	__end_defword code_field_addr_of_next_word
 1018              	
 1019 0cfc DC0C0000 	__defword "TESTING",,testing
 1019      00000000 
 1019      07544553 
 1019      54494E47 
 1019      00000000 
 1020 0d10 00000000 	    __word word
 1021 0d14 00000000 	    __word number
 1022 0d18 00000000 	    __word quit
 1023 0d1c 00000000 	__end_defword testing
DEFINED SYMBOLS
../src/forth_system.S:43     *ABS*:00000080 F_IMMED
../src/forth_system.S:44     *ABS*:00000040 F_UNUSED
../src/forth_system.S:45     *ABS*:00000020 F_HIDDEN
../src/forth_system.S:46     *ABS*:0000001f F_LENMASK
../src/forth_system.S:1019   .text:00000cfc link
../src/forth_system.S:238    .text:00000000 forth_name_base
../src/forth_system.S:238    .text:00000000 $d
../src/forth_system.S:238    .text:00000010 forth_base
../src/forth_system.S:238    .text:0000000d forth_end_name_base
../src/forth_system.S:238    .text:00000014 forth_code_base
../src/forth_system.S:238    .data:00000000 forth_var_BASE
../src/forth_system.S:238    .text:00000014 $t
../src/forth_system.S:238    .text:00000026 $d
../src/forth_system.S:238    .text:00000028 $d
                            .data:00000000 $d
../src/forth_system.S:240    .text:0000002c forth_name_latest
../src/forth_system.S:240    .text:0000002c $d
../src/forth_system.S:240    .text:0000003c forth_latest
../src/forth_system.S:240    .text:0000003b forth_end_name_latest
../src/forth_system.S:240    .text:00000040 forth_code_latest
../src/forth_system.S:240    .data:00000004 forth_var_LATEST
../src/forth_system.S:240    .text:00000040 $t
../src/forth_system.S:240    .text:00000052 $d
../src/forth_system.S:240    .text:00000054 $d
../src/forth_system.S:1019   .text:00000cfc forth_name_testing
../src/forth_system.S:241    .text:00000058 forth_name_here
../src/forth_system.S:241    .text:00000058 $d
../src/forth_system.S:241    .text:00000068 forth_here
../src/forth_system.S:241    .text:00000065 forth_end_name_here
../src/forth_system.S:241    .text:0000006c forth_code_here
../src/forth_system.S:241    .data:00000008 forth_var_HERE
../src/forth_system.S:241    .text:0000006c $t
../src/forth_system.S:241    .text:0000007e $d
../src/forth_system.S:241    .text:00000080 $d
../src/forth_system.S:242    .text:00000084 forth_name_state
../src/forth_system.S:242    .text:00000084 $d
../src/forth_system.S:242    .text:00000094 forth_state
../src/forth_system.S:242    .text:00000092 forth_end_name_state
../src/forth_system.S:242    .text:00000098 forth_code_state
../src/forth_system.S:242    .data:0000000c forth_var_STATE
../src/forth_system.S:242    .text:00000098 $t
../src/forth_system.S:242    .text:000000aa $d
../src/forth_system.S:242    .text:000000ac $d
../src/forth_system.S:252    .text:000000b0 forth_enter
../src/forth_system.S:242    .text:000000b0 $t
../src/forth_system.S:262    .text:000000c8 forth_name_quit
../src/forth_system.S:262    .text:000000c8 $d
../src/forth_system.S:262    .text:000000d8 forth_quit
../src/forth_system.S:262    .text:000000d5 forth_end_name_quit
../src/forth_system.S:262    .text:000000dc forth_code_quit
../src/forth_system.S:263    .text:000000dc $t
../src/forth_system.S:272    .text:000000f0 forth_do_colon
../src/forth_system.S:279    .text:00000104 forth_name_exit
../src/forth_system.S:279    .text:00000104 $d
../src/forth_system.S:279    .text:00000114 forth_exit
../src/forth_system.S:279    .text:00000111 forth_end_name_exit
../src/forth_system.S:279    .text:00000118 forth_code_exit
../src/forth_system.S:280    .text:00000118 $t
../src/forth_system.S:284    .text:00000128 forth_name_literal
../src/forth_system.S:284    .text:00000128 $d
../src/forth_system.S:284    .text:00000134 forth_literal
../src/forth_system.S:284    .text:00000134 forth_end_name_literal
../src/forth_system.S:284    .text:00000138 forth_code_literal
../src/forth_system.S:285    .text:00000138 $t
../src/forth_system.S:290    .text:0000014c forth_name_drop
../src/forth_system.S:290    .text:0000014c $d
../src/forth_system.S:290    .text:0000015c forth_drop
../src/forth_system.S:290    .text:00000159 forth_end_name_drop
../src/forth_system.S:290    .text:00000160 forth_code_drop
../src/forth_system.S:291    .text:00000160 $t
../src/forth_system.S:295    .text:00000170 forth_name_2drop
../src/forth_system.S:295    .text:00000170 $d
../src/forth_system.S:295    .text:00000180 forth_2drop
../src/forth_system.S:295    .text:0000017e forth_end_name_2drop
../src/forth_system.S:295    .text:00000184 forth_code_2drop
../src/forth_system.S:296    .text:00000184 $t
../src/forth_system.S:300    .text:00000194 forth_name_swap
../src/forth_system.S:300    .text:00000194 $d
../src/forth_system.S:300    .text:000001a4 forth_swap
../src/forth_system.S:300    .text:000001a1 forth_end_name_swap
../src/forth_system.S:300    .text:000001a8 forth_code_swap
../src/forth_system.S:301    .text:000001a8 $t
../src/forth_system.S:306    .text:000001bc forth_name_2swap
../src/forth_system.S:306    .text:000001bc $d
../src/forth_system.S:306    .text:000001cc forth_2swap
../src/forth_system.S:306    .text:000001ca forth_end_name_2swap
../src/forth_system.S:306    .text:000001d0 forth_code_2swap
../src/forth_system.S:307    .text:000001d0 $t
../src/forth_system.S:313    .text:000001e8 forth_name_dup
../src/forth_system.S:313    .text:000001e8 $d
../src/forth_system.S:313    .text:000001f4 forth_dup
../src/forth_system.S:313    .text:000001f4 forth_end_name_dup
../src/forth_system.S:313    .text:000001f8 forth_code_dup
../src/forth_system.S:314    .text:000001f8 $t
../src/forth_system.S:319    .text:0000020c forth_name_2dup
../src/forth_system.S:319    .text:0000020c $d
../src/forth_system.S:319    .text:0000021c forth_2dup
../src/forth_system.S:319    .text:00000219 forth_end_name_2dup
../src/forth_system.S:319    .text:00000220 forth_code_2dup
../src/forth_system.S:320    .text:00000220 $t
../src/forth_system.S:325    .text:00000234 forth_name_maybe_dup
../src/forth_system.S:325    .text:00000234 $d
../src/forth_system.S:325    .text:00000244 forth_maybe_dup
../src/forth_system.S:325    .text:00000241 forth_end_name_maybe_dup
../src/forth_system.S:325    .text:00000248 forth_code_maybe_dup
../src/forth_system.S:326    .text:00000248 $t
../src/forth_system.S:329    .text:00000252 skip_maybe_dup
../src/forth_system.S:333    .text:0000025c forth_name_over
../src/forth_system.S:333    .text:0000025c $d
../src/forth_system.S:333    .text:0000026c forth_over
../src/forth_system.S:333    .text:00000269 forth_end_name_over
../src/forth_system.S:333    .text:00000270 forth_code_over
../src/forth_system.S:334    .text:00000270 $t
../src/forth_system.S:339    .text:00000284 forth_name_rot
../src/forth_system.S:339    .text:00000284 $d
../src/forth_system.S:339    .text:00000290 forth_rot
../src/forth_system.S:339    .text:00000290 forth_end_name_rot
../src/forth_system.S:339    .text:00000294 forth_code_rot
../src/forth_system.S:340    .text:00000294 $t
../src/forth_system.S:346    .text:000002ac forth_name_nrot
../src/forth_system.S:346    .text:000002ac $d
../src/forth_system.S:346    .text:000002bc forth_nrot
../src/forth_system.S:346    .text:000002b9 forth_end_name_nrot
../src/forth_system.S:346    .text:000002c0 forth_code_nrot
../src/forth_system.S:347    .text:000002c0 $t
../src/forth_system.S:353    .text:000002d8 forth_name_inc
../src/forth_system.S:353    .text:000002d8 $d
../src/forth_system.S:353    .text:000002e4 forth_inc
../src/forth_system.S:353    .text:000002e3 forth_end_name_inc
../src/forth_system.S:353    .text:000002e8 forth_code_inc
../src/forth_system.S:354    .text:000002e8 $t
../src/forth_system.S:360    .text:000002fc forth_name_dec
../src/forth_system.S:360    .text:000002fc $d
../src/forth_system.S:360    .text:00000308 forth_dec
../src/forth_system.S:360    .text:00000307 forth_end_name_dec
../src/forth_system.S:360    .text:0000030c forth_code_dec
../src/forth_system.S:361    .text:0000030c $t
../src/forth_system.S:367    .text:00000320 forth_name_inc4
../src/forth_system.S:367    .text:00000320 $d
../src/forth_system.S:367    .text:0000032c forth_inc4
../src/forth_system.S:367    .text:0000032b forth_end_name_inc4
../src/forth_system.S:367    .text:00000330 forth_code_inc4
../src/forth_system.S:368    .text:00000330 $t
../src/forth_system.S:374    .text:00000344 forth_name_dec4
../src/forth_system.S:374    .text:00000344 $d
../src/forth_system.S:374    .text:00000350 forth_dec4
../src/forth_system.S:374    .text:0000034f forth_end_name_dec4
../src/forth_system.S:374    .text:00000354 forth_code_dec4
../src/forth_system.S:375    .text:00000354 $t
../src/forth_system.S:381    .text:00000368 forth_name_add
../src/forth_system.S:381    .text:00000368 $d
../src/forth_system.S:381    .text:00000374 forth_add
../src/forth_system.S:381    .text:00000372 forth_end_name_add
../src/forth_system.S:381    .text:00000378 forth_code_add
../src/forth_system.S:382    .text:00000378 $t
../src/forth_system.S:388    .text:0000038c forth_name_sub
../src/forth_system.S:388    .text:0000038c $d
../src/forth_system.S:388    .text:00000398 forth_sub
../src/forth_system.S:388    .text:00000396 forth_end_name_sub
../src/forth_system.S:388    .text:0000039c forth_code_sub
../src/forth_system.S:389    .text:0000039c $t
../src/forth_system.S:395    .text:000003b4 forth_name_mul
../src/forth_system.S:395    .text:000003b4 $d
../src/forth_system.S:395    .text:000003c0 forth_mul
../src/forth_system.S:395    .text:000003be forth_end_name_mul
../src/forth_system.S:395    .text:000003c4 forth_code_mul
../src/forth_system.S:396    .text:000003c4 $t
../src/forth_system.S:402    .text:000003dc forth_name_divmod
../src/forth_system.S:402    .text:000003dc $d
../src/forth_system.S:402    .text:000003ec forth_divmod
../src/forth_system.S:402    .text:000003e9 forth_end_name_divmod
../src/forth_system.S:402    .text:000003f0 forth_code_divmod
../src/forth_system.S:403    .text:000003f0 $t
../src/forth_system.S:411    .text:0000040c forth_name_div
../src/forth_system.S:411    .text:0000040c $d
../src/forth_system.S:411    .text:00000418 forth_div
../src/forth_system.S:411    .text:00000416 forth_end_name_div
../src/forth_system.S:411    .text:0000041c forth_code_div
../src/forth_system.S:412    .text:0000041c $t
../src/forth_system.S:418    .text:00000434 forth_name_eq
../src/forth_system.S:418    .text:00000434 $d
../src/forth_system.S:418    .text:00000440 forth_eq
../src/forth_system.S:418    .text:0000043e forth_end_name_eq
../src/forth_system.S:418    .text:00000444 forth_code_eq
../src/forth_system.S:419    .text:00000444 $t
../src/forth_system.S:428    .text:00000460 forth_name_ne
../src/forth_system.S:428    .text:00000460 $d
../src/forth_system.S:428    .text:0000046c forth_ne
../src/forth_system.S:428    .text:0000046b forth_end_name_ne
../src/forth_system.S:428    .text:00000470 forth_code_ne
../src/forth_system.S:429    .text:00000470 $t
../src/forth_system.S:439    .text:0000048c forth_name_lt
../src/forth_system.S:439    .text:0000048c $d
../src/forth_system.S:439    .text:00000498 forth_lt
../src/forth_system.S:439    .text:00000496 forth_end_name_lt
../src/forth_system.S:439    .text:0000049c forth_code_lt
../src/forth_system.S:440    .text:0000049c $t
../src/forth_system.S:450    .text:000004b8 forth_name_gt
../src/forth_system.S:450    .text:000004b8 $d
../src/forth_system.S:450    .text:000004c4 forth_gt
../src/forth_system.S:450    .text:000004c2 forth_end_name_gt
../src/forth_system.S:450    .text:000004c8 forth_code_gt
../src/forth_system.S:451    .text:000004c8 $t
../src/forth_system.S:461    .text:000004e4 forth_name_le
../src/forth_system.S:461    .text:000004e4 $d
../src/forth_system.S:461    .text:000004f0 forth_le
../src/forth_system.S:461    .text:000004ef forth_end_name_le
../src/forth_system.S:461    .text:000004f4 forth_code_le
../src/forth_system.S:462    .text:000004f4 $t
../src/forth_system.S:472    .text:00000510 forth_name_ge
../src/forth_system.S:472    .text:00000510 $d
../src/forth_system.S:472    .text:0000051c forth_ge
../src/forth_system.S:472    .text:0000051b forth_end_name_ge
../src/forth_system.S:472    .text:00000520 forth_code_ge
../src/forth_system.S:473    .text:00000520 $t
../src/forth_system.S:482    .text:0000053c forth_name_eqz
../src/forth_system.S:482    .text:0000053c $d
../src/forth_system.S:482    .text:00000548 forth_eqz
../src/forth_system.S:482    .text:00000547 forth_end_name_eqz
../src/forth_system.S:482    .text:0000054c forth_code_eqz
../src/forth_system.S:483    .text:0000054c $t
../src/forth_system.S:492    .text:00000568 forth_name_nez
../src/forth_system.S:492    .text:00000568 $d
../src/forth_system.S:492    .text:00000574 forth_nez
../src/forth_system.S:492    .text:00000574 forth_end_name_nez
../src/forth_system.S:492    .text:00000578 forth_code_nez
../src/forth_system.S:493    .text:00000578 $t
../src/forth_system.S:497    .text:00000586 skip_nez
../src/forth_system.S:502    .text:00000590 forth_name_ltz
../src/forth_system.S:502    .text:00000590 $d
../src/forth_system.S:502    .text:0000059c forth_ltz
../src/forth_system.S:502    .text:0000059b forth_end_name_ltz
../src/forth_system.S:502    .text:000005a0 forth_code_ltz
../src/forth_system.S:503    .text:000005a0 $t
../src/forth_system.S:513    .text:000005bc forth_name_gtz
../src/forth_system.S:513    .text:000005bc $d
../src/forth_system.S:513    .text:000005c8 forth_gtz
../src/forth_system.S:513    .text:000005c7 forth_end_name_gtz
../src/forth_system.S:513    .text:000005cc forth_code_gtz
../src/forth_system.S:514    .text:000005cc $t
../src/forth_system.S:524    .text:000005e8 forth_name_lez
../src/forth_system.S:524    .text:000005e8 $d
../src/forth_system.S:524    .text:000005f4 forth_lez
../src/forth_system.S:524    .text:000005f4 forth_end_name_lez
../src/forth_system.S:524    .text:000005f8 forth_code_lez
../src/forth_system.S:525    .text:000005f8 $t
../src/forth_system.S:535    .text:00000614 forth_name_gez
../src/forth_system.S:535    .text:00000614 $d
../src/forth_system.S:535    .text:00000620 forth_gez
../src/forth_system.S:535    .text:00000620 forth_end_name_gez
../src/forth_system.S:535    .text:00000624 forth_code_gez
../src/forth_system.S:536    .text:00000624 $t
../src/forth_system.S:545    .text:00000640 forth_name_and
../src/forth_system.S:545    .text:00000640 $d
../src/forth_system.S:545    .text:0000064c forth_and
../src/forth_system.S:545    .text:0000064c forth_end_name_and
../src/forth_system.S:545    .text:00000650 forth_code_and
../src/forth_system.S:546    .text:00000650 $t
../src/forth_system.S:552    .text:00000664 forth_name_or
../src/forth_system.S:552    .text:00000664 $d
../src/forth_system.S:552    .text:00000670 forth_or
../src/forth_system.S:552    .text:0000066f forth_end_name_or
../src/forth_system.S:552    .text:00000674 forth_code_or
../src/forth_system.S:553    .text:00000674 $t
../src/forth_system.S:559    .text:00000688 forth_name_xor
../src/forth_system.S:559    .text:00000688 $d
../src/forth_system.S:559    .text:00000694 forth_xor
../src/forth_system.S:559    .text:00000694 forth_end_name_xor
../src/forth_system.S:559    .text:00000698 forth_code_xor
../src/forth_system.S:560    .text:00000698 $t
../src/forth_system.S:566    .text:000006ac forth_name_not
../src/forth_system.S:566    .text:000006ac $d
../src/forth_system.S:566    .text:000006bc forth_not
../src/forth_system.S:566    .text:000006bb forth_end_name_not
../src/forth_system.S:566    .text:000006c0 forth_code_not
../src/forth_system.S:567    .text:000006c0 $t
../src/forth_system.S:573    .text:000006d8 forth_name_store
../src/forth_system.S:573    .text:000006d8 $d
../src/forth_system.S:573    .text:000006e4 forth_store
../src/forth_system.S:573    .text:000006e2 forth_end_name_store
../src/forth_system.S:573    .text:000006e8 forth_code_store
../src/forth_system.S:574    .text:000006e8 $t
../src/forth_system.S:579    .text:000006f8 forth_name_store_char
../src/forth_system.S:579    .text:000006f8 $d
../src/forth_system.S:579    .text:00000704 forth_store_char
../src/forth_system.S:579    .text:00000703 forth_end_name_store_char
../src/forth_system.S:579    .text:00000708 forth_code_store_char
../src/forth_system.S:580    .text:00000708 $t
../src/forth_system.S:585    .text:00000718 forth_name_fetch
../src/forth_system.S:585    .text:00000718 $d
../src/forth_system.S:585    .text:00000724 forth_fetch
../src/forth_system.S:585    .text:00000722 forth_end_name_fetch
../src/forth_system.S:585    .text:00000728 forth_code_fetch
../src/forth_system.S:586    .text:00000728 $t
../src/forth_system.S:592    .text:0000073c forth_name_fetch_char
../src/forth_system.S:592    .text:0000073c $d
../src/forth_system.S:592    .text:00000748 forth_fetch_char
../src/forth_system.S:592    .text:00000747 forth_end_name_fetch_char
../src/forth_system.S:592    .text:0000074c forth_code_fetch_char
../src/forth_system.S:593    .text:0000074c $t
../src/forth_system.S:599    .text:00000760 forth_name_addstore
../src/forth_system.S:599    .text:00000760 $d
../src/forth_system.S:599    .text:0000076c forth_addstore
../src/forth_system.S:599    .text:0000076b forth_end_name_addstore
../src/forth_system.S:599    .text:00000770 forth_code_addstore
../src/forth_system.S:600    .text:00000770 $t
../src/forth_system.S:607    .text:00000784 forth_name_substore
../src/forth_system.S:607    .text:00000784 $d
../src/forth_system.S:607    .text:00000790 forth_substore
../src/forth_system.S:607    .text:0000078f forth_end_name_substore
../src/forth_system.S:607    .text:00000794 forth_code_substore
../src/forth_system.S:608    .text:00000794 $t
../src/forth_system.S:617    .text:000007a8 forth_name_memcpy
../src/forth_system.S:617    .text:000007a8 $d
../src/forth_system.S:617    .text:000007b8 forth_memcpy
../src/forth_system.S:617    .text:000007b8 forth_end_name_memcpy
../src/forth_system.S:617    .text:000007bc forth_code_memcpy
../src/forth_system.S:619    .text:000007bc $t
../src/forth_system.S:626    .text:000007d4 forth_name_memmove
../src/forth_system.S:626    .text:000007d4 $d
../src/forth_system.S:626    .text:000007e4 forth_memmove
../src/forth_system.S:626    .text:000007e4 forth_end_name_memmove
../src/forth_system.S:626    .text:000007e8 forth_code_memmove
../src/forth_system.S:628    .text:000007e8 $t
../src/forth_system.S:638    .text:00000802 end_memmove
../src/forth_system.S:632    .text:000007f4 loop_memmove
../src/forth_system.S:643    .text:0000080c forth_name_param_to_return
../src/forth_system.S:643    .text:0000080c $d
../src/forth_system.S:643    .text:00000818 forth_param_to_return
../src/forth_system.S:643    .text:00000817 forth_end_name_param_to_return
../src/forth_system.S:643    .text:0000081c forth_code_param_to_return
../src/forth_system.S:644    .text:0000081c $t
../src/forth_system.S:650    .text:0000082c forth_name_return_to_param
../src/forth_system.S:650    .text:0000082c $d
../src/forth_system.S:650    .text:00000838 forth_return_to_param
../src/forth_system.S:650    .text:00000837 forth_end_name_return_to_param
../src/forth_system.S:650    .text:0000083c forth_code_return_to_param
../src/forth_system.S:651    .text:0000083c $t
../src/forth_system.S:657    .text:0000084c forth_name_fetch_return
../src/forth_system.S:657    .text:0000084c $d
../src/forth_system.S:657    .text:00000858 forth_fetch_return
../src/forth_system.S:657    .text:00000857 forth_end_name_fetch_return
../src/forth_system.S:657    .text:0000085c forth_code_fetch_return
../src/forth_system.S:658    .text:0000085c $t
../src/forth_system.S:664    .text:0000086c forth_name_store_return
../src/forth_system.S:664    .text:0000086c $d
../src/forth_system.S:664    .text:00000878 forth_store_return
../src/forth_system.S:664    .text:00000877 forth_end_name_store_return
../src/forth_system.S:664    .text:0000087c forth_code_store_return
../src/forth_system.S:665    .text:0000087c $t
../src/forth_system.S:671    .text:0000088c forth_name_key
../src/forth_system.S:671    .text:0000088c $d
../src/forth_system.S:671    .text:00000898 forth_key
../src/forth_system.S:671    .text:00000898 forth_end_name_key
../src/forth_system.S:671    .text:0000089c forth_code_key
../src/forth_system.S:672    .text:0000089c $t
../src/forth_system.S:673    .text:000008a0 await_key
../src/forth_system.S:683    .text:000008bc forth_name_emit
../src/forth_system.S:683    .text:000008bc $d
../src/forth_system.S:683    .text:000008cc forth_emit
../src/forth_system.S:683    .text:000008c9 forth_end_name_emit
../src/forth_system.S:683    .text:000008d0 forth_code_emit
../src/forth_system.S:684    .text:000008d0 $t
../src/forth_system.S:702    .data:00000010 forth_word_buffer
../src/forth_system.S:706    .text:000008ec forth_name_word
../src/forth_system.S:706    .text:000008ec $d
../src/forth_system.S:706    .text:000008fc forth_word
../src/forth_system.S:706    .text:000008f9 forth_end_name_word
../src/forth_system.S:706    .text:00000900 forth_code_word
../src/forth_system.S:707    .text:00000900 $t
../src/forth_system.S:711    .text:0000090c await_word
../src/forth_system.S:723    .text:00000926 start_word
../src/forth_system.S:743    .text:00000950 await_end_comment_word
../src/forth_system.S:730    .text:00000934 getchar_for_word
../src/forth_system.S:748    .text:0000095a end_word
../src/forth_system.S:751    .text:0000096c $d
../src/forth_system.S:754    .text:00000970 forth_name_number
../src/forth_system.S:754    .text:00000970 $d
../src/forth_system.S:754    .text:00000980 forth_number
../src/forth_system.S:754    .text:0000097f forth_end_name_number
../src/forth_system.S:754    .text:00000984 forth_code_number
../src/forth_system.S:755    .text:00000984 $t
../src/forth_system.S:795    .text:000009d4 end_number
../src/forth_system.S:767    .text:000009a0 is_hex_number
../src/forth_system.S:773    .text:000009aa next_number
../src/forth_system.S:782    .text:000009bc convert_az_number
../src/forth_system.S:789    .text:000009c8 check_number
../src/forth_system.S:800    .text:000009e8 $d
../src/forth_system.S:817    .text:000009ec forth_name_find
../src/forth_system.S:817    .text:000009ec $d
../src/forth_system.S:817    .text:000009fc forth_find
../src/forth_system.S:817    .text:000009f9 forth_end_name_find
../src/forth_system.S:817    .text:00000a00 forth_code_find
../src/forth_system.S:818    .text:00000a00 $t
../src/forth_system.S:820    .text:00000a08 check_current_find
../src/forth_system.S:841    .text:00000a36 end_find
../src/forth_system.S:831    .text:00000a20 check_name_find
../src/forth_system.S:843    .text:00000a44 $d
../src/forth_system.S:846    .text:00000a48 forth_name_to_code_field_addr
../src/forth_system.S:846    .text:00000a48 $d
../src/forth_system.S:846    .text:00000a58 forth_to_code_field_addr
../src/forth_system.S:846    .text:00000a55 forth_end_name_to_code_field_addr
../src/forth_system.S:846    .text:00000a5c forth_code_to_code_field_addr
../src/forth_system.S:847    .text:00000a5c $t
../src/forth_system.S:859    .text:00000a70 forth_name_to_data_field_addr
../src/forth_system.S:859    .text:00000a70 $d
../src/forth_system.S:859    .text:00000a80 forth_to_data_field_addr
../src/forth_system.S:859    .text:00000a7d forth_end_name_to_data_field_addr
../src/forth_system.S:859    .text:00000a84 forth_code_to_data_field_addr
../src/forth_system.S:860    .text:00000a84 $t
../src/forth_system.S:873    .text:00000a9c forth_name_create
../src/forth_system.S:873    .text:00000a9c $d
../src/forth_system.S:873    .text:00000aac forth_create
../src/forth_system.S:873    .text:00000aab forth_end_name_create
../src/forth_system.S:873    .text:00000ab0 forth_code_create
../src/forth_system.S:874    .text:00000ab0 $t
../src/forth_system.S:888    .text:00000ad0 copy_name_create
../src/forth_system.S:894    .text:00000ade pad_name_create
../src/forth_system.S:903    .text:00000b00 $d
../src/forth_system.S:914    .text:00000b08 forth_name_store_to_here
../src/forth_system.S:914    .text:00000b08 $d
../src/forth_system.S:914    .text:00000b18 forth_store_to_here
../src/forth_system.S:914    .text:00000b16 forth_end_name_store_to_here
../src/forth_system.S:914    .text:00000b1c forth_code_store_to_here
../src/forth_system.S:915    .text:00000b1c $t
../src/forth_system.S:920    .text:00000b34 $d
../src/forth_system.S:923    .text:00000b38 forth_name_immediate_mode
../src/forth_system.S:923    .text:00000b38 $d
../src/forth_system.S:923    .text:00000b44 forth_immediate_mode
../src/forth_system.S:923    .text:00000b42 forth_end_name_immediate_mode
../src/forth_system.S:923    .text:00000b48 forth_code_immediate_mode
../src/forth_system.S:924    .text:00000b48 $t
../src/forth_system.S:926    .text:00000b58 $d
../src/forth_system.S:929    .text:00000b5c forth_name_compile_mode
../src/forth_system.S:929    .text:00000b5c $d
../src/forth_system.S:929    .text:00000b68 forth_compile_mode
../src/forth_system.S:929    .text:00000b66 forth_end_name_compile_mode
../src/forth_system.S:929    .text:00000b6c forth_code_compile_mode
../src/forth_system.S:930    .text:00000b6c $t
../src/forth_system.S:932    .text:00000b7c $d
../src/forth_system.S:935    .text:00000b80 forth_name_toggle_hidden
../src/forth_system.S:935    .text:00000b80 $d
../src/forth_system.S:935    .text:00000b98 forth_toggle_hidden
../src/forth_system.S:935    .text:00000b96 forth_end_name_toggle_hidden
../src/forth_system.S:935    .text:00000b9c forth_code_toggle_hidden
../src/forth_system.S:936    .text:00000b9c $t
../src/forth_system.S:942    .text:00000bb4 forth_name_toggle_immediate
../src/forth_system.S:942    .text:00000bb4 $d
../src/forth_system.S:942    .text:00000bd0 forth_toggle_immediate
../src/forth_system.S:942    .text:00000bcd forth_end_name_toggle_immediate
../src/forth_system.S:942    .text:00000bd4 forth_code_toggle_immediate
../src/forth_system.S:943    .text:00000bd4 $t
../src/forth_system.S:947    .text:00000bec $d
../src/forth_system.S:954    .text:00000bf0 forth_name_branch
../src/forth_system.S:954    .text:00000bf0 $d
../src/forth_system.S:954    .text:00000c00 forth_branch
../src/forth_system.S:954    .text:00000bff forth_end_name_branch
../src/forth_system.S:954    .text:00000c04 forth_code_branch
../src/forth_system.S:955    .text:00000c04 $t
../src/forth_system.S:969    .text:00000c1c forth_name_brancheq
../src/forth_system.S:969    .text:00000c1c $d
../src/forth_system.S:969    .text:00000c2c forth_brancheq
../src/forth_system.S:969    .text:00000c2c forth_end_name_brancheq
../src/forth_system.S:969    .text:00000c30 forth_code_brancheq
../src/forth_system.S:970    .text:00000c30 $t
../src/forth_system.S:981    .text:00000c50 forth_name_compile
../src/forth_system.S:981    .text:00000c50 $d
../src/forth_system.S:981    .text:00000c5c forth_compile
../src/forth_system.S:981    .text:00000c5a forth_end_name_compile
../src/forth_system.S:994    .text:00000c88 forth_name_end_compile
../src/forth_system.S:994    .text:00000c88 $d
../src/forth_system.S:994    .text:00000c94 forth_end_compile
../src/forth_system.S:994    .text:00000c92 forth_end_name_end_compile
../src/forth_system.S:1005   .text:00000cb8 forth_name_hide
../src/forth_system.S:1005   .text:00000cb8 $d
../src/forth_system.S:1005   .text:00000cc8 forth_hide
../src/forth_system.S:1005   .text:00000cc5 forth_end_name_hide
../src/forth_system.S:1013   .text:00000cdc forth_name_code_field_addr_of_next_word
../src/forth_system.S:1013   .text:00000cdc $d
../src/forth_system.S:1013   .text:00000ce8 forth_code_field_addr_of_next_word
../src/forth_system.S:1013   .text:00000ce6 forth_end_name_code_field_addr_of_next_word
../src/forth_system.S:1019   .text:00000cfc $d
../src/forth_system.S:1019   .text:00000d0c forth_testing
../src/forth_system.S:1019   .text:00000d0c forth_end_name_testing

UNDEFINED SYMBOLS
memcpy
usb_serial_getchar
usb_serial_putchar
