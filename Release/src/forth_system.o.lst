   1              	# 1 "../src/forth_system.S"
   1              	/*
   0              	
   0              	
   0              	
   2              	 * This is the core PixieForth system, which closely follows
   3              	 * the JonesForth tut by Richard Jones available at
   4              	 * http://git.annexia.org/?p=jonesforth.git;a=summary.
   5              	 */
   6              	
   7              	.syntax unified
   8              	
   9              	/* This macro writes the header of the function. */
  10              	.macro __new_func name
  11              	    .text
  12              	    .global \name
  13              	    .thumb_func
  14              	    .align 2
  16              	\name\():
  17              	.endm
  18              	
  19              	/* This macro writes the footer of the function. */
  20              	.macro __end_func name
  21              	    .pool
  23              	.endm
  24              	
  25              	/*
  26              	 * The ABI for words:
  27              	 *  r11 is the parameter stack pointer. Appears in dumps as fp.
  28              	 *  r12 is the instruction pointer. Appears in dumps as ip.
  29              	 *    Note that during execution of an instruction, r12 points to
  30              	 *    the next instruction (as long as the current instruction is
  31              	 *    not EXIT).
  32              	 *  r8 is the saved stack pointer from C. TODO: change to r10.
  33              	 *  sp ("r13") is the return stack pointer.
  34              	 *  lr ("r14") is the address to return to in C
  35              	 *
  36              	 *  Note that C is under no obligation to save r12, so all calls to C
  37              	 *  must save and restore r12.
  38              	 *
  39              	 *  Forth may freely use r0-r7, r9, r10.
  40              	 *  Forth may clobber r0-r7, r9-r12, sp, lr. All are saved/restored except r0 and r1.
  41              	 */
  42              	
  43              	.set F_IMMED,0x80
  44              	.set F_UNUSED,0x40
  45              	.set F_HIDDEN,0x20
  46              	.set F_LENMASK,0x1f // length mask
  47              	
  48              	// Stores the chain of links.
  49              	.set link, 0
  50              	
  51              	/*
  52              	 * The format of a word definition is:
  53              	 *   forth_name_<label>:
  54              	 *     .4byte <pointer to next definition>
  55              	 *     .4byte <pointer to forth_<label>>
  56              	 *     .byte <len of name>
  57              	 *     .ascii <name, with enough padding at end for alignment>
  58              	 *   forth_<label>:
  59              	 *     .4byte <address of forth_do_colon>
  60              	 *     .4byte <words in the definition>
  61              	 *     ... <more words>
  62              	 *     .4byte forth_exit
  63              	 */
  64              	.macro __defword name, flags=0, label
  65              	    .section .data
  67              	    .align 2
  68              	    .global forth_name_\label
  69              	forth_name_\label\():
  70              	    .4byte link
  71              	    .4byte forth_\label\()
  72              	    .set link, forth_name_\label
  73              	    .byte forth_end_name_\label\()-.-1+\flags
  74              	    .ascii "\name"
  75              	forth_end_name_\label\():
  76              	    .align 2, 0
  78              	    .global forth_\label
  80              	forth_\label\():
  81              	    .4byte forth_do_colon
  82              	    // list of word pointers go here, use __word macro.
  83              	.endm
  84              	
  85              	/* This macro writes the footer of a word definition. */
  86              	.macro __end_defword label
  87              	    .4byte forth_exit
  89              	.endm
  90              	
  91              	/* This macro writes a word pointer. */
  92              	.macro __word label
  93              	    .4byte forth_\label
  94              	.endm
  95              	
  96              	/*
  97              	 * The format of a native definition is:
  98              	 *   forth_name_<label>:
  99              	 *     .4byte <pointer to next definition>
 100              	 *     .4byte <pointer to forth_<label>>
 101              	 *     .byte <len of name>
 102              	 *     .ascii <name, with enough padding at end for alignment>
 103              	 *   forth_<label>:
 104              	 *     .4byte <address of forth_code_<label>>
 105              	 *   forth_code_<label>:
 106              	 *     <native code>
 107              	 *     __next
 108              	 */
 109              	.macro __defnative name, flags=0, label
 110              	    .section .data
 112              	    .align 2
 113              	    .global forth_name_\label
 114              	forth_name_\label\():
 115              	    .4byte link
 116              	    .4byte forth_\label\()
 117              	    .set link, forth_name_\label
 118              	    .byte forth_end_name_\label\()-.-1+\flags
 119              	    .ascii "\name"
 120              	forth_end_name_\label\():
 121              	    .align 2, 0
 123              	    .global forth_\label
 125              	forth_\label\():
 126              	    .4byte forth_code_\label
 128              	
 129              	    .text
 130              	    .global forth_code_\label
 131              	    .thumb_func
 133              	forth_code_\label\():
 134              	.endm
 135              	
 136              	/* This macro writes the footer of a native definition. */
 137              	.macro __end_defnative label
 138              	    __next
 139              	    .pool
 141              	.endm
 142              	
 143              	/*
 144              	 * This macro creates a native definition for a global variable.
 145              	 */
 146              	.macro __defvar name, flags=0, label, initial=0
 147              	    __defnative \name\(),\flags\(),\label\()
 148              	    ldr r0, =forth_var_\name\()
 149              	    ldr r0, [r0]
 150              	    __pushreg r0
 151              	    __end_defnative \label
 152              	
 153              	    .section .data
 155              	    .align 2
 156              	    .global forth_var_\name
 157              	forth_var_\name\():
 158              	    .4byte \initial
 160              	.endm
 161              	
 162              	/*
 163              	 * Some useful macros for writing native definitions.
 164              	 */
 165              	
 166              	/* Pushes the given register onto the parameter stack. */
 167              	.macro __pushreg reg
 168              	     str \reg\(), [r11], #4
 169              	.endm
 170              	
 171              	/* Pushes reg1 then reg2 onto the parameter stack. */
 172              	.macro __pushreg2 reg1, reg2
 173              	    strd \reg1\(), \reg2\(), [r11], #8
 174              	.endm
 175              	
 176              	/* Pops the parameter stack into the given register. */
 177              	.macro __popreg reg
 178              	     ldr \reg\(), [r11, #-4]!
 179              	.endm
 180              	
 181              	/* Pops reg1 then reg2 from the parameter stack. */
 182              	.macro __popreg2 reg1 reg2
 183              	     ldrd \reg2\(), \reg1\(), [r11, #-8]!
 184              	.endm
 185              	
 186              	/* Loads the given register with the top of the parameter stack. */
 187              	.macro __peekreg reg
 188              	    ldr \reg\(), [r11, #-4]
 189              	.endm
 190              	
 191              	/* Stores the given register to the top of the parameter stack. */
 192              	.macro __putreg reg
 193              	    str \reg\(), [r11, #-4]
 194              	.endm
 195              	
 196              	/* Loads the given variable into the given register. */
 197              	.macro __loadvar name reg
 198              	    ldr \reg\(), =forth_var_\name
 199              	    ldr \reg\(), [\reg\()]
 200              	.endm
 201              	
 202              	/*
 203              	 * Stores the given register into the given variable. This requires
 204              	 * a scratch register.
 205              	 */
 206              	.macro __storevar reg name scratchreg
 207              	    ldr \scratchreg\(), =forth_var_\name
 208              	    str \reg\(), [\scratchreg\()]
 209              	.endm
 210              	
 211              	/*
 212              	 * Saves r12 before calling into C.
 213              	 * The ARM ABI requires that subroutines save r4-r11 if
 214              	 * they use them. If we are calling into C, then we are responsible
 215              	 * for saving any other registers we use.
 216              	 */
 217              	.macro __begin_c_call
 218              	    push {r12}
 219              	.endm
 220              	
 221              	/* Restores r12 after returning from C. */
 222              	.macro __end_c_call
 223              	    pop {r12}
 224              	.endm
 225              	
 226              	 /*
 227              	  * This macro implements the NEXT fragment. All native
 228              	  * routines must end in NEXT. The beginning of all words
 229              	  * is a pointer to the routine to start that word. Sometimes
 230              	  * it is just a pointer to native assembly, if the word was
 231              	  * native. Otherwise, it is a pointer to standard
 232              	  * "interpret" routine.
 233              	  */
 234              	.macro __next
 235              	    ldr r10, [r12], #4 // r10 <- word to execute, next_word_ptr++
 236              	    ldr r9, [r10]  // r9 <- code for word to execute
 237              	    bx r9
 238              	.endm
 239              	
 240 0000 04480068 	__defvar "BASE",,base,10 // current base for interpreting text numbers
 240      4BF8040B 
 240      5CF804AB 
 240      DAF80090 
 240      48470000 
 241              	// The initial value must be the last name in the builtins.
 242 0018 00000000 	__defvar "LATEST",,latest,forth_name_testing // the addr of the last definition.
 242      00000000 
 242      064C4154 
 242      45535400 
 242      00000000 
 243 0030 18000000 	__defvar "HERE",,here // the addr of free data
 243      00000000 
 243      04484552 
 243      45000000 
 243      00000000 
 244 0048 30000000 	__defvar "STATE",,state // the Forth state: 0 = interpreting, 1 = compiling.
 244      00000000 
 244      05535441 
 244      54450000 
 244      00000000 
 245              	
 246              	/*
 247              	 * Accepts control from C.
 248              	 * r0 (first parameter) is the pointer to the parameter stack.
 249              	 * r1 (second parameter) is the address of the Forth routine to jump to,
 250              	 *     which is forth_<x>, not code_forth_<x>.
 251              	 * Because we don't trust the return stack or the parameter stack, we
 252              	 * store SP in r8 for later restoration, and are very careful NEVER to clobber r8!
 253              	 * TODO: change this to a struct so we can pass and return all sorts of things,
 254              	 *       like the HERE pointer.
 255              	 */
 256              	__new_func forth_enter
 257 0060 2DE9FC5F 	    push {r2-r12, lr}
 258 0064 E846     	    mov r8, sp
 259              	    // push {r1}
 260 0066 8346     	    mov r11, r0 // r11 <- parameter stack addr
 261 0068 8C46     	    mov r12, r1 // r12 <- addr of next word
 262 006a 5CF804AB 	    __next
 262      DAF80090 
 262      4847
 263              	__end_func forth_enter
 264              	
 265              	/* Returns control to C, returning r11 so we know where we stopped. */
 266              	__defnative "QUIT",,quit
 267 0074 5846     	    mov r0, r11
 268 0076 C546     	    mov sp, r8
 269 0078 BDE8FC5F 	    pop {r2-r12, lr}
 270 007c 7047     	    bx lr
 271 007e 5CF804AB 	__end_defnative quit
 271      DAF80090 
 271      4847
 272              	
 273              	/*
 274              	 * This is the "interpret" routine for non-native words.
 275              	 */
 276              	__new_func forth_do_colon
 277 0088 4DF804CD 	    push {r12} // r12 is the instruction coming next in the caller
 278 008c 1AF1040C 	    adds r12, r10, #4 // point to next instruction
 279 0090 5CF804AB 	    __next
 279      DAF80090 
 279      4847
 280              	__end_func forth_do_colon
 281              	
 282              	/* Returns control to the Forth caller. */
 283              	__defnative "EXIT",,exit
 284 009a 5DF804CB 	    pop {r12}
 285 009e 5CF804AB 	__end_defnative exit
 285      DAF80090 
 285      4847
 286              	
 287              	/* ( -- x ) */
 288              	__defnative "LIT",,literal
 289 00a8 5CF8040B 	    ldr r0, [r12], #4
 290 00ac 4BF8040B 	    __pushreg r0
 291 00b0 5CF804AB 	__end_defnative literal
 291      DAF80090 
 291      4847
 292              	
 293              	/* ( x -- ) */
 294              	__defnative "DROP",,drop
 295 00ba BBF1040B 	    subs r11, #4
 296 00be 5CF804AB 	__end_defnative drop
 296      DAF80090 
 296      4847
 297              	
 298              	/* ( x y -- ) */
 299              	__defnative "2DROP",,2drop
 300 00c8 BBF1080B 	    subs r11, #8
 301 00cc 5CF804AB 	__end_defnative 2drop
 301      DAF80090 
 301      4847
 302              	
 303              	/* ( x y -- y x ) */
 304              	__defnative "SWAP",,swap
 305 00d6 3BE90300 	    ldmdb r11!, {r0, r1} // r0,r1 <- x,y
 306 00da EBE80210 	    __pushreg2 r1, r0
 307 00de 5CF804AB 	__end_defnative swap
 307      DAF80090 
 307      4847
 308              	
 309              	/* ( a b c d -- c d a b ) */
 310              	__defnative "2SWAP",,2swap
 311 00e8 3BE90F00 	    ldmdb r11!, {r0, r1, r2, r3} // r0,r1,r2,r3 <- a,b,c,d
 312 00ec EBE80223 	    __pushreg2 r2, r3
 313 00f0 EBE80201 	    __pushreg2 r0, r1
 314 00f4 5CF804AB 	__end_defnative 2swap
 314      DAF80090 
 314      4847
 315              	
 316              	/* ( x -- x x ) */
 317              	__defnative "DUP",,dup
 318 00fe 5BF8040C 	    __peekreg r0
 319 0102 4BF8040B 	    __pushreg r0
 320 0106 5CF804AB 	__end_defnative dup
 320      DAF80090 
 320      4847
 321              	
 322              	/* ( x y -- x y x y ) */
 323              	__defnative "2DUP",,2dup
 324 0110 1BE90300 	    ldmdb r11, {r0, r1} // r0,r1 <- x,y
 325 0114 EBE80201 	    __pushreg2 r0, r1
 326 0118 5CF804AB 	__end_defnative 2dup
 326      DAF80090 
 326      4847
 327              	
 328              	/* ( x -- 0 | x x ) */
 329              	__defnative "?DUP",,maybe_dup
 330 0122 5BF8040C 	    __peekreg r0
 331 0126 08B1     	    cbz r0, skip_maybe_dup
 332 0128 4BF8040B 	    __pushreg r0
 333              	skip_maybe_dup:
 334 012c 5CF804AB 	__end_defnative maybe_dup
 334      DAF80090 
 334      4847
 335              	
 336              	/* ( x y -- x y x ) */
 337              	__defnative "OVER",,over
 338 0136 5BF8080C 	    ldr r0, [r11, #-8]
 339 013a 4BF8040B 	    __pushreg r0
 340 013e 5CF804AB 	__end_defnative over
 340      DAF80090 
 340      4847
 341              	
 342              	/* ( x y z -- y z x ) */
 343              	__defnative "ROT",,rot
 344 0148 3BE90700 	    ldmdb r11!, {r0, r1, r2} // r0,r1,r2 <- x,y,z
 345 014c EBE80212 	    __pushreg2 r1, r2
 346 0150 4BF8040B 	    __pushreg r0
 347 0154 5CF804AB 	__end_defnative rot
 347      DAF80090 
 347      4847
 348              	
 349              	/* ( x y z -- z x y ) */
 350              	__defnative "-ROT",,nrot
 351 015e 3BE90700 	    ldmdb r11!, {r0, r1, r2} // r0,r1,r2 <- x,y,z
 352 0162 EBE80220 	    __pushreg2 r2, r0
 353 0166 4BF8041B 	    __pushreg r1
 354 016a 5CF804AB 	__end_defnative nrot
 354      DAF80090 
 354      4847
 355              	
 356              	/* ( x -- x+1 ) */
 357              	__defnative "1+",,inc
 358 0174 5BF8040C 	    __peekreg r0
 359 0178 0130     	    adds r0, #1
 360 017a 4BF8040C 	    __putreg r0
 361 017e 5CF804AB 	__end_defnative inc
 361      DAF80090 
 361      4847
 362              	
 363              	/* ( x -- x-1 ) */
 364              	__defnative "1-",,dec
 365 0188 5BF8040C 	    __peekreg r0
 366 018c 0138     	    subs r0, #1
 367 018e 4BF8040C 	    __putreg r0
 368 0192 5CF804AB 	__end_defnative dec
 368      DAF80090 
 368      4847
 369              	
 370              	/* ( x -- x+4 ) */
 371              	__defnative "4+",,inc4
 372 019c 5BF8040C 	    __peekreg r0
 373 01a0 0430     	    adds r0, #4
 374 01a2 4BF8040C 	    __putreg r0
 375 01a6 5CF804AB 	__end_defnative inc4
 375      DAF80090 
 375      4847
 376              	
 377              	/* ( x -- x-4 ) */
 378              	__defnative "4-",,dec4
 379 01b0 5BF8040C 	    __peekreg r0
 380 01b4 0438     	    subs r0, #4
 381 01b6 4BF8040C 	    __putreg r0
 382 01ba 5CF804AB 	__end_defnative dec4
 382      DAF80090 
 382      4847
 383              	
 384              	/* ( x y -- x+y ) */
 385              	__defnative "+",,add
 386 01c4 3BE90300 	    ldmdb r11!, {r0, r1} // r0,r1 <- x,y
 387 01c8 0918     	    adds r1, r0
 388 01ca 4BF8041B 	    __pushreg r1
 389 01ce 5CF804AB 	__end_defnative add
 389      DAF80090 
 389      4847
 390              	
 391              	/* ( x y -- x-y ) */
 392              	__defnative "-",,sub
 393 01d8 3BE90300 	    ldmdb r11!, {r0, r1} // r0,r1 <- x,y
 394 01dc A0EB0100 	    sub r0, r1
 395 01e0 4BF8040B 	    __pushreg r0
 396 01e4 5CF804AB 	__end_defnative sub
 396      DAF80090 
 396      4847
 397              	
 398              	/* ( x y -- x*y ) */
 399              	__defnative "*",,mul
 400 01ee 3BE90300 	    ldmdb r11!, {r0, r1} // r0,r1 <- x,y
 401 01f2 00FB01F1 	    mul r1, r0
 402 01f6 4BF8041B 	    __pushreg r1
 403 01fa 5CF804AB 	__end_defnative mul
 403      DAF80090 
 403      4847
 404              	
 405              	/* ( x y -- x%y x/y ) */
 406              	__defnative "/MOD",,divmod
 407 0204 3BE90300 	    ldmdb r11!, {r0, r1} // r0,r1 <- x,y
 408 0208 90FBF1F2 	    sdiv r2, r0, r1  // q <- x/y
 409 020c 02FB1101 	    mls r1, r2, r1, r0 // r, q, y, x: r <- x - q*y
 410 0210 EBE80212 	    __pushreg2 r1, r2
 411 0214 5CF804AB 	__end_defnative divmod
 411      DAF80090 
 411      4847
 412              	
 413              	/* Signed division. */
 414              	/* ( x y -- x/y ) */
 415              	__defnative "/",,div
 416 021e 3BE90300 	    ldmdb r11!, {r0, r1} // r0,r1 <- x,y
 417 0222 90FBF1F0 	    sdiv r0, r1
 418 0226 4BF8040B 	    __pushreg r0
 419 022a 5CF804AB 	__end_defnative div
 419      DAF80090 
 419      4847
 420              	
 421              	/* ( x y -- 0 | 0xffffffff ) */
 422              	__defnative "=",,eq
 423 0234 3BE90300 	    ldmdb r11!, {r0, r1} // r0,r1 <- x,y
 424 0238 8842     	    cmp r0, r1
 425 023a 0CBF     	    ite eq
 426 023c 6FF00000 	    mvneq r0, #0
 427 0240 0020     	    movne r0, #0
 428 0242 4BF8040B 	    __pushreg r0
 429 0246 5CF804AB 	__end_defnative eq
 429      DAF80090 
 429      4847
 430              	
 431              	/* ( x y -- 0 | 0xffffffff ) */
 432              	__defnative "<>",,ne
 433 0250 3BE90300 	    ldmdb r11!, {r0, r1} // r0,r1 <- x,y
 434 0254 8842     	    cmp r0, r1
 435 0256 14BF     	    ite ne
 436 0258 6FF00000 	    mvnne r0, #0
 437 025c 0020     	    moveq r0, #0
 438 025e 4BF8040B 	    __pushreg r0
 439 0262 5CF804AB 	__end_defnative ne
 439      DAF80090 
 439      4847
 440              	
 441              	/* Signed comparison, x < y */
 442              	/* ( x y -- 0 | 0xffffffff ) */
 443              	__defnative "<",,lt
 444 026c 3BE90300 	    ldmdb r11!, {r0, r1} // r0,r1 <- x,y
 445 0270 8842     	    cmp r0, r1
 446 0272 B4BF     	    ite lt
 447 0274 6FF00000 	    mvnlt r0, #0
 448 0278 0020     	    movge r0, #0
 449 027a 4BF8040B 	    __pushreg r0
 450 027e 5CF804AB 	__end_defnative lt
 450      DAF80090 
 450      4847
 451              	
 452              	/* Signed comparison, x > y */
 453              	/* ( x y -- 0 | 0xffffffff ) */
 454              	__defnative ">",,gt
 455 0288 3BE90300 	    ldmdb r11!, {r0, r1} // r0,r1 <- x,y
 456 028c 8842     	    cmp r0, r1
 457 028e CCBF     	    ite gt
 458 0290 6FF00000 	    mvngt r0, #0
 459 0294 0020     	    movle r0, #0
 460 0296 4BF8040B 	    __pushreg r0
 461 029a 5CF804AB 	__end_defnative gt
 461      DAF80090 
 461      4847
 462              	
 463              	/* Signed comparison, x <= y */
 464              	/* ( x y -- 0 | 0xffffffff ) */
 465              	__defnative "<=",,le
 466 02a4 3BE90300 	    ldmdb r11!, {r0, r1} // r0,r1 <- x,y
 467 02a8 8842     	    cmp r0, r1
 468 02aa D4BF     	    ite le
 469 02ac 6FF00000 	    mvnle r0, #0
 470 02b0 0020     	    movgt r0, #0
 471 02b2 4BF8040B 	    __pushreg r0
 472 02b6 5CF804AB 	__end_defnative le
 472      DAF80090 
 472      4847
 473              	
 474              	/* Signed comparison, x >= y */
 475              	/* ( x y -- 0 | 0xffffffff ) */
 476              	__defnative ">=",,ge
 477 02c0 3BE90300 	    ldmdb r11!, {r0, r1} // r0,r1 <- x,y
 478 02c4 8842     	    cmp r0, r1
 479 02c6 ACBF     	    ite ge
 480 02c8 6FF00000 	    mvnge r0, #0
 481 02cc 0020     	    movlt r0, #0
 482 02ce 4BF8040B 	    __pushreg r0
 483 02d2 5CF804AB 	__end_defnative ge
 483      DAF80090 
 483      4847
 484              	
 485              	/* ( x -- 0 | 0xffffffff ) */
 486              	__defnative "0=",,eqz
 487 02dc 5BF8040C 	    __peekreg r0
 488 02e0 0028     	    cmp r0, #0
 489 02e2 0CBF     	    ite eq
 490 02e4 6FF00000 	    mvneq r0, #0
 491 02e8 0020     	    movne r0, #0
 492 02ea 4BF8040C 	    __putreg r0
 493 02ee 5CF804AB 	__end_defnative eqz
 493      DAF80090 
 493      4847
 494              	
 495              	/* ( x -- 0 | 0xffffffff ) */
 496              	__defnative "0<>",,nez
 497 02f8 5BF8040C 	    __peekreg r0
 498 02fc 18B1     	    cbz r0, skip_nez
 499 02fe 6FF00000 	    mvn r0, #0
 500 0302 4BF8040C 	    __putreg r0
 501              	skip_nez:
 502 0306 5CF804AB 	__end_defnative nez
 502      DAF80090 
 502      4847
 503              	
 504              	/* Signed comparison, x < 0 */
 505              	/* ( x -- 0 | 0xffffffff ) */
 506              	__defnative "0<",,ltz
 507 0310 5BF8040C 	    __peekreg r0
 508 0314 0028     	    cmp r0, #0
 509 0316 B4BF     	    ite lt
 510 0318 6FF00000 	    mvnlt r0, #0
 511 031c 0020     	    movge r0, #0
 512 031e 4BF8040C 	    __putreg r0
 513 0322 5CF804AB 	__end_defnative ltz
 513      DAF80090 
 513      4847
 514              	
 515              	/* Signed comparison, x > 0 */
 516              	/* ( x -- 0 | 0xffffffff ) */
 517              	__defnative "0>",,gtz
 518 032c 5BF8040C 	    __peekreg r0
 519 0330 0028     	    cmp r0, #0
 520 0332 CCBF     	    ite gt
 521 0334 6FF00000 	    mvngt r0, #0
 522 0338 0020     	    movle r0, #0
 523 033a 4BF8040C 	    __putreg r0
 524 033e 5CF804AB 	__end_defnative gtz
 524      DAF80090 
 524      4847
 525              	
 526              	/* Signed comparison, x <= 0 */
 527              	/* ( x -- 0 | 0xffffffff ) */
 528              	__defnative "0<=",,lez
 529 0348 5BF8040C 	    __peekreg r0
 530 034c 0028     	    cmp r0, #0
 531 034e D4BF     	    ite le
 532 0350 6FF00000 	    mvnle r0, #0
 533 0354 0020     	    movgt r0, #0
 534 0356 4BF8040C 	    __putreg r0
 535 035a 5CF804AB 	__end_defnative lez
 535      DAF80090 
 535      4847
 536              	
 537              	/* Signed comparison, x >= 0 */
 538              	/* ( x -- 0 | 0xffffffff ) */
 539              	__defnative "0>=",,gez
 540 0364 5BF8040C 	    __peekreg r0
 541 0368 0028     	    cmp r0, #0
 542 036a ACBF     	    ite ge
 543 036c 6FF00000 	    mvnge r0, #0
 544 0370 0020     	    movlt r0, #0
 545 0372 4BF8040C 	    __putreg r0
 546 0376 5CF804AB 	__end_defnative gez
 546      DAF80090 
 546      4847
 547              	
 548              	/* ( x y -- x&y ) */
 549              	__defnative "AND",,and
 550 0380 3BE90300 	    ldmdb r11!, {r0, r1} // r0,r1 <- x,y
 551 0384 0140     	    ands r1, r0
 552 0386 4BF8041B 	    __pushreg r1
 553 038a 5CF804AB 	__end_defnative and
 553      DAF80090 
 553      4847
 554              	
 555              	/* ( x y -- x|y ) */
 556              	__defnative "OR",,or
 557 0394 3BE90300 	    ldmdb r11!, {r0, r1} // r0,r1 <- x,y
 558 0398 0143     	    orrs r1, r0
 559 039a 4BF8041B 	    __pushreg r1
 560 039e 5CF804AB 	__end_defnative or
 560      DAF80090 
 560      4847
 561              	
 562              	/* ( x y -- x^y ) */
 563              	__defnative "XOR",,xor
 564 03a8 3BE90300 	    ldmdb r11!, {r0, r1} // r0,r1 <- x,y
 565 03ac 4140     	    eors r1, r0
 566 03ae 4BF8041B 	    __pushreg r1
 567 03b2 5CF804AB 	__end_defnative xor
 567      DAF80090 
 567      4847
 568              	
 569              	/* ( x -- ~x ) */
 570              	__defnative "INVERT",,not
 571 03bc 5BF8040C 	    __peekreg r0
 572 03c0 6FEA0000 	    mvn r0, r0
 573 03c4 4BF8040C 	    __putreg r0
 574 03c8 5CF804AB 	__end_defnative not
 574      DAF80090 
 574      4847
 575              	
 576              	/* ( x addr -- ) */
 577              	__defnative "!",,store
 578 03d2 3BE90300 	    ldmdb r11!, {r0, r1} // r0,r1 <- x,addr
 579 03d6 0860     	    str r0, [r1]
 580 03d8 5CF804AB 	__end_defnative store
 580      DAF80090 
 580      4847
 581              	
 582              	/* ( x addr -- ) */
 583              	__defnative "C!",,store_char
 584 03e2 3BE90300 	    ldmdb r11!, {r0, r1} // r0,r1 <- x,addr
 585 03e6 0870     	    strb r0, [r1]
 586 03e8 5CF804AB 	__end_defnative store_char
 586      DAF80090 
 586      4847
 587              	
 588              	/* ( addr -- x ) */
 589              	__defnative "\@",,fetch
 590 03f2 5BF8040C 	    __peekreg r0
 591 03f6 0068     	    ldr r0, [r0]
 592 03f8 4BF8040C 	    __putreg r0
 593 03fc 5CF804AB 	__end_defnative fetch
 593      DAF80090 
 593      4847
 594              	
 595              	/* ( addr -- x ) */
 596              	__defnative "C\@",,fetch_char
 597 0406 5BF8040C 	    __peekreg r0
 598 040a 0078     	    ldrb r0, [r0]
 599 040c 4BF8040C 	    __putreg r0
 600 0410 5CF804AB 	__end_defnative fetch_char
 600      DAF80090 
 600      4847
 601              	
 602              	/* ( x addr -- ) */
 603              	__defnative "+!",,addstore
 604 041a 3BE90300 	    ldmdb r11!, {r0, r1} // r0,r1 <- x,addr
 605 041e 0A68     	    ldr r2, [r1]
 606 0420 1218     	    adds r2, r0
 607 0422 0A60     	    str r2, [r1]
 608 0424 5CF804AB 	__end_defnative addstore
 608      DAF80090 
 608      4847
 609              	
 610              	/* ( x addr -- ) */
 611              	__defnative "-!",,substore
 612 042e 3BE90300 	    ldmdb r11!, {r0, r1} // r0,r1 <- x,addr
 613 0432 0A68     	    ldr r2, [r1]
 614 0434 121A     	    subs r2, r0
 615 0436 0A60     	    str r2, [r1]
 616 0438 5CF804AB 	__end_defnative substore
 616      DAF80090 
 616      4847
 617              	
 618              	/* Block move only for non-overlapping regions. If the blocks overlap, the result is undefined. */
 619              	/* ( src-addr dest-addr len -- ) */
 620              	/* Which is backwards from memcpy, which is dest, src, len. */
 621              	__defnative "MEMCOPY",,memcpy
 622 0442 4DF804CD 	    __begin_c_call
 623              	    // Want r0 = dest, r1 = src, r2 = len.
 624 0446 7BE90202 	    __popreg2 r2, r0
 625 044a 5BF8041D 	    __popreg r1
 626 044e FFF7FEFF 	    bl memcpy
 627 0452 5DF804CB 	    __end_c_call
 628 0456 5CF804AB 	__end_defnative memcpy
 628      DAF80090 
 628      4847
 629              	
 630              	/* Block move with overlapping regions allowed. */
 631              	/* ( src-addr dest-addr len -- ) */
 632              	__defnative "MEMMOVE",,memmove
 633              	    // Want r0 = dest, r1 = src, r2 = len.
 634 0460 7BE90202 	    __popreg2 r2, r0
 635 0464 5BF8041D 	    __popreg r1
 636 0468 002A     	    cmp r2, #0
 637 046a 06DB     	    blt end_memmove
 638              	loop_memmove:
 639 046c 2AB1     	    cbz r2, end_memmove
 640 046e 11F8013B 	    ldrb r3, [r1], #1
 641 0472 02F8013B 	    strb r3, [r2], #1
 642 0476 013A     	    subs r2, #1
 643 0478 F8E7     	    b loop_memmove
 644              	end_memmove:
 645 047a 5CF804AB 	__end_defnative memmove
 645      DAF80090 
 645      4847
 646              	
 647              	/* Pop param stack and push onto return stack */
 648              	/* ( addr -- ) */
 649              	__defnative ">R",,param_to_return
 650 0484 5BF8040D 	    __popreg r0
 651 0488 01B4     	    push {r0}
 652 048a 5CF804AB 	__end_defnative param_to_return
 652      DAF80090 
 652      4847
 653              	
 654              	/* Pop return stack and push onto param stack */
 655              	/* ( -- addr ) */
 656              	__defnative "R>",,return_to_param
 657 0494 01BC     	    pop {r0}
 658 0496 4BF8040B 	    __pushreg r0
 659 049a 5CF804AB 	__end_defnative return_to_param
 659      DAF80090 
 659      4847
 660              	
 661              	/* Fetch top of return stack, push onto param stack */
 662              	/* ( -- addr ) */
 663              	__defnative "R\@",,fetch_return
 664 04a4 0098     	    ldr r0, [sp]
 665 04a6 4BF8040B 	    __pushreg r0
 666 04aa 5CF804AB 	__end_defnative fetch_return
 666      DAF80090 
 666      4847
 667              	
 668              	/* Replace top of return stack with popped value from param stack */
 669              	/* ( addr -- ) */
 670              	__defnative "R!",,store_return
 671 04b4 5BF8040D 	    __popreg r0
 672 04b8 0090     	    str r0, [sp]
 673 04ba 5CF804AB 	__end_defnative store_return
 673      DAF80090 
 673      4847
 674              	
 675              	/* Waits for a byte from serial. */
 676              	/* ( -- k ) */
 677              	__defnative "KEY",,key
 678 04c4 4DF804CD 	    __begin_c_call
 679              	await_key:
 680 04c8 FFF7FEFF 	    bl usb_serial_getchar
 681 04cc 10F1010F 	    cmn r0, #1
 682 04d0 FAD0     	    beq await_key
 683 04d2 4BF8040B 	    __pushreg r0
 684 04d6 5DF804CB 	    __end_c_call
 685 04da 5CF804AB 	__end_defnative key
 685      DAF80090 
 685      4847
 686              	
 687              	/* Outputs a byte to serial. */
 688              	/* ( k -- ) */
 689              	__defnative "EMIT",,emit
 690 04e4 4DF804CD 	    __begin_c_call
 691 04e8 5BF8040D 	    __popreg r0
 692 04ec FFF7FEFF 	    bl usb_serial_putchar
 693 04f0 5DF804CB 	    __end_c_call
 694 04f4 5CF804AB 	__end_defnative emit
 694      DAF80090 
 694      4847
 695              	
 696              	/*
 697              	 * Waits for a "word" from serial. A word starts with any non-whitespace
 698              	 * character except backslash, and continues to any whitespace character.
 699              	 * Characters between backslash and newline (inclusive) are ignored.
 700              	 * The maximum size of a word if F_LENMASK. We accept characters after that,
 701              	 * but ignore them.
 702              	 */
 703              	/* ( -- buff-addr len ) */
 704              	    .section .data
 706              	    .align 2
 707              	    .global forth_word_buffer
 708              	forth_word_buffer:
 709 03dc 00000000 	    .space F_LENMASK
 709      00000000 
 709      00000000 
 709      00000000 
 709      00000000 
 711              	
 712 03fb 00C80300 	__defnative "WORD",,word
 712      00000000 
 712      0004574F 
 712      52440000 
 712      00000000 
 713 04fe 4DF804CD 	    __begin_c_call
 714 0502 1A4C     	    ldr r4, =forth_word_buffer
 715 0504 4BF8044B 	    __pushreg r4
 716 0508 0025     	    movs r5, #0
 717              	await_word:
 718 050a FFF7FEFF 	    bl usb_serial_getchar
 719 050e 10F1010F 	    cmn r0, #1
 720 0512 FAD0     	    beq await_word
 721 0514 2028     	    cmp r0, ' '
 722 0516 F8D0     	    beq await_word
 723 0518 0928     	    cmp r0, '\t'
 724 051a F6D0     	    beq await_word
 725 051c 0A28     	    cmp r0, '\n'
 726 051e F4D0     	    beq await_word
 727 0520 0D28     	    cmp r0, '\r'
 728 0522 F2D0     	    beq await_word
 729              	start_word:
 730 0524 5C28     	    cmp r0, '\\'
 731 0526 12D0     	    beq await_end_comment_word
 732 0528 1F2D     	    cmp r5, F_LENMASK // We ignore anything that would overflow the buffer
 733 052a 02D0     	    beq getchar_for_word
 734 052c 04F8010B 	    strb r0, [r4], #1
 735 0530 0135     	    adds r5, #1
 736              	getchar_for_word:
 737 0532 FFF7FEFF 	    bl usb_serial_getchar
 738 0536 10F1010F 	    cmn r0, #1
 739 053a FAD0     	    beq getchar_for_word
 740 053c 2028     	    cmp r0, ' '
 741 053e 0BD0     	    beq end_word
 742 0540 0928     	    cmp r0, '\t'
 743 0542 09D0     	    beq end_word
 744 0544 0A28     	    cmp r0, '\n'
 745 0546 07D0     	    beq end_word
 746 0548 0D28     	    cmp r0, '\r'
 747 054a 05D0     	    beq end_word
 748 054c EAE7     	    b start_word
 749              	await_end_comment_word:
 750 054e FFF7FEFF 	    bl usb_serial_getchar
 751 0552 0A28     	    cmp r0, '\n'
 752 0554 FBD1     	    bne await_end_comment_word
 753 0556 ECE7     	    b getchar_for_word
 754              	end_word:
 755 0558 4BF8045B 	    __pushreg r5
 756 055c 5DF804CB 	    __end_c_call
 757 0560 5CF804AB 	__end_defnative word
 757      DAF80090 
 757      48470000 
 757      00000000 
 758              	
 759              	/* ( buff-addr len -- number unconverted-char-count ) */
 760              	__defnative "NUMBER",,number
 761 0570 3BE90300 	    ldmdb r11!, {r0, r1} // r0,r1 <- buff_addr,len
 762 0574 0025     	    movs r5, #0 // r5 = sign: 0 = positive, nz = negative
 763 0576 0022     	    movs r2, #0 // r2 = number
 764 0578 164C2468 	    __loadvar "BASE", r4 // r4 = base
 765 057c 01B3     	    cbz r1, end_number
 766 057e 0378     	    ldrb r3, [r0]
 767 0580 2D2B     	    cmp r3, '-'  // first char '-'? skip over it and set flag
 768 0582 03D1     	    bne is_hex_number
 769 0584 0125     	    movs r5, #1
 770 0586 0130     	    adds r0, #1
 771 0588 0139     	    subs r1, #1
 772 058a 04E0     	    b next_number
 773              	is_hex_number:
 774 058c 242B     	    cmp r3, '$'  // first char '$'? skip over it and override base
 775 058e 02BF     	    ittt eq
 776 0590 1024     	    moveq r4, #16
 777 0592 0130     	    addeq r0, #1
 778 0594 0139     	    subeq r1, #1
 779              	next_number:
 780 0596 99B1     	    cbz r1, end_number
 781 0598 10F8013B 	    ldrb r3, [r0], #1 // r3 = character to convert
 782 059c 302B     	    cmp r3, '0'
 783 059e 0FD3     	    blo end_number
 784 05a0 392B     	    cmp r3, '9'
 785 05a2 01D8     	    bhi convert_az_number
 786 05a4 303B     	    subs r3, '0'
 787 05a6 05E0     	    b check_number
 788              	convert_az_number:
 789 05a8 612B     	    cmp r3, 'a'
 790 05aa 28BF     	    it hs
 791 05ac 203B     	    subhs r3, #0x20 // converts lower case to upper case
 792 05ae 412B     	    cmp r3, 'A'
 793 05b0 06D3     	    blo end_number
 794 05b2 373B     	    subs r3, 'A' - 10
 795              	check_number:
 796 05b4 A342     	    cmp r3, r4
 797 05b6 3EBF     	    ittt lo
 798 05b8 02FB0432 	    mlalo r2, r2, r4, r3 // num <- num * base + digit
 799 05bc 0139     	    sublo r1, #1
 800 05be EAE7     	    blo next_number
 801              	end_number:
 802 05c0 012D     	    cmp r5, #1
 803 05c2 08BF     	    it eq
 804 05c4 5242     	    rsbeq r2, #0
 805 05c6 EBE80221 	    __pushreg2 r2, r1
 806 05ca 5CF804AB 	__end_defnative number
 806      DAF80090 
 806      48470000 
 806      0000
 807              	
 808              	/*
 809              	 * Finds the given definition in the dictionary by word name,
 810              	 * returning its address (forth_name_<label>), or 0 if not found.
 811              	 * Note that if len > F_LENMASK, the results of this function are
 812              	 * undefined.
 813              	 *
 814              	 * The format of a definition is:
 815              	 *   forth_name_<label>:
 816              	 *     .4byte <pointer to next definition>
 817              	 *     .4byte <pointer to forth_<label>>
 818              	 *     .byte len+flags
 819              	 *     .ascii <name, with enough padding at end for alignment>
 820              	 *   forth_<label>:
 821              	 */
 822              	/* ( buff-addr len -- 0 | defn-addr ) */
 823              	__defnative "FIND",,find
 824 05d8 3BE90300 	    ldmdb r11!, {r0, r1} // r0,r1 <- buff-addr,len
 825 05dc 0F4A1268 	    __loadvar "LATEST", r2 // r2 <- current definition address
 826              	check_current_find:
 827 05e0 AAB1     	    cbz r2, end_find
 828 05e2 1368     	    ldr r3, [r2] // r3 <- next definition address
 829 05e4 147A     	    ldrb r4, [r2, #8] // r4 <- definition name length + flags
 830 05e6 14F03F04 	    ands r4, F_HIDDEN | F_LENMASK
 831 05ea 8C42     	    cmp r4, r1 // skip hidden entries and entries not matching the string length
 832 05ec 1CBF     	    itt ne
 833 05ee 1A46     	    movne r2, r3
 834 05f0 F6E7     	    bne check_current_find
 835 05f2 0546     	    mov r5, r0 // r5 <- ptr to buffer
 836 05f4 12F10906 	    adds r6, r2, #9 // r6 <- ptr to name
 837              	check_name_find:
 838 05f8 15F8017B 	    ldrb r7, [r5], #1
 839 05fc 16F8019B 	    ldrb r9, [r6], #1
 840 0600 4F45     	    cmp r7, r9
 841 0602 1CBF     	    itt ne
 842 0604 1A46     	    movne r2, r3
 843 0606 EBE7     	    bne check_current_find
 844 0608 013C     	    subs r4, #1
 845 060a 04B1     	    cbz r4, end_find
 846 060c F4E7     	    b check_name_find
 847              	end_find:
 848 060e 4BF8042B 	    __pushreg r2
 849 0612 5CF804AB 	__end_defnative find
 849      DAF80090 
 849      48470000 
 849      0000
 850              	
 851              	/* ( defn-addr -- code-addr ) */
 852              	__defnative ">CFA",,to_code_field_addr
 853 0620 5BF8040C 	    __peekreg r0
 854 0624 4068     	    ldr r0, [r0, #4]
 855 0626 4BF8040C 	    __putreg r0
 856 062a 5CF804AB 	__end_defnative to_code_field_addr
 856      DAF80090 
 856      4847
 857              	
 858              	/*
 859              	 * Returns the data field address for a definition. For a
 860              	 * native definition, this is the beginning of the native
 861              	 * routine. For a non-native definition, this is the word
 862              	 * immediately after the do_colon word.
 863              	 */
 864              	/* ( defn-addr -- data-addr ) */
 865              	__defnative ">DFA",,to_data_field_addr
 866 0634 5BF8040C 	    __peekreg r0
 867 0638 4068     	    ldr r0, [r0, #4]
 868 063a 0430     	    adds r0, #4
 869 063c 4BF8040C 	    __putreg r0
 870 0640 5CF804AB 	__end_defnative to_data_field_addr
 870      DAF80090 
 870      4847
 871              	
 872              	/*
 873              	 * Creates the header for a definition and places it at
 874              	 * HERE, updating HERE and LATEST. The header is the link
 875              	 * to the next definition, and the name (and name length).
 876              	 * the flags are always zero.
 877              	 */
 878              	/* ( buff-addr len -- ) */
 879              	__defnative "CREATE",,create
 880 064a 3BE90300 	    ldmdb r11!, {r0, r1} // r0,r1 <- buff-addr,len
 881 064e 134A1268 	    __loadvar "HERE", r2 // r2 <- HERE
 882 0652 134B1B68 	    __loadvar "LATEST", r3 // r3 <- LATEST
 883 0656 124C2260 	    __storevar r2, "LATEST", r4 // update LATEST to HERE
 884 065a 42F8083B 	    str r3, [r2], #8 // Write link. Skip over the pointer to code for now
 885 065e 02F8011B 	    strb r1, [r2], #1 // writes the len byte
 886 0662 11F00304 	    ands r4, r1, #3 // r4 = amount of padding required at end.
 887              	    // Because of the len byte, the amount of padding to get to
 888              	    // 4-byte alignment based on the last 2 bits of the length are:
 889              	    // 0: 3 bytes
 890              	    // 1: 2 bytes
 891              	    // 2: 1 byte
 892              	    // 3: 0 bytes
 893 0666 C4F10304 	    rsb r4, #3 // so r4 = 3-(len&3)
 894              	copy_name_create:
 895 066a 29B1     	    cbz r1, pad_name_create
 896 066c 10F8015B 	    ldrb r5, [r0], #1
 897 0670 02F8015B 	    strb r5, [r2], #1
 898 0674 0139     	    subs r1, #1
 899 0676 F8E7     	    b copy_name_create
 900              	pad_name_create:
 901 0678 94F0000F 	    teq r4, #0
 902 067c 1EBF     	    ittt ne
 903 067e 02F8011B 	    strbne r1, [r2], #1 // r1 was zero!
 904 0682 013C     	    subne r4, #1
 905 0684 F8E7     	    bne pad_name_create
 906 0686 06480068 	    __loadvar "LATEST", r0 // r0 <- beginning of the header
 907 068a 4260     	    str r2, [r0, #4] // now we can write the code address
 908 068c 03480260 	    __storevar r2, "HERE", r0 // and update HERE
 909 0690 5CF804AB 	__end_defnative create
 909      DAF80090 
 909      48470000 
 909      00000000 
 909      00000000 
 910              	
 911              	/*
 912              	 * Stores a value into HERE, and increments HERE by 4. The
 913              	 * implication is that HERE has special semantics: it points to
 914              	 * available memory, but the content of that memory is undefined.
 915              	 * Thus, it makes sense that once we write to the memory at
 916              	 * HERE, we should increment HERE to point to the next available
 917              	 * location.
 918              	 */
 919              	/* ( x -- ) */
 920              	__defnative "HERE!",,store_to_here
 921 06a4 5BF8040D 	    __popreg r0
 922 06a8 0449     	    ldr r1, =forth_var_HERE
 923 06aa 0A68     	    ldr r2, [r1] // r2 <- HERE
 924 06ac 42F8040B 	    str r0, [r2], #4
 925 06b0 0A60     	    str r2, [r1] // update HERE
 926 06b2 5CF804AB 	__end_defnative store_to_here
 926      DAF80090 
 926      48470000 
 926      0000
 927              	
 928              	/* Switch to immediate mode, immediately. */
 929              	__defnative "[",F_IMMED,immediate_mode
 930 06c0 0020     	    movs r0, #0
 931 06c2 03490860 	    __storevar r0, "STATE", r1
 932 06c6 5CF804AB 	__end_defnative immediate_mode
 932      DAF80090 
 932      48470000 
 932      0000
 933              	
 934              	/* Switch to compile mode. */
 935              	__defnative "]",,compile_mode
 936 06d4 0120     	    movs r0, #1
 937 06d6 03490860 	    __storevar r0, "STATE", r1
 938 06da 5CF804AB 	__end_defnative compile_mode
 938      DAF80090 
 938      48470000 
 938      0000
 939              	
 940              	/* ( defn-addr -- ) */
 941              	__defnative "TOGGLE_HIDDEN",,toggle_hidden
 942 06e8 5BF8040D 	    __popreg r0
 943 06ec 10F8081F 	    ldrb r1, [r0, #8]!
 944 06f0 91F02001 	    eors r1, F_HIDDEN
 945 06f4 0170     	    strb r1, [r0]
 946 06f6 5CF804AB 	__end_defnative toggle_hidden
 946      DAF80090 
 946      4847
 947              	
 948              	__defnative "TOGGLE_IMMEDIATE",,toggle_immediate
 949 0700 05480068 	    __loadvar "LATEST", r0
 950 0704 10F8081F 	    ldrb r1, [r0, #8]!
 951 0708 91F08001 	    eors r1, F_IMMED
 952 070c 0170     	    strb r1, [r0]
 953 070e 5CF804AB 	__end_defnative toggle_immediate
 953      DAF80090 
 953      48470000 
 953      0000
 954              	
 955              	/*
 956              	 * Add the offset in the next word to the instruction pointer
 957              	 * of the caller, so that when this word returns, the caller
 958              	 * is executing there.
 959              	 */
 960              	__defnative "BRANCH",,branch
 961 071c 01BC     	    pop {r0}
 962 071e 50F8041B 	    ldr r1, [r0], #4 // r1 <- offset, ptr += 4
 963 0722 4FEA8101 	    lsl r1, #2 // r1 *= 4
 964 0726 0918     	    adds r1, r0 // so offset zero just goes to next word
 965 0728 02B4     	    push {r1}
 966 072a 5CF804AB 	__end_defnative branch
 966      DAF80090 
 966      4847
 967              	
 968              	/*
 969              	 * If the parameter on the stack is zero, add the offset in the
 970              	 * next word to the instruction pointer of the caller, so that
 971              	 * when this word returns, the caller is executing there.
 972              	 * Otherwise, do nothing.
 973              	 */
 974              	/* ( x -- ) */
 975              	__defnative "0BRANCH",,brancheq
 976 0734 5BF8042D 	    __popreg r2
 977 0738 01BC     	    pop {r0}
 978 073a 50F8041B 	    ldr r1, [r0], #4 // r1 <- offset, ptr += 4
 979 073e 92F0000F 	    teq r2, #0
 980 0742 04BF     	    itt eq  // add offset only if parameter was zero
 981 0744 8900     	    lsleq r1, #2 // r1 *= 4
 982 0746 0918     	    addeq r1, r0 // so offset zero just goes to next word
 983 0748 02B4     	    push {r1}
 984 074a 5CF804AB 	__end_defnative brancheq
 984      DAF80090 
 984      4847
 985              	
 986              	/* Compile a definition. */
 987              	__defword ":",,compile
 988 051c 00000000 	    __word word
 989 0520 00000000 	    __word create
 990 0524 00000000 	    __word literal
 991 0528 00000000 	    __word do_colon
 992 052c 00000000 	    __word store_to_here
 993 0530 00000000 	    __word latest
 994 0534 00000000 	    __word fetch
 995 0538 00000000 	    __word toggle_hidden
 996 053c 00000000 	    __word compile_mode
 997 0540 00000000 	__end_defword compile
 998              	
 999              	/* End compilation of a definition. */
 1000 0544 0C050000 	__defword ";",F_IMMED,end_compile
 1000      00000000 
 1000      813B0000 
 1000      00000000 
 1001 0554 00000000 	    __word literal
 1002 0558 00000000 	    __word exit
 1003 055c 00000000 	    __word store_to_here
 1004 0560 00000000 	    __word latest
 1005 0564 00000000 	    __word fetch
 1006 0568 00000000 	    __word toggle_hidden
 1007 056c 00000000 	    __word immediate_mode
 1008 0570 00000000 	__end_defword end_compile
 1009              	
 1010              	/* Toggle hidden on the next word. */
 1011 0574 44050000 	__defword "HIDE",,hide
 1011      00000000 
 1011      04484944 
 1011      45000000 
 1011      00000000 
 1012 0588 00000000 	    __word word
 1013 058c 00000000 	    __word find
 1014 0590 00000000 	    __word toggle_hidden
 1015 0594 00000000 	__end_defword hide
 1016              	
 1017              	/* Gets the code field address of the next word. */
 1018              	/* ( -- code-addr ) */
 1019 0598 74050000 	__defword "'",,code_field_addr_of_next_word
 1019      00000000 
 1019      01270000 
 1019      00000000 
 1020 05a8 00000000 	    __word word
 1021 05ac 00000000 	    __word find
 1022 05b0 00000000 	    __word to_code_field_addr
 1023 05b4 00000000 	__end_defword code_field_addr_of_next_word
 1024              	
 1025 05b8 98050000 	__defword "TESTING",,testing
 1025      00000000 
 1025      07544553 
 1025      54494E47 
 1025      00000000 
 1026 05cc 00000000 	    __word word
 1027 05d0 00000000 	    __word number
 1028 05d4 00000000 	    __word quit
 1029 05d8 00000000 	__end_defword testing
DEFINED SYMBOLS
../src/forth_system.S:43     *ABS*:00000080 F_IMMED
../src/forth_system.S:44     *ABS*:00000040 F_UNUSED
../src/forth_system.S:45     *ABS*:00000020 F_HIDDEN
../src/forth_system.S:46     *ABS*:0000001f F_LENMASK
../src/forth_system.S:1025   .data:000005b8 link
../src/forth_system.S:240    .data:00000000 forth_name_base
                            .data:00000000 $d
../src/forth_system.S:240    .data:00000010 forth_base
../src/forth_system.S:240    .data:0000000d forth_end_name_base
../src/forth_system.S:240    .text:00000000 forth_code_base
../src/forth_system.S:240    .data:00000014 forth_var_BASE
../src/forth_system.S:240    .text:00000000 $t
../src/forth_system.S:240    .text:00000012 $d
../src/forth_system.S:240    .text:00000014 $d
../src/forth_system.S:242    .data:00000018 forth_name_latest
../src/forth_system.S:242    .data:00000028 forth_latest
../src/forth_system.S:242    .data:00000027 forth_end_name_latest
../src/forth_system.S:240    .text:00000018 forth_code_latest
../src/forth_system.S:242    .data:0000002c forth_var_LATEST
../src/forth_system.S:240    .text:00000018 $t
../src/forth_system.S:242    .text:0000002a $d
../src/forth_system.S:242    .text:0000002c $d
../src/forth_system.S:1025   .data:000005b8 forth_name_testing
../src/forth_system.S:243    .data:00000030 forth_name_here
../src/forth_system.S:243    .data:00000040 forth_here
../src/forth_system.S:243    .data:0000003d forth_end_name_here
../src/forth_system.S:242    .text:00000030 forth_code_here
../src/forth_system.S:243    .data:00000044 forth_var_HERE
../src/forth_system.S:242    .text:00000030 $t
../src/forth_system.S:243    .text:00000042 $d
../src/forth_system.S:243    .text:00000044 $d
../src/forth_system.S:244    .data:00000048 forth_name_state
../src/forth_system.S:244    .data:00000058 forth_state
../src/forth_system.S:244    .data:00000056 forth_end_name_state
../src/forth_system.S:243    .text:00000048 forth_code_state
../src/forth_system.S:244    .data:0000005c forth_var_STATE
../src/forth_system.S:243    .text:00000048 $t
../src/forth_system.S:244    .text:0000005a $d
../src/forth_system.S:244    .text:0000005c $d
../src/forth_system.S:256    .text:00000060 forth_enter
../src/forth_system.S:244    .text:00000060 $t
../src/forth_system.S:266    .data:00000060 forth_name_quit
../src/forth_system.S:266    .data:00000070 forth_quit
../src/forth_system.S:266    .data:0000006d forth_end_name_quit
../src/forth_system.S:266    .text:00000074 forth_code_quit
../src/forth_system.S:276    .text:00000088 forth_do_colon
../src/forth_system.S:283    .data:00000074 forth_name_exit
../src/forth_system.S:283    .data:00000084 forth_exit
../src/forth_system.S:283    .data:00000081 forth_end_name_exit
../src/forth_system.S:283    .text:0000009a forth_code_exit
../src/forth_system.S:288    .data:00000088 forth_name_literal
../src/forth_system.S:288    .data:00000094 forth_literal
../src/forth_system.S:288    .data:00000094 forth_end_name_literal
../src/forth_system.S:288    .text:000000a8 forth_code_literal
../src/forth_system.S:294    .data:00000098 forth_name_drop
../src/forth_system.S:294    .data:000000a8 forth_drop
../src/forth_system.S:294    .data:000000a5 forth_end_name_drop
../src/forth_system.S:294    .text:000000ba forth_code_drop
../src/forth_system.S:299    .data:000000ac forth_name_2drop
../src/forth_system.S:299    .data:000000bc forth_2drop
../src/forth_system.S:299    .data:000000ba forth_end_name_2drop
../src/forth_system.S:299    .text:000000c8 forth_code_2drop
../src/forth_system.S:304    .data:000000c0 forth_name_swap
../src/forth_system.S:304    .data:000000d0 forth_swap
../src/forth_system.S:304    .data:000000cd forth_end_name_swap
../src/forth_system.S:304    .text:000000d6 forth_code_swap
../src/forth_system.S:310    .data:000000d4 forth_name_2swap
../src/forth_system.S:310    .data:000000e4 forth_2swap
../src/forth_system.S:310    .data:000000e2 forth_end_name_2swap
../src/forth_system.S:310    .text:000000e8 forth_code_2swap
../src/forth_system.S:317    .data:000000e8 forth_name_dup
../src/forth_system.S:317    .data:000000f4 forth_dup
../src/forth_system.S:317    .data:000000f4 forth_end_name_dup
../src/forth_system.S:317    .text:000000fe forth_code_dup
../src/forth_system.S:323    .data:000000f8 forth_name_2dup
../src/forth_system.S:323    .data:00000108 forth_2dup
../src/forth_system.S:323    .data:00000105 forth_end_name_2dup
../src/forth_system.S:323    .text:00000110 forth_code_2dup
../src/forth_system.S:329    .data:0000010c forth_name_maybe_dup
../src/forth_system.S:329    .data:0000011c forth_maybe_dup
../src/forth_system.S:329    .data:00000119 forth_end_name_maybe_dup
../src/forth_system.S:329    .text:00000122 forth_code_maybe_dup
../src/forth_system.S:333    .text:0000012c skip_maybe_dup
../src/forth_system.S:337    .data:00000120 forth_name_over
../src/forth_system.S:337    .data:00000130 forth_over
../src/forth_system.S:337    .data:0000012d forth_end_name_over
../src/forth_system.S:337    .text:00000136 forth_code_over
../src/forth_system.S:343    .data:00000134 forth_name_rot
../src/forth_system.S:343    .data:00000140 forth_rot
../src/forth_system.S:343    .data:00000140 forth_end_name_rot
../src/forth_system.S:343    .text:00000148 forth_code_rot
../src/forth_system.S:350    .data:00000144 forth_name_nrot
../src/forth_system.S:350    .data:00000154 forth_nrot
../src/forth_system.S:350    .data:00000151 forth_end_name_nrot
../src/forth_system.S:350    .text:0000015e forth_code_nrot
../src/forth_system.S:357    .data:00000158 forth_name_inc
../src/forth_system.S:357    .data:00000164 forth_inc
../src/forth_system.S:357    .data:00000163 forth_end_name_inc
../src/forth_system.S:357    .text:00000174 forth_code_inc
../src/forth_system.S:364    .data:00000168 forth_name_dec
../src/forth_system.S:364    .data:00000174 forth_dec
../src/forth_system.S:364    .data:00000173 forth_end_name_dec
../src/forth_system.S:364    .text:00000188 forth_code_dec
../src/forth_system.S:371    .data:00000178 forth_name_inc4
../src/forth_system.S:371    .data:00000184 forth_inc4
../src/forth_system.S:371    .data:00000183 forth_end_name_inc4
../src/forth_system.S:371    .text:0000019c forth_code_inc4
../src/forth_system.S:378    .data:00000188 forth_name_dec4
../src/forth_system.S:378    .data:00000194 forth_dec4
../src/forth_system.S:378    .data:00000193 forth_end_name_dec4
../src/forth_system.S:378    .text:000001b0 forth_code_dec4
../src/forth_system.S:385    .data:00000198 forth_name_add
../src/forth_system.S:385    .data:000001a4 forth_add
../src/forth_system.S:385    .data:000001a2 forth_end_name_add
../src/forth_system.S:385    .text:000001c4 forth_code_add
../src/forth_system.S:392    .data:000001a8 forth_name_sub
../src/forth_system.S:392    .data:000001b4 forth_sub
../src/forth_system.S:392    .data:000001b2 forth_end_name_sub
../src/forth_system.S:392    .text:000001d8 forth_code_sub
../src/forth_system.S:399    .data:000001b8 forth_name_mul
../src/forth_system.S:399    .data:000001c4 forth_mul
../src/forth_system.S:399    .data:000001c2 forth_end_name_mul
../src/forth_system.S:399    .text:000001ee forth_code_mul
../src/forth_system.S:406    .data:000001c8 forth_name_divmod
../src/forth_system.S:406    .data:000001d8 forth_divmod
../src/forth_system.S:406    .data:000001d5 forth_end_name_divmod
../src/forth_system.S:406    .text:00000204 forth_code_divmod
../src/forth_system.S:415    .data:000001dc forth_name_div
../src/forth_system.S:415    .data:000001e8 forth_div
../src/forth_system.S:415    .data:000001e6 forth_end_name_div
../src/forth_system.S:415    .text:0000021e forth_code_div
../src/forth_system.S:422    .data:000001ec forth_name_eq
../src/forth_system.S:422    .data:000001f8 forth_eq
../src/forth_system.S:422    .data:000001f6 forth_end_name_eq
../src/forth_system.S:422    .text:00000234 forth_code_eq
../src/forth_system.S:432    .data:000001fc forth_name_ne
../src/forth_system.S:432    .data:00000208 forth_ne
../src/forth_system.S:432    .data:00000207 forth_end_name_ne
../src/forth_system.S:432    .text:00000250 forth_code_ne
../src/forth_system.S:443    .data:0000020c forth_name_lt
../src/forth_system.S:443    .data:00000218 forth_lt
../src/forth_system.S:443    .data:00000216 forth_end_name_lt
../src/forth_system.S:443    .text:0000026c forth_code_lt
../src/forth_system.S:454    .data:0000021c forth_name_gt
../src/forth_system.S:454    .data:00000228 forth_gt
../src/forth_system.S:454    .data:00000226 forth_end_name_gt
../src/forth_system.S:454    .text:00000288 forth_code_gt
../src/forth_system.S:465    .data:0000022c forth_name_le
../src/forth_system.S:465    .data:00000238 forth_le
../src/forth_system.S:465    .data:00000237 forth_end_name_le
../src/forth_system.S:465    .text:000002a4 forth_code_le
../src/forth_system.S:476    .data:0000023c forth_name_ge
../src/forth_system.S:476    .data:00000248 forth_ge
../src/forth_system.S:476    .data:00000247 forth_end_name_ge
../src/forth_system.S:476    .text:000002c0 forth_code_ge
../src/forth_system.S:486    .data:0000024c forth_name_eqz
../src/forth_system.S:486    .data:00000258 forth_eqz
../src/forth_system.S:486    .data:00000257 forth_end_name_eqz
../src/forth_system.S:486    .text:000002dc forth_code_eqz
../src/forth_system.S:496    .data:0000025c forth_name_nez
../src/forth_system.S:496    .data:00000268 forth_nez
../src/forth_system.S:496    .data:00000268 forth_end_name_nez
../src/forth_system.S:496    .text:000002f8 forth_code_nez
../src/forth_system.S:501    .text:00000306 skip_nez
../src/forth_system.S:506    .data:0000026c forth_name_ltz
../src/forth_system.S:506    .data:00000278 forth_ltz
../src/forth_system.S:506    .data:00000277 forth_end_name_ltz
../src/forth_system.S:506    .text:00000310 forth_code_ltz
../src/forth_system.S:517    .data:0000027c forth_name_gtz
../src/forth_system.S:517    .data:00000288 forth_gtz
../src/forth_system.S:517    .data:00000287 forth_end_name_gtz
../src/forth_system.S:517    .text:0000032c forth_code_gtz
../src/forth_system.S:528    .data:0000028c forth_name_lez
../src/forth_system.S:528    .data:00000298 forth_lez
../src/forth_system.S:528    .data:00000298 forth_end_name_lez
../src/forth_system.S:528    .text:00000348 forth_code_lez
../src/forth_system.S:539    .data:0000029c forth_name_gez
../src/forth_system.S:539    .data:000002a8 forth_gez
../src/forth_system.S:539    .data:000002a8 forth_end_name_gez
../src/forth_system.S:539    .text:00000364 forth_code_gez
../src/forth_system.S:549    .data:000002ac forth_name_and
../src/forth_system.S:549    .data:000002b8 forth_and
../src/forth_system.S:549    .data:000002b8 forth_end_name_and
../src/forth_system.S:549    .text:00000380 forth_code_and
../src/forth_system.S:556    .data:000002bc forth_name_or
../src/forth_system.S:556    .data:000002c8 forth_or
../src/forth_system.S:556    .data:000002c7 forth_end_name_or
../src/forth_system.S:556    .text:00000394 forth_code_or
../src/forth_system.S:563    .data:000002cc forth_name_xor
../src/forth_system.S:563    .data:000002d8 forth_xor
../src/forth_system.S:563    .data:000002d8 forth_end_name_xor
../src/forth_system.S:563    .text:000003a8 forth_code_xor
../src/forth_system.S:570    .data:000002dc forth_name_not
../src/forth_system.S:570    .data:000002ec forth_not
../src/forth_system.S:570    .data:000002eb forth_end_name_not
../src/forth_system.S:570    .text:000003bc forth_code_not
../src/forth_system.S:577    .data:000002f0 forth_name_store
../src/forth_system.S:577    .data:000002fc forth_store
../src/forth_system.S:577    .data:000002fa forth_end_name_store
../src/forth_system.S:577    .text:000003d2 forth_code_store
../src/forth_system.S:583    .data:00000300 forth_name_store_char
../src/forth_system.S:583    .data:0000030c forth_store_char
../src/forth_system.S:583    .data:0000030b forth_end_name_store_char
../src/forth_system.S:583    .text:000003e2 forth_code_store_char
../src/forth_system.S:589    .data:00000310 forth_name_fetch
../src/forth_system.S:589    .data:0000031c forth_fetch
../src/forth_system.S:589    .data:0000031a forth_end_name_fetch
../src/forth_system.S:589    .text:000003f2 forth_code_fetch
../src/forth_system.S:596    .data:00000320 forth_name_fetch_char
../src/forth_system.S:596    .data:0000032c forth_fetch_char
../src/forth_system.S:596    .data:0000032b forth_end_name_fetch_char
../src/forth_system.S:596    .text:00000406 forth_code_fetch_char
../src/forth_system.S:603    .data:00000330 forth_name_addstore
../src/forth_system.S:603    .data:0000033c forth_addstore
../src/forth_system.S:603    .data:0000033b forth_end_name_addstore
../src/forth_system.S:603    .text:0000041a forth_code_addstore
../src/forth_system.S:611    .data:00000340 forth_name_substore
../src/forth_system.S:611    .data:0000034c forth_substore
../src/forth_system.S:611    .data:0000034b forth_end_name_substore
../src/forth_system.S:611    .text:0000042e forth_code_substore
../src/forth_system.S:621    .data:00000350 forth_name_memcpy
../src/forth_system.S:621    .data:00000360 forth_memcpy
../src/forth_system.S:621    .data:00000360 forth_end_name_memcpy
../src/forth_system.S:621    .text:00000442 forth_code_memcpy
../src/forth_system.S:632    .data:00000364 forth_name_memmove
../src/forth_system.S:632    .data:00000374 forth_memmove
../src/forth_system.S:632    .data:00000374 forth_end_name_memmove
../src/forth_system.S:632    .text:00000460 forth_code_memmove
../src/forth_system.S:644    .text:0000047a end_memmove
../src/forth_system.S:638    .text:0000046c loop_memmove
../src/forth_system.S:649    .data:00000378 forth_name_param_to_return
../src/forth_system.S:649    .data:00000384 forth_param_to_return
../src/forth_system.S:649    .data:00000383 forth_end_name_param_to_return
../src/forth_system.S:649    .text:00000484 forth_code_param_to_return
../src/forth_system.S:656    .data:00000388 forth_name_return_to_param
../src/forth_system.S:656    .data:00000394 forth_return_to_param
../src/forth_system.S:656    .data:00000393 forth_end_name_return_to_param
../src/forth_system.S:656    .text:00000494 forth_code_return_to_param
../src/forth_system.S:663    .data:00000398 forth_name_fetch_return
../src/forth_system.S:663    .data:000003a4 forth_fetch_return
../src/forth_system.S:663    .data:000003a3 forth_end_name_fetch_return
../src/forth_system.S:663    .text:000004a4 forth_code_fetch_return
../src/forth_system.S:670    .data:000003a8 forth_name_store_return
../src/forth_system.S:670    .data:000003b4 forth_store_return
../src/forth_system.S:670    .data:000003b3 forth_end_name_store_return
../src/forth_system.S:670    .text:000004b4 forth_code_store_return
../src/forth_system.S:677    .data:000003b8 forth_name_key
../src/forth_system.S:677    .data:000003c4 forth_key
../src/forth_system.S:677    .data:000003c4 forth_end_name_key
../src/forth_system.S:677    .text:000004c4 forth_code_key
../src/forth_system.S:679    .text:000004c8 await_key
../src/forth_system.S:689    .data:000003c8 forth_name_emit
../src/forth_system.S:689    .data:000003d8 forth_emit
../src/forth_system.S:689    .data:000003d5 forth_end_name_emit
../src/forth_system.S:689    .text:000004e4 forth_code_emit
../src/forth_system.S:708    .data:000003dc forth_word_buffer
../src/forth_system.S:712    .data:000003fc forth_name_word
../src/forth_system.S:712    .data:0000040c forth_word
../src/forth_system.S:712    .data:00000409 forth_end_name_word
../src/forth_system.S:704    .text:000004fe forth_code_word
../src/forth_system.S:717    .text:0000050a await_word
../src/forth_system.S:729    .text:00000524 start_word
../src/forth_system.S:749    .text:0000054e await_end_comment_word
../src/forth_system.S:736    .text:00000532 getchar_for_word
../src/forth_system.S:754    .text:00000558 end_word
../src/forth_system.S:757    .text:0000056a $d
../src/forth_system.S:757    .text:0000056c $d
../src/forth_system.S:760    .data:00000410 forth_name_number
../src/forth_system.S:760    .data:00000420 forth_number
../src/forth_system.S:760    .data:0000041f forth_end_name_number
../src/forth_system.S:760    .text:00000570 forth_code_number
../src/forth_system.S:761    .text:00000570 $t
../src/forth_system.S:801    .text:000005c0 end_number
../src/forth_system.S:773    .text:0000058c is_hex_number
../src/forth_system.S:779    .text:00000596 next_number
../src/forth_system.S:788    .text:000005a8 convert_az_number
../src/forth_system.S:795    .text:000005b4 check_number
../src/forth_system.S:806    .text:000005d4 $d
../src/forth_system.S:823    .data:00000424 forth_name_find
../src/forth_system.S:823    .data:00000434 forth_find
../src/forth_system.S:823    .data:00000431 forth_end_name_find
../src/forth_system.S:823    .text:000005d8 forth_code_find
../src/forth_system.S:824    .text:000005d8 $t
../src/forth_system.S:826    .text:000005e0 check_current_find
../src/forth_system.S:847    .text:0000060e end_find
../src/forth_system.S:837    .text:000005f8 check_name_find
../src/forth_system.S:849    .text:0000061c $d
../src/forth_system.S:852    .data:00000438 forth_name_to_code_field_addr
../src/forth_system.S:852    .data:00000448 forth_to_code_field_addr
../src/forth_system.S:852    .data:00000445 forth_end_name_to_code_field_addr
../src/forth_system.S:852    .text:00000620 forth_code_to_code_field_addr
../src/forth_system.S:853    .text:00000620 $t
../src/forth_system.S:865    .data:0000044c forth_name_to_data_field_addr
../src/forth_system.S:865    .data:0000045c forth_to_data_field_addr
../src/forth_system.S:865    .data:00000459 forth_end_name_to_data_field_addr
../src/forth_system.S:865    .text:00000634 forth_code_to_data_field_addr
../src/forth_system.S:879    .data:00000460 forth_name_create
../src/forth_system.S:879    .data:00000470 forth_create
../src/forth_system.S:879    .data:0000046f forth_end_name_create
../src/forth_system.S:879    .text:0000064a forth_code_create
../src/forth_system.S:894    .text:0000066a copy_name_create
../src/forth_system.S:900    .text:00000678 pad_name_create
../src/forth_system.S:909    .text:0000069a $d
../src/forth_system.S:909    .text:0000069c $d
../src/forth_system.S:920    .data:00000474 forth_name_store_to_here
../src/forth_system.S:920    .data:00000484 forth_store_to_here
../src/forth_system.S:920    .data:00000482 forth_end_name_store_to_here
../src/forth_system.S:920    .text:000006a4 forth_code_store_to_here
../src/forth_system.S:921    .text:000006a4 $t
../src/forth_system.S:926    .text:000006bc $d
../src/forth_system.S:929    .data:00000488 forth_name_immediate_mode
../src/forth_system.S:929    .data:00000494 forth_immediate_mode
../src/forth_system.S:929    .data:00000492 forth_end_name_immediate_mode
../src/forth_system.S:929    .text:000006c0 forth_code_immediate_mode
../src/forth_system.S:930    .text:000006c0 $t
../src/forth_system.S:932    .text:000006d0 $d
../src/forth_system.S:935    .data:00000498 forth_name_compile_mode
../src/forth_system.S:935    .data:000004a4 forth_compile_mode
../src/forth_system.S:935    .data:000004a2 forth_end_name_compile_mode
../src/forth_system.S:935    .text:000006d4 forth_code_compile_mode
../src/forth_system.S:936    .text:000006d4 $t
../src/forth_system.S:938    .text:000006e4 $d
../src/forth_system.S:941    .data:000004a8 forth_name_toggle_hidden
../src/forth_system.S:941    .data:000004c0 forth_toggle_hidden
../src/forth_system.S:941    .data:000004be forth_end_name_toggle_hidden
../src/forth_system.S:941    .text:000006e8 forth_code_toggle_hidden
../src/forth_system.S:942    .text:000006e8 $t
../src/forth_system.S:948    .data:000004c4 forth_name_toggle_immediate
../src/forth_system.S:948    .data:000004e0 forth_toggle_immediate
../src/forth_system.S:948    .data:000004dd forth_end_name_toggle_immediate
../src/forth_system.S:948    .text:00000700 forth_code_toggle_immediate
../src/forth_system.S:953    .text:00000718 $d
../src/forth_system.S:960    .data:000004e4 forth_name_branch
../src/forth_system.S:960    .data:000004f4 forth_branch
../src/forth_system.S:960    .data:000004f3 forth_end_name_branch
../src/forth_system.S:960    .text:0000071c forth_code_branch
../src/forth_system.S:961    .text:0000071c $t
../src/forth_system.S:975    .data:000004f8 forth_name_brancheq
../src/forth_system.S:975    .data:00000508 forth_brancheq
../src/forth_system.S:975    .data:00000508 forth_end_name_brancheq
../src/forth_system.S:975    .text:00000734 forth_code_brancheq
../src/forth_system.S:987    .data:0000050c forth_name_compile
../src/forth_system.S:987    .data:00000518 forth_compile
../src/forth_system.S:987    .data:00000516 forth_end_name_compile
../src/forth_system.S:1000   .data:00000544 forth_name_end_compile
../src/forth_system.S:1000   .data:00000550 forth_end_compile
../src/forth_system.S:1000   .data:0000054e forth_end_name_end_compile
../src/forth_system.S:1011   .data:00000574 forth_name_hide
../src/forth_system.S:1011   .data:00000584 forth_hide
../src/forth_system.S:1011   .data:00000581 forth_end_name_hide
../src/forth_system.S:1019   .data:00000598 forth_name_code_field_addr_of_next_word
../src/forth_system.S:1019   .data:000005a4 forth_code_field_addr_of_next_word
../src/forth_system.S:1019   .data:000005a2 forth_end_name_code_field_addr_of_next_word
../src/forth_system.S:1025   .data:000005c8 forth_testing
../src/forth_system.S:1025   .data:000005c8 forth_end_name_testing

UNDEFINED SYMBOLS
memcpy
usb_serial_getchar
usb_serial_putchar
