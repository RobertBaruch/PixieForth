   1              	# 1 "../src/forth_system.S"
   1              	/*
   0              	
   0              	
   0              	
   2              	 * This is the core PixieForth system, which closely follows
   3              	 * the JonesForth tut by Richard Jones available at
   4              	 * http://git.annexia.org/?p=jonesforth.git;a=summary.
   5              	 */
   6              	
   7              	.syntax unified
   8              	
   9              	/* This macro writes the header of the function. */
  10              	.macro __new_func name
  11              	    .text
  12              	    .global \name
  13              	    .thumb_func
  14              	    .align 2
  16              	\name\():
  17              	.endm
  18              	
  19              	/* This macro writes the footer of the function. */
  20              	.macro __end_func name
  21              	    .pool
  23              	.endm
  24              	
  25              	/*
  26              	 * The ABI for words:
  27              	 *  r11 is the parameter stack pointer. Appears in dumps as fp.
  28              	 *  r12 is the instruction pointer. Appears in dumps as ip.
  29              	 *    Note that during execution of an instruction, r12 points to
  30              	 *    the next instruction (as long as the current instruction is
  31              	 *    not EXIT).
  32              	 *  r8 is the saved stack pointer from C. TODO: change to r10.
  33              	 *  sp ("r13") is the return stack pointer.
  34              	 *  lr ("r14") is the address to return to in C
  35              	 *
  36              	 *  Note that C is under no obligation to save r12, so all calls to C
  37              	 *  must save and restore r12.
  38              	 *
  39              	 *  Forth may freely use r0-r7, r9, r10.
  40              	 *  Forth may clobber r0-r7, r9-r12, sp, lr. All are saved/restored except r0 and r1.
  41              	 */
  42              	
  43              	.set F_IMMED,0x80
  44              	.set F_UNUSED,0x40
  45              	.set F_HIDDEN,0x20
  46              	.set F_LENMASK,0x1f // length mask
  47              	
  48              	// Stores the chain of links.
  49              	.set link, 0
  50              	
  51              	/*
  52              	 * The format of a word definition is:
  53              	 *   forth_name_<label>:
  54              	 *     .4byte <pointer to next definition>
  55              	 *     .4byte <pointer to forth_<label>>
  56              	 *     .byte <len of name>
  57              	 *     .ascii <name, with enough padding at end for alignment>
  58              	 *   forth_<label>:
  59              	 *     .4byte <address of forth_do_colon>
  60              	 *     .4byte <words in the definition>
  61              	 *     ... <more words>
  62              	 *     .4byte forth_exit
  63              	 */
  64              	.macro __defword name, flags=0, label
  65              	    .section .data
  67              	    .align 2
  68              	    .global forth_name_\label
  69              	forth_name_\label\():
  70              	    .4byte link
  71              	    .4byte forth_\label\()
  72              	    .set link, forth_name_\label
  73              	    .byte forth_end_name_\label\()-.-1+\flags
  74              	    .ascii "\name"
  75              	forth_end_name_\label\():
  76              	    .align 2, 0
  78              	    .global forth_\label
  80              	forth_\label\():
  81              	    .4byte forth_do_colon
  82              	    // list of word pointers go here, use __word macro.
  83              	.endm
  84              	
  85              	/* This macro writes the footer of a word definition. */
  86              	.macro __end_defword label
  87              	    .4byte forth_exit
  89              	.endm
  90              	
  91              	/* This macro writes a word pointer. */
  92              	.macro __word label
  93              	    .4byte forth_\label
  94              	.endm
  95              	
  96              	/*
  97              	 * The format of a native definition is:
  98              	 *   forth_name_<label>:
  99              	 *     .4byte <pointer to next definition>
 100              	 *     .4byte <pointer to forth_<label>>
 101              	 *     .byte <len of name>
 102              	 *     .ascii <name, with enough padding at end for alignment>
 103              	 *   forth_<label>:
 104              	 *     .4byte <address of forth_code_<label>>
 105              	 *   forth_code_<label>:
 106              	 *     <native code>
 107              	 *     __next
 108              	 */
 109              	.macro __defnative name, flags=0, label
 110              	    .section .data
 112              	    .align 2
 113              	    .global forth_name_\label
 114              	forth_name_\label\():
 115              	    .4byte link
 116              	    .4byte forth_\label\()
 117              	    .set link, forth_name_\label
 118              	    .byte forth_end_name_\label\()-.-1+\flags
 119              	    .ascii "\name"
 120              	forth_end_name_\label\():
 121              	    .align 2, 0
 123              	    .global forth_\label
 125              	forth_\label\():
 126              	    .4byte forth_code_\label
 128              	
 129              	    .text
 130              	    .global forth_code_\label
 131              	    .thumb_func
 133              	forth_code_\label\():
 134              	.endm
 135              	
 136              	/* This macro writes the footer of a native definition. */
 137              	.macro __end_defnative label
 138              	    __next
 139              	    .pool
 141              	.endm
 142              	
 143              	/*
 144              	 * This macro creates a native definition for a global variable.
 145              	 */
 146              	.macro __defvar name, flags=0, label, initial=0
 147              	    __defnative \name\(),\flags\(),\label\()
 148              	    ldr r0, =forth_var_\name\()
 149              	    ldr r0, [r0]
 150              	    __pushreg r0
 151              	    __end_defnative \label
 152              	
 153              	    .section .data
 155              	    .align 2
 156              	    .global forth_var_\name
 157              	forth_var_\name\():
 158              	    .4byte \initial
 160              	.endm
 161              	
 162              	/*
 163              	 * Some useful macros for writing native definitions.
 164              	 */
 165              	
 166              	/* Pushes the given register onto the parameter stack. */
 167              	.macro __pushreg reg
 168              	     str \reg\(), [r11], #4
 169              	.endm
 170              	
 171              	/* Pushes reg1 then reg2 onto the parameter stack. */
 172              	.macro __pushreg2 reg1, reg2
 173              	    strd \reg1\(), \reg2\(), [r11], #8
 174              	.endm
 175              	
 176              	/* Pops the parameter stack into the given register. */
 177              	.macro __popreg reg
 178              	     ldr \reg\(), [r11, #-4]!
 179              	.endm
 180              	
 181              	/* Pops reg1 then reg2 from the parameter stack. */
 182              	.macro __popreg2 reg1 reg2
 183              	     ldrd \reg2\(), \reg1\(), [r11, #-8]!
 184              	.endm
 185              	
 186              	/* Loads the given register with the top of the parameter stack. */
 187              	.macro __peekreg reg
 188              	    ldr \reg\(), [r11, #-4]
 189              	.endm
 190              	
 191              	/* Stores the given register to the top of the parameter stack. */
 192              	.macro __putreg reg
 193              	    str \reg\(), [r11, #-4]
 194              	.endm
 195              	
 196              	/* Loads the given variable into the given register. */
 197              	.macro __loadvar name reg
 198              	    ldr \reg\(), =forth_var_\name
 199              	    ldr \reg\(), [\reg\()]
 200              	.endm
 201              	
 202              	/*
 203              	 * Stores the given register into the given variable. This requires
 204              	 * a scratch register.
 205              	 */
 206              	.macro __storevar reg name scratchreg
 207              	    ldr \scratchreg\(), =forth_var_\name
 208              	    str \reg\(), [\scratchreg\()]
 209              	.endm
 210              	
 211              	/*
 212              	 * Saves r12 before calling into C.
 213              	 * The ARM ABI requires that subroutines save r4-r11 if
 214              	 * they use them. If we are calling into C, then we are responsible
 215              	 * for saving any other registers we use.
 216              	 */
 217              	.macro __begin_c_call
 218              	    push {r12}
 219              	.endm
 220              	
 221              	/* Restores r12 after returning from C. */
 222              	.macro __end_c_call
 223              	    pop {r12}
 224              	.endm
 225              	
 226              	 /*
 227              	  * This macro implements the NEXT fragment. All native
 228              	  * routines must end in NEXT. The beginning of all words
 229              	  * is a pointer to the routine to start that word. Sometimes
 230              	  * it is just a pointer to native assembly, if the word was
 231              	  * native. Otherwise, it is a pointer to standard
 232              	  * "interpret" routine.
 233              	  */
 234              	.macro __next
 235              	    ldr r10, [r12], #4 // r10 <- word to execute, next_word_ptr++
 236              	    ldr r9, [r10]  // r9 <- code for word to execute
 237              	    bx r9
 238              	.endm
 239              	
 240 0000 04480068 	__defvar "BASE",,base,10 // current base for interpreting text numbers
 240      4BF8040B 
 240      5CF804AB 
 240      DAF80090 
 240      48470000 
 241 0018 00000000 	__defvar "HERE",,here,_sheap // the addr of free data
 241      00000000 
 241      04484552 
 241      45000000 
 241      00000000 
 242 0030 18000000 	__defvar "STATE",,state,0 // the Forth state: 0 = interpreting, 1 = compiling.
 242      00000000 
 242      05535441 
 242      54450000 
 242      00000000 
 243              	
 244              	/*
 245              	 * Accepts control from C.
 246              	 * r0 (first parameter) is the pointer to the parameter stack.
 247              	 * r1 (second parameter) is the address of the Forth routine to jump to,
 248              	 *     which is forth_<x>, not code_forth_<x>.
 249              	 * Because we don't trust the return stack or the parameter stack, we
 250              	 * store SP in r8 for later restoration, and are very careful NEVER to clobber r8!
 251              	 * TODO: change this to a struct so we can pass and return all sorts of things,
 252              	 *       like the HERE pointer.
 253              	 */
 254              	__new_func forth_enter
 255 0048 2DE9FC5F 	    push {r2-r12, lr}
 256 004c E846     	    mov r8, sp
 257              	    // push {r1}
 258 004e 8346     	    mov r11, r0 // r11 <- parameter stack addr
 259 0050 8C46     	    mov r12, r1 // r12 <- addr of next word
 260 0052 5CF804AB 	    __next
 260      DAF80090 
 260      4847
 261              	__end_func forth_enter
 262              	
 263              	/* Returns control to C, returning r11 so we know where we stopped. */
 264              	__defnative "QUIT",,quit
 265 005c 5846     	    mov r0, r11
 266 005e C546     	    mov sp, r8
 267 0060 BDE8FC5F 	    pop {r2-r12, lr}
 268 0064 7047     	    bx lr
 269 0066 5CF804AB 	__end_defnative quit
 269      DAF80090 
 269      4847
 270              	
 271              	/*
 272              	 * This is the "interpret" routine for non-native words.
 273              	 */
 274              	__new_func forth_do_colon
 275 0070 4DF804CD 	    push {r12} // r12 is the instruction coming next in the caller
 276 0074 1AF1040C 	    adds r12, r10, #4 // point to next instruction
 277 0078 5CF804AB 	    __next
 277      DAF80090 
 277      4847
 278              	__end_func forth_do_colon
 279              	
 280              	/* Returns control to the Forth caller. */
 281              	__defnative "EXIT",,exit
 282 0082 5DF804CB 	    pop {r12}
 283 0086 5CF804AB 	__end_defnative exit
 283      DAF80090 
 283      4847
 284              	
 285              	/* ( -- x ) */
 286              	__defnative "LIT",,literal
 287 0090 5CF8040B 	    ldr r0, [r12], #4
 288 0094 4BF8040B 	    __pushreg r0
 289 0098 5CF804AB 	__end_defnative literal
 289      DAF80090 
 289      4847
 290              	
 291              	/* ( x -- ) */
 292              	__defnative "DROP",,drop
 293 00a2 BBF1040B 	    subs r11, #4
 294 00a6 5CF804AB 	__end_defnative drop
 294      DAF80090 
 294      4847
 295              	
 296              	/* ( x y -- ) */
 297              	__defnative "2DROP",,2drop
 298 00b0 BBF1080B 	    subs r11, #8
 299 00b4 5CF804AB 	__end_defnative 2drop
 299      DAF80090 
 299      4847
 300              	
 301              	/* ( x y -- y x ) */
 302              	__defnative "SWAP",,swap
 303 00be 3BE90300 	    ldmdb r11!, {r0, r1} // r0,r1 <- x,y
 304 00c2 EBE80210 	    __pushreg2 r1, r0
 305 00c6 5CF804AB 	__end_defnative swap
 305      DAF80090 
 305      4847
 306              	
 307              	/* ( a b c d -- c d a b ) */
 308              	__defnative "2SWAP",,2swap
 309 00d0 3BE90F00 	    ldmdb r11!, {r0, r1, r2, r3} // r0,r1,r2,r3 <- a,b,c,d
 310 00d4 EBE80223 	    __pushreg2 r2, r3
 311 00d8 EBE80201 	    __pushreg2 r0, r1
 312 00dc 5CF804AB 	__end_defnative 2swap
 312      DAF80090 
 312      4847
 313              	
 314              	/* ( x -- x x ) */
 315              	__defnative "DUP",,dup
 316 00e6 5BF8040C 	    __peekreg r0
 317 00ea 4BF8040B 	    __pushreg r0
 318 00ee 5CF804AB 	__end_defnative dup
 318      DAF80090 
 318      4847
 319              	
 320              	/* ( x y -- x y x y ) */
 321              	__defnative "2DUP",,2dup
 322 00f8 1BE90300 	    ldmdb r11, {r0, r1} // r0,r1 <- x,y
 323 00fc EBE80201 	    __pushreg2 r0, r1
 324 0100 5CF804AB 	__end_defnative 2dup
 324      DAF80090 
 324      4847
 325              	
 326              	/* ( x -- 0 | x x ) */
 327              	__defnative "?DUP",,maybe_dup
 328 010a 5BF8040C 	    __peekreg r0
 329 010e 08B1     	    cbz r0, skip_maybe_dup
 330 0110 4BF8040B 	    __pushreg r0
 331              	skip_maybe_dup:
 332 0114 5CF804AB 	__end_defnative maybe_dup
 332      DAF80090 
 332      4847
 333              	
 334              	/* ( x y -- x y x ) */
 335              	__defnative "OVER",,over
 336 011e 5BF8080C 	    ldr r0, [r11, #-8]
 337 0122 4BF8040B 	    __pushreg r0
 338 0126 5CF804AB 	__end_defnative over
 338      DAF80090 
 338      4847
 339              	
 340              	/* ( x y z -- y z x ) */
 341              	__defnative "ROT",,rot
 342 0130 3BE90700 	    ldmdb r11!, {r0, r1, r2} // r0,r1,r2 <- x,y,z
 343 0134 EBE80212 	    __pushreg2 r1, r2
 344 0138 4BF8040B 	    __pushreg r0
 345 013c 5CF804AB 	__end_defnative rot
 345      DAF80090 
 345      4847
 346              	
 347              	/* ( x y z -- z x y ) */
 348              	__defnative "-ROT",,nrot
 349 0146 3BE90700 	    ldmdb r11!, {r0, r1, r2} // r0,r1,r2 <- x,y,z
 350 014a EBE80220 	    __pushreg2 r2, r0
 351 014e 4BF8041B 	    __pushreg r1
 352 0152 5CF804AB 	__end_defnative nrot
 352      DAF80090 
 352      4847
 353              	
 354              	/* ( x -- x+1 ) */
 355              	__defnative "1+",,inc
 356 015c 5BF8040C 	    __peekreg r0
 357 0160 0130     	    adds r0, #1
 358 0162 4BF8040C 	    __putreg r0
 359 0166 5CF804AB 	__end_defnative inc
 359      DAF80090 
 359      4847
 360              	
 361              	/* ( x -- x-1 ) */
 362              	__defnative "1-",,dec
 363 0170 5BF8040C 	    __peekreg r0
 364 0174 0138     	    subs r0, #1
 365 0176 4BF8040C 	    __putreg r0
 366 017a 5CF804AB 	__end_defnative dec
 366      DAF80090 
 366      4847
 367              	
 368              	/* ( x -- x+4 ) */
 369              	__defnative "4+",,inc4
 370 0184 5BF8040C 	    __peekreg r0
 371 0188 0430     	    adds r0, #4
 372 018a 4BF8040C 	    __putreg r0
 373 018e 5CF804AB 	__end_defnative inc4
 373      DAF80090 
 373      4847
 374              	
 375              	/* ( x -- x-4 ) */
 376              	__defnative "4-",,dec4
 377 0198 5BF8040C 	    __peekreg r0
 378 019c 0438     	    subs r0, #4
 379 019e 4BF8040C 	    __putreg r0
 380 01a2 5CF804AB 	__end_defnative dec4
 380      DAF80090 
 380      4847
 381              	
 382              	/* ( x y -- x+y ) */
 383              	__defnative "+",,add
 384 01ac 3BE90300 	    ldmdb r11!, {r0, r1} // r0,r1 <- x,y
 385 01b0 0918     	    adds r1, r0
 386 01b2 4BF8041B 	    __pushreg r1
 387 01b6 5CF804AB 	__end_defnative add
 387      DAF80090 
 387      4847
 388              	
 389              	/* ( x y -- x-y ) */
 390              	__defnative "-",,sub
 391 01c0 3BE90300 	    ldmdb r11!, {r0, r1} // r0,r1 <- x,y
 392 01c4 A0EB0100 	    sub r0, r1
 393 01c8 4BF8040B 	    __pushreg r0
 394 01cc 5CF804AB 	__end_defnative sub
 394      DAF80090 
 394      4847
 395              	
 396              	/* ( x y -- x*y ) */
 397              	__defnative "*",,mul
 398 01d6 3BE90300 	    ldmdb r11!, {r0, r1} // r0,r1 <- x,y
 399 01da 00FB01F1 	    mul r1, r0
 400 01de 4BF8041B 	    __pushreg r1
 401 01e2 5CF804AB 	__end_defnative mul
 401      DAF80090 
 401      4847
 402              	
 403              	/* ( x y -- x%y x/y ) */
 404              	__defnative "/MOD",,divmod
 405 01ec 3BE90300 	    ldmdb r11!, {r0, r1} // r0,r1 <- x,y
 406 01f0 90FBF1F2 	    sdiv r2, r0, r1  // q <- x/y
 407 01f4 02FB1101 	    mls r1, r2, r1, r0 // r, q, y, x: r <- x - q*y
 408 01f8 EBE80212 	    __pushreg2 r1, r2
 409 01fc 5CF804AB 	__end_defnative divmod
 409      DAF80090 
 409      4847
 410              	
 411              	/* Signed division. */
 412              	/* ( x y -- x/y ) */
 413              	__defnative "/",,div
 414 0206 3BE90300 	    ldmdb r11!, {r0, r1} // r0,r1 <- x,y
 415 020a 90FBF1F0 	    sdiv r0, r1
 416 020e 4BF8040B 	    __pushreg r0
 417 0212 5CF804AB 	__end_defnative div
 417      DAF80090 
 417      4847
 418              	
 419              	/* ( x y -- 0 | 0xffffffff ) */
 420              	__defnative "=",,eq
 421 021c 3BE90300 	    ldmdb r11!, {r0, r1} // r0,r1 <- x,y
 422 0220 8842     	    cmp r0, r1
 423 0222 0CBF     	    ite eq
 424 0224 6FF00000 	    mvneq r0, #0
 425 0228 0020     	    movne r0, #0
 426 022a 4BF8040B 	    __pushreg r0
 427 022e 5CF804AB 	__end_defnative eq
 427      DAF80090 
 427      4847
 428              	
 429              	/* ( x y -- 0 | 0xffffffff ) */
 430              	__defnative "<>",,ne
 431 0238 3BE90300 	    ldmdb r11!, {r0, r1} // r0,r1 <- x,y
 432 023c 8842     	    cmp r0, r1
 433 023e 14BF     	    ite ne
 434 0240 6FF00000 	    mvnne r0, #0
 435 0244 0020     	    moveq r0, #0
 436 0246 4BF8040B 	    __pushreg r0
 437 024a 5CF804AB 	__end_defnative ne
 437      DAF80090 
 437      4847
 438              	
 439              	/* Signed comparison, x < y */
 440              	/* ( x y -- 0 | 0xffffffff ) */
 441              	__defnative "<",,lt
 442 0254 3BE90300 	    ldmdb r11!, {r0, r1} // r0,r1 <- x,y
 443 0258 8842     	    cmp r0, r1
 444 025a B4BF     	    ite lt
 445 025c 6FF00000 	    mvnlt r0, #0
 446 0260 0020     	    movge r0, #0
 447 0262 4BF8040B 	    __pushreg r0
 448 0266 5CF804AB 	__end_defnative lt
 448      DAF80090 
 448      4847
 449              	
 450              	/* Signed comparison, x > y */
 451              	/* ( x y -- 0 | 0xffffffff ) */
 452              	__defnative ">",,gt
 453 0270 3BE90300 	    ldmdb r11!, {r0, r1} // r0,r1 <- x,y
 454 0274 8842     	    cmp r0, r1
 455 0276 CCBF     	    ite gt
 456 0278 6FF00000 	    mvngt r0, #0
 457 027c 0020     	    movle r0, #0
 458 027e 4BF8040B 	    __pushreg r0
 459 0282 5CF804AB 	__end_defnative gt
 459      DAF80090 
 459      4847
 460              	
 461              	/* Signed comparison, x <= y */
 462              	/* ( x y -- 0 | 0xffffffff ) */
 463              	__defnative "<=",,le
 464 028c 3BE90300 	    ldmdb r11!, {r0, r1} // r0,r1 <- x,y
 465 0290 8842     	    cmp r0, r1
 466 0292 D4BF     	    ite le
 467 0294 6FF00000 	    mvnle r0, #0
 468 0298 0020     	    movgt r0, #0
 469 029a 4BF8040B 	    __pushreg r0
 470 029e 5CF804AB 	__end_defnative le
 470      DAF80090 
 470      4847
 471              	
 472              	/* Signed comparison, x >= y */
 473              	/* ( x y -- 0 | 0xffffffff ) */
 474              	__defnative ">=",,ge
 475 02a8 3BE90300 	    ldmdb r11!, {r0, r1} // r0,r1 <- x,y
 476 02ac 8842     	    cmp r0, r1
 477 02ae ACBF     	    ite ge
 478 02b0 6FF00000 	    mvnge r0, #0
 479 02b4 0020     	    movlt r0, #0
 480 02b6 4BF8040B 	    __pushreg r0
 481 02ba 5CF804AB 	__end_defnative ge
 481      DAF80090 
 481      4847
 482              	
 483              	/* ( x -- 0 | 0xffffffff ) */
 484              	__defnative "0=",,eqz
 485 02c4 5BF8040C 	    __peekreg r0
 486 02c8 0028     	    cmp r0, #0
 487 02ca 0CBF     	    ite eq
 488 02cc 6FF00000 	    mvneq r0, #0
 489 02d0 0020     	    movne r0, #0
 490 02d2 4BF8040C 	    __putreg r0
 491 02d6 5CF804AB 	__end_defnative eqz
 491      DAF80090 
 491      4847
 492              	
 493              	/* ( x -- 0 | 0xffffffff ) */
 494              	__defnative "0<>",,nez
 495 02e0 5BF8040C 	    __peekreg r0
 496 02e4 18B1     	    cbz r0, skip_nez
 497 02e6 6FF00000 	    mvn r0, #0
 498 02ea 4BF8040C 	    __putreg r0
 499              	skip_nez:
 500 02ee 5CF804AB 	__end_defnative nez
 500      DAF80090 
 500      4847
 501              	
 502              	/* Signed comparison, x < 0 */
 503              	/* ( x -- 0 | 0xffffffff ) */
 504              	__defnative "0<",,ltz
 505 02f8 5BF8040C 	    __peekreg r0
 506 02fc 0028     	    cmp r0, #0
 507 02fe B4BF     	    ite lt
 508 0300 6FF00000 	    mvnlt r0, #0
 509 0304 0020     	    movge r0, #0
 510 0306 4BF8040C 	    __putreg r0
 511 030a 5CF804AB 	__end_defnative ltz
 511      DAF80090 
 511      4847
 512              	
 513              	/* Signed comparison, x > 0 */
 514              	/* ( x -- 0 | 0xffffffff ) */
 515              	__defnative "0>",,gtz
 516 0314 5BF8040C 	    __peekreg r0
 517 0318 0028     	    cmp r0, #0
 518 031a CCBF     	    ite gt
 519 031c 6FF00000 	    mvngt r0, #0
 520 0320 0020     	    movle r0, #0
 521 0322 4BF8040C 	    __putreg r0
 522 0326 5CF804AB 	__end_defnative gtz
 522      DAF80090 
 522      4847
 523              	
 524              	/* Signed comparison, x <= 0 */
 525              	/* ( x -- 0 | 0xffffffff ) */
 526              	__defnative "0<=",,lez
 527 0330 5BF8040C 	    __peekreg r0
 528 0334 0028     	    cmp r0, #0
 529 0336 D4BF     	    ite le
 530 0338 6FF00000 	    mvnle r0, #0
 531 033c 0020     	    movgt r0, #0
 532 033e 4BF8040C 	    __putreg r0
 533 0342 5CF804AB 	__end_defnative lez
 533      DAF80090 
 533      4847
 534              	
 535              	/* Signed comparison, x >= 0 */
 536              	/* ( x -- 0 | 0xffffffff ) */
 537              	__defnative "0>=",,gez
 538 034c 5BF8040C 	    __peekreg r0
 539 0350 0028     	    cmp r0, #0
 540 0352 ACBF     	    ite ge
 541 0354 6FF00000 	    mvnge r0, #0
 542 0358 0020     	    movlt r0, #0
 543 035a 4BF8040C 	    __putreg r0
 544 035e 5CF804AB 	__end_defnative gez
 544      DAF80090 
 544      4847
 545              	
 546              	/* ( x y -- x&y ) */
 547              	__defnative "AND",,and
 548 0368 3BE90300 	    ldmdb r11!, {r0, r1} // r0,r1 <- x,y
 549 036c 0140     	    ands r1, r0
 550 036e 4BF8041B 	    __pushreg r1
 551 0372 5CF804AB 	__end_defnative and
 551      DAF80090 
 551      4847
 552              	
 553              	/* ( x y -- x|y ) */
 554              	__defnative "OR",,or
 555 037c 3BE90300 	    ldmdb r11!, {r0, r1} // r0,r1 <- x,y
 556 0380 0143     	    orrs r1, r0
 557 0382 4BF8041B 	    __pushreg r1
 558 0386 5CF804AB 	__end_defnative or
 558      DAF80090 
 558      4847
 559              	
 560              	/* ( x y -- x^y ) */
 561              	__defnative "XOR",,xor
 562 0390 3BE90300 	    ldmdb r11!, {r0, r1} // r0,r1 <- x,y
 563 0394 4140     	    eors r1, r0
 564 0396 4BF8041B 	    __pushreg r1
 565 039a 5CF804AB 	__end_defnative xor
 565      DAF80090 
 565      4847
 566              	
 567              	/* ( x -- ~x ) */
 568              	__defnative "INVERT",,not
 569 03a4 5BF8040C 	    __peekreg r0
 570 03a8 6FEA0000 	    mvn r0, r0
 571 03ac 4BF8040C 	    __putreg r0
 572 03b0 5CF804AB 	__end_defnative not
 572      DAF80090 
 572      4847
 573              	
 574              	/* ( x addr -- ) */
 575              	__defnative "!",,store
 576 03ba 3BE90300 	    ldmdb r11!, {r0, r1} // r0,r1 <- x,addr
 577 03be 0860     	    str r0, [r1]
 578 03c0 5CF804AB 	__end_defnative store
 578      DAF80090 
 578      4847
 579              	
 580              	/* ( x addr -- ) */
 581              	__defnative "C!",,store_char
 582 03ca 3BE90300 	    ldmdb r11!, {r0, r1} // r0,r1 <- x,addr
 583 03ce 0870     	    strb r0, [r1]
 584 03d0 5CF804AB 	__end_defnative store_char
 584      DAF80090 
 584      4847
 585              	
 586              	/* ( addr -- x ) */
 587              	__defnative "\@",,fetch
 588 03da 5BF8040C 	    __peekreg r0
 589 03de 0068     	    ldr r0, [r0]
 590 03e0 4BF8040C 	    __putreg r0
 591 03e4 5CF804AB 	__end_defnative fetch
 591      DAF80090 
 591      4847
 592              	
 593              	/* ( addr -- x ) */
 594              	__defnative "C\@",,fetch_char
 595 03ee 5BF8040C 	    __peekreg r0
 596 03f2 0078     	    ldrb r0, [r0]
 597 03f4 4BF8040C 	    __putreg r0
 598 03f8 5CF804AB 	__end_defnative fetch_char
 598      DAF80090 
 598      4847
 599              	
 600              	/* ( x addr -- ) */
 601              	__defnative "+!",,addstore
 602 0402 3BE90300 	    ldmdb r11!, {r0, r1} // r0,r1 <- x,addr
 603 0406 0A68     	    ldr r2, [r1]
 604 0408 1218     	    adds r2, r0
 605 040a 0A60     	    str r2, [r1]
 606 040c 5CF804AB 	__end_defnative addstore
 606      DAF80090 
 606      4847
 607              	
 608              	/* ( x addr -- ) */
 609              	__defnative "-!",,substore
 610 0416 3BE90300 	    ldmdb r11!, {r0, r1} // r0,r1 <- x,addr
 611 041a 0A68     	    ldr r2, [r1]
 612 041c 121A     	    subs r2, r0
 613 041e 0A60     	    str r2, [r1]
 614 0420 5CF804AB 	__end_defnative substore
 614      DAF80090 
 614      4847
 615              	
 616              	/* Block move only for non-overlapping regions. If the blocks overlap, the result is undefined. */
 617              	/* ( src-addr dest-addr len -- ) */
 618              	/* Which is backwards from memcpy, which is dest, src, len. */
 619              	__defnative "MEMCOPY",,memcpy
 620 042a 4DF804CD 	    __begin_c_call
 621              	    // Want r0 = dest, r1 = src, r2 = len.
 622 042e 7BE90202 	    __popreg2 r2, r0
 623 0432 5BF8041D 	    __popreg r1
 624 0436 FFF7FEFF 	    bl memcpy
 625 043a 5DF804CB 	    __end_c_call
 626 043e 5CF804AB 	__end_defnative memcpy
 626      DAF80090 
 626      4847
 627              	
 628              	/*
 629              	 * Block move with overlapping regions allowed. Because memcpy
 630              	 * does a forward copy, it is okay to use it if and only if
 631              	 * dest >= src + len or dest <= src.
 632              	 */
 633              	// TODO: Make this more time-efficient
 634              	/* ( src-addr dest-addr len -- ) */
 635              	__defnative "MEMMOVE",,memmove
 636 0448 4DF804CD 	    __begin_c_call
 637              	    // Want r0 = dest, r1 = src, r2 = len.
 638 044c 7BE90202 	    __popreg2 r2, r0
 639 0450 5BF8041D 	    __popreg r1
 640 0454 8842     	    cmp r0, r1
 641 0456 0BDD     	    ble loop_fwd_memmove // fwd if dest <= src
 642 0458 8B18     	    adds r3, r1, r2 // r3 <- src + len
 643 045a 9842     	    cmp r0, r3
 644 045c 08DA     	    bge loop_fwd_memmove  // fwd if dest >= src + len
 645              	
 646 045e 8018     	    adds r0, r2
 647 0460 8918     	    adds r1, r2
 648              	loop_bwd_memmove:
 649 0462 3AB1     	    cbz r2, end_memmove
 650 0464 11F8013D 	    ldrb r3, [r1, #-1]!
 651 0468 00F8013D 	    strb r3, [r0, #-1]!
 652 046c 013A     	    subs r2, #1
 653 046e F8E7     	    b loop_bwd_memmove
 654              	
 655              	loop_fwd_memmove:
 656 0470 FFF7FEFF 	    bl memcpy
 657              	end_memmove:
 658 0474 5DF804CB 	    __end_c_call
 659 0478 5CF804AB 	__end_defnative memmove
 659      DAF80090 
 659      4847
 660              	
 661              	/* Pop param stack and push onto return stack */
 662              	/* ( addr -- ) */
 663              	__defnative ">R",,param_to_return
 664 0482 5BF8040D 	    __popreg r0
 665 0486 01B4     	    push {r0}
 666 0488 5CF804AB 	__end_defnative param_to_return
 666      DAF80090 
 666      4847
 667              	
 668              	/* Pop return stack and push onto param stack */
 669              	/* ( -- addr ) */
 670              	__defnative "R>",,return_to_param
 671 0492 01BC     	    pop {r0}
 672 0494 4BF8040B 	    __pushreg r0
 673 0498 5CF804AB 	__end_defnative return_to_param
 673      DAF80090 
 673      4847
 674              	
 675              	/* Fetch top of return stack, push onto param stack */
 676              	/* ( -- addr ) */
 677              	__defnative "R\@",,fetch_return
 678 04a2 0098     	    ldr r0, [sp]
 679 04a4 4BF8040B 	    __pushreg r0
 680 04a8 5CF804AB 	__end_defnative fetch_return
 680      DAF80090 
 680      4847
 681              	
 682              	/* Replace top of return stack with popped value from param stack */
 683              	/* ( addr -- ) */
 684              	__defnative "R!",,store_return
 685 04b2 5BF8040D 	    __popreg r0
 686 04b6 0090     	    str r0, [sp]
 687 04b8 5CF804AB 	__end_defnative store_return
 687      DAF80090 
 687      4847
 688              	
 689              	/* Waits for a byte from serial. */
 690              	/* ( -- k ) */
 691              	__defnative "KEY",,key
 692 04c2 4DF804CD 	    __begin_c_call
 693              	await_key:
 694 04c6 FFF7FEFF 	    bl usb_serial_getchar
 695 04ca 10F1010F 	    cmn r0, #1
 696 04ce FAD0     	    beq await_key
 697 04d0 4BF8040B 	    __pushreg r0
 698 04d4 5DF804CB 	    __end_c_call
 699 04d8 5CF804AB 	__end_defnative key
 699      DAF80090 
 699      4847
 700              	
 701              	/* Outputs a byte to serial. */
 702              	/* ( k -- ) */
 703              	__defnative "EMIT",,emit
 704 04e2 4DF804CD 	    __begin_c_call
 705 04e6 5BF8040D 	    __popreg r0
 706 04ea FFF7FEFF 	    bl usb_serial_putchar
 707 04ee 5DF804CB 	    __end_c_call
 708 04f2 5CF804AB 	__end_defnative emit
 708      DAF80090 
 708      4847
 709              	
 710              	/*
 711              	 * Waits for a "word" from serial. A word starts with any non-whitespace
 712              	 * character except backslash, and continues to any whitespace character.
 713              	 * Characters between backslash and newline (inclusive) are ignored.
 714              	 * The maximum size of a word if F_LENMASK. We accept characters after that,
 715              	 * but ignore them.
 716              	 */
 717              	/* ( -- buff-addr len ) */
 718              	    .section .data
 720              	    .align 2
 721              	    .global forth_word_buffer
 722              	forth_word_buffer:
 723 03c4 00000000 	    .space F_LENMASK
 723      00000000 
 723      00000000 
 723      00000000 
 723      00000000 
 725              	
 726 03e3 00B00300 	__defnative "WORD",,word
 726      00000000 
 726      0004574F 
 726      52440000 
 726      00000000 
 727 04fc 4DF804CD 	    __begin_c_call
 728 0500 194C     	    ldr r4, =forth_word_buffer
 729 0502 4BF8044B 	    __pushreg r4
 730 0506 0025     	    movs r5, #0
 731              	await_word:
 732 0508 FFF7FEFF 	    bl usb_serial_getchar
 733 050c 10F1010F 	    cmn r0, #1
 734 0510 FAD0     	    beq await_word
 735 0512 2028     	    cmp r0, ' '
 736 0514 F8D0     	    beq await_word
 737 0516 0928     	    cmp r0, '\t'
 738 0518 F6D0     	    beq await_word
 739 051a 0A28     	    cmp r0, '\n'
 740 051c F4D0     	    beq await_word
 741 051e 0D28     	    cmp r0, '\r'
 742 0520 F2D0     	    beq await_word
 743              	start_word:
 744 0522 5C28     	    cmp r0, '\\'
 745 0524 12D0     	    beq await_end_comment_word
 746 0526 1F2D     	    cmp r5, F_LENMASK // We ignore anything that would overflow the buffer
 747 0528 02D0     	    beq getchar_for_word
 748 052a 04F8010B 	    strb r0, [r4], #1
 749 052e 0135     	    adds r5, #1
 750              	getchar_for_word:
 751 0530 FFF7FEFF 	    bl usb_serial_getchar
 752 0534 10F1010F 	    cmn r0, #1
 753 0538 FAD0     	    beq getchar_for_word
 754 053a 2028     	    cmp r0, ' '
 755 053c 0BD0     	    beq end_word
 756 053e 0928     	    cmp r0, '\t'
 757 0540 09D0     	    beq end_word
 758 0542 0A28     	    cmp r0, '\n'
 759 0544 07D0     	    beq end_word
 760 0546 0D28     	    cmp r0, '\r'
 761 0548 05D0     	    beq end_word
 762 054a EAE7     	    b start_word
 763              	await_end_comment_word:
 764 054c FFF7FEFF 	    bl usb_serial_getchar
 765 0550 0A28     	    cmp r0, '\n'
 766 0552 FBD1     	    bne await_end_comment_word
 767 0554 ECE7     	    b getchar_for_word
 768              	end_word:
 769 0556 4BF8045B 	    __pushreg r5
 770 055a 5DF804CB 	    __end_c_call
 771 055e 5CF804AB 	__end_defnative word
 771      DAF80090 
 771      48470000 
 771      0000
 772              	
 773              	/* ( buff-addr len -- number unconverted-char-count ) */
 774              	__defnative "NUMBER",,number
 775 056c 3BE90300 	    ldmdb r11!, {r0, r1} // r0,r1 <- buff_addr,len
 776 0570 0025     	    movs r5, #0 // r5 = sign: 0 = positive, nz = negative
 777 0572 0022     	    movs r2, #0 // r2 = number
 778 0574 164C2468 	    __loadvar "BASE", r4 // r4 = base
 779 0578 01B3     	    cbz r1, end_number
 780 057a 0378     	    ldrb r3, [r0]
 781 057c 2D2B     	    cmp r3, '-'  // first char '-'? skip over it and set flag
 782 057e 03D1     	    bne is_hex_number
 783 0580 0125     	    movs r5, #1
 784 0582 0130     	    adds r0, #1
 785 0584 0139     	    subs r1, #1
 786 0586 04E0     	    b next_number
 787              	is_hex_number:
 788 0588 242B     	    cmp r3, '$'  // first char '$'? skip over it and override base
 789 058a 02BF     	    ittt eq
 790 058c 1024     	    moveq r4, #16
 791 058e 0130     	    addeq r0, #1
 792 0590 0139     	    subeq r1, #1
 793              	next_number:
 794 0592 99B1     	    cbz r1, end_number
 795 0594 10F8013B 	    ldrb r3, [r0], #1 // r3 = character to convert
 796 0598 302B     	    cmp r3, '0'
 797 059a 0FD3     	    blo end_number
 798 059c 392B     	    cmp r3, '9'
 799 059e 01D8     	    bhi convert_az_number
 800 05a0 303B     	    subs r3, '0'
 801 05a2 05E0     	    b check_number
 802              	convert_az_number:
 803 05a4 612B     	    cmp r3, 'a'
 804 05a6 28BF     	    it hs
 805 05a8 203B     	    subhs r3, #0x20 // converts lower case to upper case
 806 05aa 412B     	    cmp r3, 'A'
 807 05ac 06D3     	    blo end_number
 808 05ae 373B     	    subs r3, 'A' - 10
 809              	check_number:
 810 05b0 A342     	    cmp r3, r4
 811 05b2 3EBF     	    ittt lo
 812 05b4 02FB0432 	    mlalo r2, r2, r4, r3 // num <- num * base + digit
 813 05b8 0139     	    sublo r1, #1
 814 05ba EAE7     	    blo next_number
 815              	end_number:
 816 05bc 012D     	    cmp r5, #1
 817 05be 08BF     	    it eq
 818 05c0 5242     	    rsbeq r2, #0
 819 05c2 EBE80221 	    __pushreg2 r2, r1
 820 05c6 5CF804AB 	__end_defnative number
 820      DAF80090 
 820      48470000 
 820      0000
 821              	
 822              	/*
 823              	 * Finds the given definition in the dictionary by word name,
 824              	 * returning its address (forth_name_<label>), or 0 if not found.
 825              	 * Note that if len > F_LENMASK, the results of this function are
 826              	 * undefined.
 827              	 *
 828              	 * The format of a definition is:
 829              	 *   forth_name_<label>:
 830              	 *     .4byte <pointer to next definition>
 831              	 *     .4byte <pointer to forth_<label>>
 832              	 *     .byte len+flags
 833              	 *     .ascii <name, with enough padding at end for alignment>
 834              	 *   forth_<label>:
 835              	 */
 836              	/* ( buff-addr len -- 0 | defn-addr ) */
 837              	__defnative "FIND",,find
 838 05d4 3BE90300 	    ldmdb r11!, {r0, r1} // r0,r1 <- buff-addr,len
 839 05d8 0F4A1268 	    __loadvar "LATEST", r2 // r2 <- current definition address
 840              	check_current_find:
 841 05dc A2B1     	    cbz r2, end_find
 842 05de 147A     	    ldrb r4, [r2, #8] // r4 <- definition name length + flags
 843 05e0 14F03F04 	    ands r4, F_HIDDEN | F_LENMASK
 844 05e4 8C42     	    cmp r4, r1 // skip hidden entries and entries not matching the string length
 845 05e6 1CBF     	    itt ne
 846 05e8 1268     	    ldrne r2, [r2]
 847 05ea F7E7     	    bne check_current_find
 848 05ec 0546     	    mov r5, r0 // r5 <- ptr to buffer
 849 05ee 12F10906 	    adds r6, r2, #9 // r6 <- ptr to name
 850              	check_name_find:
 851 05f2 15F8017B 	    ldrb r7, [r5], #1
 852 05f6 16F8019B 	    ldrb r9, [r6], #1
 853 05fa 4F45     	    cmp r7, r9
 854 05fc 1CBF     	    itt ne
 855 05fe 1268     	    ldrne r2, [r2]
 856 0600 ECE7     	    bne check_current_find
 857 0602 013C     	    subs r4, #1
 858 0604 04B1     	    cbz r4, end_find
 859 0606 F4E7     	    b check_name_find
 860              	end_find:
 861 0608 4BF8042B 	    __pushreg r2
 862 060c 5CF804AB 	__end_defnative find
 862      DAF80090 
 862      48470000 
 862      00000000 
 863              	
 864              	/* ( defn-addr -- code-addr ) */
 865              	__defnative ">CFA",,to_code_field_addr
 866 061c 5BF8040C 	    __peekreg r0
 867 0620 4068     	    ldr r0, [r0, #4]
 868 0622 4BF8040C 	    __putreg r0
 869 0626 5CF804AB 	__end_defnative to_code_field_addr
 869      DAF80090 
 869      4847
 870              	
 871              	/*
 872              	 * Returns the data field address for a definition. For a
 873              	 * native definition, this is the beginning of the native
 874              	 * routine. For a non-native definition, this is the word
 875              	 * immediately after the do_colon word.
 876              	 */
 877              	/* ( defn-addr -- data-addr ) */
 878              	__defnative ">DFA",,to_data_field_addr
 879 0630 5BF8040C 	    __peekreg r0
 880 0634 4068     	    ldr r0, [r0, #4]
 881 0636 0430     	    adds r0, #4
 882 0638 4BF8040C 	    __putreg r0
 883 063c 5CF804AB 	__end_defnative to_data_field_addr
 883      DAF80090 
 883      4847
 884              	
 885              	/*
 886              	 * Creates the header for a definition and places it at
 887              	 * HERE, updating HERE and LATEST. The header is the link
 888              	 * to the next definition, and the name (and name length).
 889              	 * the flags are always zero.
 890              	 */
 891              	/* ( buff-addr len -- ) */
 892              	__defnative "CREATE",,create
 893 0646 3BE90300 	    ldmdb r11!, {r0, r1} // r0,r1 <- buff-addr,len
 894 064a 134A1268 	    __loadvar "HERE", r2 // r2 <- HERE
 895 064e 134B1B68 	    __loadvar "LATEST", r3 // r3 <- LATEST
 896 0652 124C2260 	    __storevar r2, "LATEST", r4 // update LATEST to HERE
 897 0656 42F8083B 	    str r3, [r2], #8 // Write link. Skip over the pointer to code for now
 898 065a 02F8011B 	    strb r1, [r2], #1 // writes the len byte
 899 065e 11F00304 	    ands r4, r1, #3 // r4 = amount of padding required at end.
 900              	    // Because of the len byte, the amount of padding to get to
 901              	    // 4-byte alignment based on the last 2 bits of the length are:
 902              	    // 0: 3 bytes
 903              	    // 1: 2 bytes
 904              	    // 2: 1 byte
 905              	    // 3: 0 bytes
 906 0662 C4F10304 	    rsb r4, #3 // so r4 = 3-(len&3)
 907              	copy_name_create:
 908 0666 29B1     	    cbz r1, pad_name_create
 909 0668 10F8015B 	    ldrb r5, [r0], #1
 910 066c 02F8015B 	    strb r5, [r2], #1
 911 0670 0139     	    subs r1, #1
 912 0672 F8E7     	    b copy_name_create
 913              	pad_name_create:
 914 0674 94F0000F 	    teq r4, #0
 915 0678 1EBF     	    ittt ne
 916 067a 02F8011B 	    strbne r1, [r2], #1 // r1 was zero!
 917 067e 013C     	    subne r4, #1
 918 0680 F8E7     	    bne pad_name_create
 919 0682 06480068 	    __loadvar "LATEST", r0 // r0 <- beginning of the header
 920 0686 4260     	    str r2, [r0, #4] // now we can write the code address
 921 0688 03480260 	    __storevar r2, "HERE", r0 // and update HERE
 922 068c 5CF804AB 	__end_defnative create
 922      DAF80090 
 922      48470000 
 922      00000000 
 922      00000000 
 923              	
 924              	/*
 925              	 * Stores a value into HERE, and increments HERE by 4. The
 926              	 * implication is that HERE has special semantics: by definition
 927              	 * it points to available memory. Thus, it makes sense that once we
 928              	 * write to the memory at HERE, we should increment HERE to point to
 929              	 * the next available location.
 930              	 */
 931              	/* ( x -- ) */
 932              	__defnative "HERE!",,store_to_here
 933 06a0 5BF8040D 	    __popreg r0
 934 06a4 0449     	    ldr r1, =forth_var_HERE
 935 06a6 0A68     	    ldr r2, [r1] // r2 <- HERE
 936 06a8 42F8040B 	    str r0, [r2], #4
 937 06ac 0A60     	    str r2, [r1] // update HERE
 938 06ae 5CF804AB 	__end_defnative store_to_here
 938      DAF80090 
 938      48470000 
 938      0000
 939              	
 940              	/* Switch to immediate mode, immediately. */
 941              	__defnative "[",F_IMMED,immediate_mode
 942 06bc 0020     	    movs r0, #0
 943 06be 03490860 	    __storevar r0, "STATE", r1
 944 06c2 5CF804AB 	__end_defnative immediate_mode
 944      DAF80090 
 944      48470000 
 944      0000
 945              	
 946              	/* Switch to compile mode. */
 947              	__defnative "]",,compile_mode
 948 06d0 0120     	    movs r0, #1
 949 06d2 03490860 	    __storevar r0, "STATE", r1
 950 06d6 5CF804AB 	__end_defnative compile_mode
 950      DAF80090 
 950      48470000 
 950      0000
 951              	
 952              	/* ( defn-addr -- ) */
 953              	__defnative "TOGGLE_HIDDEN",,toggle_hidden
 954 06e4 5BF8040D 	    __popreg r0
 955 06e8 10F8081F 	    ldrb r1, [r0, #8]!
 956 06ec 91F02001 	    eors r1, F_HIDDEN
 957 06f0 0170     	    strb r1, [r0]
 958 06f2 5CF804AB 	__end_defnative toggle_hidden
 958      DAF80090 
 958      4847
 959              	
 960              	__defnative "TOGGLE_IMMEDIATE",,toggle_immediate
 961 06fc 05480068 	    __loadvar "LATEST", r0
 962 0700 10F8081F 	    ldrb r1, [r0, #8]!
 963 0704 91F08001 	    eors r1, F_IMMED
 964 0708 0170     	    strb r1, [r0]
 965 070a 5CF804AB 	__end_defnative toggle_immediate
 965      DAF80090 
 965      48470000 
 965      0000
 966              	
 967              	/*
 968              	 * Add the offset in the next word to the instruction pointer
 969              	 * of the caller, so that when this word returns, the caller
 970              	 * is executing there.
 971              	 */
 972              	__defnative "BRANCH",,branch
 973 0718 01BC     	    pop {r0}
 974 071a 50F8041B 	    ldr r1, [r0], #4 // r1 <- offset, ptr += 4
 975 071e 4FEA8101 	    lsl r1, #2 // r1 *= 4
 976 0722 0918     	    adds r1, r0 // so offset zero just goes to next word
 977 0724 02B4     	    push {r1}
 978 0726 5CF804AB 	__end_defnative branch
 978      DAF80090 
 978      4847
 979              	
 980              	/*
 981              	 * If the parameter on the stack is zero, add the offset in the
 982              	 * next word to the instruction pointer of the caller, so that
 983              	 * when this word returns, the caller is executing there.
 984              	 * Otherwise, do nothing.
 985              	 */
 986              	/* ( x -- ) */
 987              	__defnative "0BRANCH",,brancheq
 988 0730 5BF8042D 	    __popreg r2
 989 0734 01BC     	    pop {r0}
 990 0736 50F8041B 	    ldr r1, [r0], #4 // r1 <- offset, ptr += 4
 991 073a 92F0000F 	    teq r2, #0
 992 073e 04BF     	    itt eq  // add offset only if parameter was zero
 993 0740 8900     	    lsleq r1, #2 // r1 *= 4
 994 0742 0918     	    addeq r1, r0 // so offset zero just goes to next word
 995 0744 02B4     	    push {r1}
 996 0746 5CF804AB 	__end_defnative brancheq
 996      DAF80090 
 996      4847
 997              	
 998              	/* Compile a definition. */
 999 0750 0448     	__defword ":",,compile
 1000 0504 00000000 	    __word word
 1001 0508 00000000 	    __word create
 1002 050c 00000000 	    __word literal
 1003 0510 00000000 	    __word do_colon
 1004 0514 00000000 	    __word store_to_here
 1005 0518 00000000 	    __word latest
 1006 051c 00000000 	    __word fetch
 1007 0520 00000000 	    __word toggle_hidden
 1008 0524 00000000 	    __word compile_mode
 1009 0528 00000000 	__end_defword compile
 1010              	
 1011              	/* End compilation of a definition. */
 1012 052c F4040000 	__defword ";",F_IMMED,end_compile
 1012      00000000 
 1012      813B0000 
 1012      00000000 
 1013 053c 00000000 	    __word literal
 1014 0540 00000000 	    __word exit
 1015 0544 00000000 	    __word store_to_here
 1016 0548 00000000 	    __word latest
 1017 054c 00000000 	    __word fetch
 1018 0550 00000000 	    __word toggle_hidden
 1019 0554 00000000 	    __word immediate_mode
 1020 0558 00000000 	__end_defword end_compile
 1021              	
 1022              	/* Toggle hidden on the next word. */
 1023 055c 2C050000 	__defword "HIDE",,hide
 1023      00000000 
 1023      04484944 
 1023      45000000 
 1023      00000000 
 1024 0570 00000000 	    __word word
 1025 0574 00000000 	    __word find
 1026 0578 00000000 	    __word toggle_hidden
 1027 057c 00000000 	__end_defword hide
 1028              	
 1029              	/* Gets the code field address of the next word. */
 1030              	/* ( -- code-addr ) */
 1031 0580 5C050000 	__defword "'",,code_field_addr_of_next_word
 1031      00000000 
 1031      01270000 
 1031      00000000 
 1032 0590 00000000 	    __word word
 1033 0594 00000000 	    __word find
 1034 0598 00000000 	    __word to_code_field_addr
 1035 059c 00000000 	__end_defword code_field_addr_of_next_word
 1036              	
 1037 05a0 80050000 	__defword "TESTING",,testing
 1037      00000000 
 1037      07544553 
 1037      54494E47 
 1037      00000000 
 1038 05b4 00000000 	    __word word
 1039 05b8 00000000 	    __word number
 1040 05bc 00000000 	    __word quit
 1041 05c0 00000000 	__end_defword testing
 1042              	
 1043              	/*
 1044              	 * The initial value of LATEST must be the last name in the builtins. All
 1045              	 * new builtins, therefore, must be defined before this one.
 1046              	 */
 1047 05c4 A0050000 	__defvar "LATEST",,latest,forth_name_latest // the addr of the last definition.
 1047      00000000 
 1047      064C4154 
 1047      45535400 
 1047      00000000 
DEFINED SYMBOLS
../src/forth_system.S:43     *ABS*:00000080 F_IMMED
../src/forth_system.S:44     *ABS*:00000040 F_UNUSED
../src/forth_system.S:45     *ABS*:00000020 F_HIDDEN
../src/forth_system.S:46     *ABS*:0000001f F_LENMASK
../src/forth_system.S:1047   .data:000005c4 link
../src/forth_system.S:240    .data:00000000 forth_name_base
                            .data:00000000 $d
../src/forth_system.S:240    .data:00000010 forth_base
../src/forth_system.S:240    .data:0000000d forth_end_name_base
../src/forth_system.S:240    .text:00000000 forth_code_base
../src/forth_system.S:240    .data:00000014 forth_var_BASE
../src/forth_system.S:240    .text:00000000 $t
../src/forth_system.S:240    .text:00000012 $d
../src/forth_system.S:240    .text:00000014 $d
../src/forth_system.S:241    .data:00000018 forth_name_here
../src/forth_system.S:241    .data:00000028 forth_here
../src/forth_system.S:241    .data:00000025 forth_end_name_here
../src/forth_system.S:240    .text:00000018 forth_code_here
../src/forth_system.S:241    .data:0000002c forth_var_HERE
../src/forth_system.S:240    .text:00000018 $t
../src/forth_system.S:241    .text:0000002a $d
../src/forth_system.S:241    .text:0000002c $d
../src/forth_system.S:242    .data:00000030 forth_name_state
../src/forth_system.S:242    .data:00000040 forth_state
../src/forth_system.S:242    .data:0000003e forth_end_name_state
../src/forth_system.S:241    .text:00000030 forth_code_state
../src/forth_system.S:242    .data:00000044 forth_var_STATE
../src/forth_system.S:241    .text:00000030 $t
../src/forth_system.S:242    .text:00000042 $d
../src/forth_system.S:242    .text:00000044 $d
../src/forth_system.S:254    .text:00000048 forth_enter
../src/forth_system.S:242    .text:00000048 $t
../src/forth_system.S:264    .data:00000048 forth_name_quit
../src/forth_system.S:264    .data:00000058 forth_quit
../src/forth_system.S:264    .data:00000055 forth_end_name_quit
../src/forth_system.S:264    .text:0000005c forth_code_quit
../src/forth_system.S:274    .text:00000070 forth_do_colon
../src/forth_system.S:281    .data:0000005c forth_name_exit
../src/forth_system.S:281    .data:0000006c forth_exit
../src/forth_system.S:281    .data:00000069 forth_end_name_exit
../src/forth_system.S:281    .text:00000082 forth_code_exit
../src/forth_system.S:286    .data:00000070 forth_name_literal
../src/forth_system.S:286    .data:0000007c forth_literal
../src/forth_system.S:286    .data:0000007c forth_end_name_literal
../src/forth_system.S:286    .text:00000090 forth_code_literal
../src/forth_system.S:292    .data:00000080 forth_name_drop
../src/forth_system.S:292    .data:00000090 forth_drop
../src/forth_system.S:292    .data:0000008d forth_end_name_drop
../src/forth_system.S:292    .text:000000a2 forth_code_drop
../src/forth_system.S:297    .data:00000094 forth_name_2drop
../src/forth_system.S:297    .data:000000a4 forth_2drop
../src/forth_system.S:297    .data:000000a2 forth_end_name_2drop
../src/forth_system.S:297    .text:000000b0 forth_code_2drop
../src/forth_system.S:302    .data:000000a8 forth_name_swap
../src/forth_system.S:302    .data:000000b8 forth_swap
../src/forth_system.S:302    .data:000000b5 forth_end_name_swap
../src/forth_system.S:302    .text:000000be forth_code_swap
../src/forth_system.S:308    .data:000000bc forth_name_2swap
../src/forth_system.S:308    .data:000000cc forth_2swap
../src/forth_system.S:308    .data:000000ca forth_end_name_2swap
../src/forth_system.S:308    .text:000000d0 forth_code_2swap
../src/forth_system.S:315    .data:000000d0 forth_name_dup
../src/forth_system.S:315    .data:000000dc forth_dup
../src/forth_system.S:315    .data:000000dc forth_end_name_dup
../src/forth_system.S:315    .text:000000e6 forth_code_dup
../src/forth_system.S:321    .data:000000e0 forth_name_2dup
../src/forth_system.S:321    .data:000000f0 forth_2dup
../src/forth_system.S:321    .data:000000ed forth_end_name_2dup
../src/forth_system.S:321    .text:000000f8 forth_code_2dup
../src/forth_system.S:327    .data:000000f4 forth_name_maybe_dup
../src/forth_system.S:327    .data:00000104 forth_maybe_dup
../src/forth_system.S:327    .data:00000101 forth_end_name_maybe_dup
../src/forth_system.S:327    .text:0000010a forth_code_maybe_dup
../src/forth_system.S:331    .text:00000114 skip_maybe_dup
../src/forth_system.S:335    .data:00000108 forth_name_over
../src/forth_system.S:335    .data:00000118 forth_over
../src/forth_system.S:335    .data:00000115 forth_end_name_over
../src/forth_system.S:335    .text:0000011e forth_code_over
../src/forth_system.S:341    .data:0000011c forth_name_rot
../src/forth_system.S:341    .data:00000128 forth_rot
../src/forth_system.S:341    .data:00000128 forth_end_name_rot
../src/forth_system.S:341    .text:00000130 forth_code_rot
../src/forth_system.S:348    .data:0000012c forth_name_nrot
../src/forth_system.S:348    .data:0000013c forth_nrot
../src/forth_system.S:348    .data:00000139 forth_end_name_nrot
../src/forth_system.S:348    .text:00000146 forth_code_nrot
../src/forth_system.S:355    .data:00000140 forth_name_inc
../src/forth_system.S:355    .data:0000014c forth_inc
../src/forth_system.S:355    .data:0000014b forth_end_name_inc
../src/forth_system.S:355    .text:0000015c forth_code_inc
../src/forth_system.S:362    .data:00000150 forth_name_dec
../src/forth_system.S:362    .data:0000015c forth_dec
../src/forth_system.S:362    .data:0000015b forth_end_name_dec
../src/forth_system.S:362    .text:00000170 forth_code_dec
../src/forth_system.S:369    .data:00000160 forth_name_inc4
../src/forth_system.S:369    .data:0000016c forth_inc4
../src/forth_system.S:369    .data:0000016b forth_end_name_inc4
../src/forth_system.S:369    .text:00000184 forth_code_inc4
../src/forth_system.S:376    .data:00000170 forth_name_dec4
../src/forth_system.S:376    .data:0000017c forth_dec4
../src/forth_system.S:376    .data:0000017b forth_end_name_dec4
../src/forth_system.S:376    .text:00000198 forth_code_dec4
../src/forth_system.S:383    .data:00000180 forth_name_add
../src/forth_system.S:383    .data:0000018c forth_add
../src/forth_system.S:383    .data:0000018a forth_end_name_add
../src/forth_system.S:383    .text:000001ac forth_code_add
../src/forth_system.S:390    .data:00000190 forth_name_sub
../src/forth_system.S:390    .data:0000019c forth_sub
../src/forth_system.S:390    .data:0000019a forth_end_name_sub
../src/forth_system.S:390    .text:000001c0 forth_code_sub
../src/forth_system.S:397    .data:000001a0 forth_name_mul
../src/forth_system.S:397    .data:000001ac forth_mul
../src/forth_system.S:397    .data:000001aa forth_end_name_mul
../src/forth_system.S:397    .text:000001d6 forth_code_mul
../src/forth_system.S:404    .data:000001b0 forth_name_divmod
../src/forth_system.S:404    .data:000001c0 forth_divmod
../src/forth_system.S:404    .data:000001bd forth_end_name_divmod
../src/forth_system.S:404    .text:000001ec forth_code_divmod
../src/forth_system.S:413    .data:000001c4 forth_name_div
../src/forth_system.S:413    .data:000001d0 forth_div
../src/forth_system.S:413    .data:000001ce forth_end_name_div
../src/forth_system.S:413    .text:00000206 forth_code_div
../src/forth_system.S:420    .data:000001d4 forth_name_eq
../src/forth_system.S:420    .data:000001e0 forth_eq
../src/forth_system.S:420    .data:000001de forth_end_name_eq
../src/forth_system.S:420    .text:0000021c forth_code_eq
../src/forth_system.S:430    .data:000001e4 forth_name_ne
../src/forth_system.S:430    .data:000001f0 forth_ne
../src/forth_system.S:430    .data:000001ef forth_end_name_ne
../src/forth_system.S:430    .text:00000238 forth_code_ne
../src/forth_system.S:441    .data:000001f4 forth_name_lt
../src/forth_system.S:441    .data:00000200 forth_lt
../src/forth_system.S:441    .data:000001fe forth_end_name_lt
../src/forth_system.S:441    .text:00000254 forth_code_lt
../src/forth_system.S:452    .data:00000204 forth_name_gt
../src/forth_system.S:452    .data:00000210 forth_gt
../src/forth_system.S:452    .data:0000020e forth_end_name_gt
../src/forth_system.S:452    .text:00000270 forth_code_gt
../src/forth_system.S:463    .data:00000214 forth_name_le
../src/forth_system.S:463    .data:00000220 forth_le
../src/forth_system.S:463    .data:0000021f forth_end_name_le
../src/forth_system.S:463    .text:0000028c forth_code_le
../src/forth_system.S:474    .data:00000224 forth_name_ge
../src/forth_system.S:474    .data:00000230 forth_ge
../src/forth_system.S:474    .data:0000022f forth_end_name_ge
../src/forth_system.S:474    .text:000002a8 forth_code_ge
../src/forth_system.S:484    .data:00000234 forth_name_eqz
../src/forth_system.S:484    .data:00000240 forth_eqz
../src/forth_system.S:484    .data:0000023f forth_end_name_eqz
../src/forth_system.S:484    .text:000002c4 forth_code_eqz
../src/forth_system.S:494    .data:00000244 forth_name_nez
../src/forth_system.S:494    .data:00000250 forth_nez
../src/forth_system.S:494    .data:00000250 forth_end_name_nez
../src/forth_system.S:494    .text:000002e0 forth_code_nez
../src/forth_system.S:499    .text:000002ee skip_nez
../src/forth_system.S:504    .data:00000254 forth_name_ltz
../src/forth_system.S:504    .data:00000260 forth_ltz
../src/forth_system.S:504    .data:0000025f forth_end_name_ltz
../src/forth_system.S:504    .text:000002f8 forth_code_ltz
../src/forth_system.S:515    .data:00000264 forth_name_gtz
../src/forth_system.S:515    .data:00000270 forth_gtz
../src/forth_system.S:515    .data:0000026f forth_end_name_gtz
../src/forth_system.S:515    .text:00000314 forth_code_gtz
../src/forth_system.S:526    .data:00000274 forth_name_lez
../src/forth_system.S:526    .data:00000280 forth_lez
../src/forth_system.S:526    .data:00000280 forth_end_name_lez
../src/forth_system.S:526    .text:00000330 forth_code_lez
../src/forth_system.S:537    .data:00000284 forth_name_gez
../src/forth_system.S:537    .data:00000290 forth_gez
../src/forth_system.S:537    .data:00000290 forth_end_name_gez
../src/forth_system.S:537    .text:0000034c forth_code_gez
../src/forth_system.S:547    .data:00000294 forth_name_and
../src/forth_system.S:547    .data:000002a0 forth_and
../src/forth_system.S:547    .data:000002a0 forth_end_name_and
../src/forth_system.S:547    .text:00000368 forth_code_and
../src/forth_system.S:554    .data:000002a4 forth_name_or
../src/forth_system.S:554    .data:000002b0 forth_or
../src/forth_system.S:554    .data:000002af forth_end_name_or
../src/forth_system.S:554    .text:0000037c forth_code_or
../src/forth_system.S:561    .data:000002b4 forth_name_xor
../src/forth_system.S:561    .data:000002c0 forth_xor
../src/forth_system.S:561    .data:000002c0 forth_end_name_xor
../src/forth_system.S:561    .text:00000390 forth_code_xor
../src/forth_system.S:568    .data:000002c4 forth_name_not
../src/forth_system.S:568    .data:000002d4 forth_not
../src/forth_system.S:568    .data:000002d3 forth_end_name_not
../src/forth_system.S:568    .text:000003a4 forth_code_not
../src/forth_system.S:575    .data:000002d8 forth_name_store
../src/forth_system.S:575    .data:000002e4 forth_store
../src/forth_system.S:575    .data:000002e2 forth_end_name_store
../src/forth_system.S:575    .text:000003ba forth_code_store
../src/forth_system.S:581    .data:000002e8 forth_name_store_char
../src/forth_system.S:581    .data:000002f4 forth_store_char
../src/forth_system.S:581    .data:000002f3 forth_end_name_store_char
../src/forth_system.S:581    .text:000003ca forth_code_store_char
../src/forth_system.S:587    .data:000002f8 forth_name_fetch
../src/forth_system.S:587    .data:00000304 forth_fetch
../src/forth_system.S:587    .data:00000302 forth_end_name_fetch
../src/forth_system.S:587    .text:000003da forth_code_fetch
../src/forth_system.S:594    .data:00000308 forth_name_fetch_char
../src/forth_system.S:594    .data:00000314 forth_fetch_char
../src/forth_system.S:594    .data:00000313 forth_end_name_fetch_char
../src/forth_system.S:594    .text:000003ee forth_code_fetch_char
../src/forth_system.S:601    .data:00000318 forth_name_addstore
../src/forth_system.S:601    .data:00000324 forth_addstore
../src/forth_system.S:601    .data:00000323 forth_end_name_addstore
../src/forth_system.S:601    .text:00000402 forth_code_addstore
../src/forth_system.S:609    .data:00000328 forth_name_substore
../src/forth_system.S:609    .data:00000334 forth_substore
../src/forth_system.S:609    .data:00000333 forth_end_name_substore
../src/forth_system.S:609    .text:00000416 forth_code_substore
../src/forth_system.S:619    .data:00000338 forth_name_memcpy
../src/forth_system.S:619    .data:00000348 forth_memcpy
../src/forth_system.S:619    .data:00000348 forth_end_name_memcpy
../src/forth_system.S:619    .text:0000042a forth_code_memcpy
../src/forth_system.S:635    .data:0000034c forth_name_memmove
../src/forth_system.S:635    .data:0000035c forth_memmove
../src/forth_system.S:635    .data:0000035c forth_end_name_memmove
../src/forth_system.S:635    .text:00000448 forth_code_memmove
../src/forth_system.S:655    .text:00000470 loop_fwd_memmove
../src/forth_system.S:648    .text:00000462 loop_bwd_memmove
../src/forth_system.S:657    .text:00000474 end_memmove
../src/forth_system.S:663    .data:00000360 forth_name_param_to_return
../src/forth_system.S:663    .data:0000036c forth_param_to_return
../src/forth_system.S:663    .data:0000036b forth_end_name_param_to_return
../src/forth_system.S:663    .text:00000482 forth_code_param_to_return
../src/forth_system.S:670    .data:00000370 forth_name_return_to_param
../src/forth_system.S:670    .data:0000037c forth_return_to_param
../src/forth_system.S:670    .data:0000037b forth_end_name_return_to_param
../src/forth_system.S:670    .text:00000492 forth_code_return_to_param
../src/forth_system.S:677    .data:00000380 forth_name_fetch_return
../src/forth_system.S:677    .data:0000038c forth_fetch_return
../src/forth_system.S:677    .data:0000038b forth_end_name_fetch_return
../src/forth_system.S:677    .text:000004a2 forth_code_fetch_return
../src/forth_system.S:684    .data:00000390 forth_name_store_return
../src/forth_system.S:684    .data:0000039c forth_store_return
../src/forth_system.S:684    .data:0000039b forth_end_name_store_return
../src/forth_system.S:684    .text:000004b2 forth_code_store_return
../src/forth_system.S:691    .data:000003a0 forth_name_key
../src/forth_system.S:691    .data:000003ac forth_key
../src/forth_system.S:691    .data:000003ac forth_end_name_key
../src/forth_system.S:691    .text:000004c2 forth_code_key
../src/forth_system.S:693    .text:000004c6 await_key
../src/forth_system.S:703    .data:000003b0 forth_name_emit
../src/forth_system.S:703    .data:000003c0 forth_emit
../src/forth_system.S:703    .data:000003bd forth_end_name_emit
../src/forth_system.S:703    .text:000004e2 forth_code_emit
../src/forth_system.S:722    .data:000003c4 forth_word_buffer
../src/forth_system.S:726    .data:000003e4 forth_name_word
../src/forth_system.S:726    .data:000003f4 forth_word
../src/forth_system.S:726    .data:000003f1 forth_end_name_word
../src/forth_system.S:718    .text:000004fc forth_code_word
../src/forth_system.S:731    .text:00000508 await_word
../src/forth_system.S:743    .text:00000522 start_word
../src/forth_system.S:763    .text:0000054c await_end_comment_word
../src/forth_system.S:750    .text:00000530 getchar_for_word
../src/forth_system.S:768    .text:00000556 end_word
../src/forth_system.S:771    .text:00000568 $d
../src/forth_system.S:774    .data:000003f8 forth_name_number
../src/forth_system.S:774    .data:00000408 forth_number
../src/forth_system.S:774    .data:00000407 forth_end_name_number
../src/forth_system.S:774    .text:0000056c forth_code_number
../src/forth_system.S:775    .text:0000056c $t
../src/forth_system.S:815    .text:000005bc end_number
../src/forth_system.S:787    .text:00000588 is_hex_number
../src/forth_system.S:793    .text:00000592 next_number
../src/forth_system.S:802    .text:000005a4 convert_az_number
../src/forth_system.S:809    .text:000005b0 check_number
../src/forth_system.S:820    .text:000005d0 $d
../src/forth_system.S:837    .data:0000040c forth_name_find
../src/forth_system.S:837    .data:0000041c forth_find
../src/forth_system.S:837    .data:00000419 forth_end_name_find
../src/forth_system.S:837    .text:000005d4 forth_code_find
../src/forth_system.S:838    .text:000005d4 $t
../src/forth_system.S:1047   .data:000005d8 forth_var_LATEST
../src/forth_system.S:840    .text:000005dc check_current_find
../src/forth_system.S:860    .text:00000608 end_find
../src/forth_system.S:850    .text:000005f2 check_name_find
../src/forth_system.S:862    .text:00000616 $d
../src/forth_system.S:862    .text:00000618 $d
../src/forth_system.S:865    .data:00000420 forth_name_to_code_field_addr
../src/forth_system.S:865    .data:00000430 forth_to_code_field_addr
../src/forth_system.S:865    .data:0000042d forth_end_name_to_code_field_addr
../src/forth_system.S:865    .text:0000061c forth_code_to_code_field_addr
../src/forth_system.S:866    .text:0000061c $t
../src/forth_system.S:878    .data:00000434 forth_name_to_data_field_addr
../src/forth_system.S:878    .data:00000444 forth_to_data_field_addr
../src/forth_system.S:878    .data:00000441 forth_end_name_to_data_field_addr
../src/forth_system.S:878    .text:00000630 forth_code_to_data_field_addr
../src/forth_system.S:892    .data:00000448 forth_name_create
../src/forth_system.S:892    .data:00000458 forth_create
../src/forth_system.S:892    .data:00000457 forth_end_name_create
../src/forth_system.S:892    .text:00000646 forth_code_create
../src/forth_system.S:907    .text:00000666 copy_name_create
../src/forth_system.S:913    .text:00000674 pad_name_create
../src/forth_system.S:922    .text:00000696 $d
../src/forth_system.S:922    .text:00000698 $d
../src/forth_system.S:932    .data:0000045c forth_name_store_to_here
../src/forth_system.S:932    .data:0000046c forth_store_to_here
../src/forth_system.S:932    .data:0000046a forth_end_name_store_to_here
../src/forth_system.S:932    .text:000006a0 forth_code_store_to_here
../src/forth_system.S:933    .text:000006a0 $t
../src/forth_system.S:938    .text:000006b8 $d
../src/forth_system.S:941    .data:00000470 forth_name_immediate_mode
../src/forth_system.S:941    .data:0000047c forth_immediate_mode
../src/forth_system.S:941    .data:0000047a forth_end_name_immediate_mode
../src/forth_system.S:941    .text:000006bc forth_code_immediate_mode
../src/forth_system.S:942    .text:000006bc $t
../src/forth_system.S:944    .text:000006cc $d
../src/forth_system.S:947    .data:00000480 forth_name_compile_mode
../src/forth_system.S:947    .data:0000048c forth_compile_mode
../src/forth_system.S:947    .data:0000048a forth_end_name_compile_mode
../src/forth_system.S:947    .text:000006d0 forth_code_compile_mode
../src/forth_system.S:948    .text:000006d0 $t
../src/forth_system.S:950    .text:000006e0 $d
../src/forth_system.S:953    .data:00000490 forth_name_toggle_hidden
../src/forth_system.S:953    .data:000004a8 forth_toggle_hidden
../src/forth_system.S:953    .data:000004a6 forth_end_name_toggle_hidden
../src/forth_system.S:953    .text:000006e4 forth_code_toggle_hidden
../src/forth_system.S:954    .text:000006e4 $t
../src/forth_system.S:960    .data:000004ac forth_name_toggle_immediate
../src/forth_system.S:960    .data:000004c8 forth_toggle_immediate
../src/forth_system.S:960    .data:000004c5 forth_end_name_toggle_immediate
../src/forth_system.S:960    .text:000006fc forth_code_toggle_immediate
../src/forth_system.S:965    .text:00000714 $d
../src/forth_system.S:972    .data:000004cc forth_name_branch
../src/forth_system.S:972    .data:000004dc forth_branch
../src/forth_system.S:972    .data:000004db forth_end_name_branch
../src/forth_system.S:972    .text:00000718 forth_code_branch
../src/forth_system.S:973    .text:00000718 $t
../src/forth_system.S:987    .data:000004e0 forth_name_brancheq
../src/forth_system.S:987    .data:000004f0 forth_brancheq
../src/forth_system.S:987    .data:000004f0 forth_end_name_brancheq
../src/forth_system.S:987    .text:00000730 forth_code_brancheq
../src/forth_system.S:999    .data:000004f4 forth_name_compile
../src/forth_system.S:999    .data:00000500 forth_compile
../src/forth_system.S:999    .data:000004fe forth_end_name_compile
../src/forth_system.S:1047   .data:000005d4 forth_latest
../src/forth_system.S:1012   .data:0000052c forth_name_end_compile
../src/forth_system.S:1012   .data:00000538 forth_end_compile
../src/forth_system.S:1012   .data:00000536 forth_end_name_end_compile
../src/forth_system.S:1023   .data:0000055c forth_name_hide
../src/forth_system.S:1023   .data:0000056c forth_hide
../src/forth_system.S:1023   .data:00000569 forth_end_name_hide
../src/forth_system.S:1031   .data:00000580 forth_name_code_field_addr_of_next_word
../src/forth_system.S:1031   .data:0000058c forth_code_field_addr_of_next_word
../src/forth_system.S:1031   .data:0000058a forth_end_name_code_field_addr_of_next_word
../src/forth_system.S:1037   .data:000005a0 forth_name_testing
../src/forth_system.S:1037   .data:000005b0 forth_testing
../src/forth_system.S:1037   .data:000005b0 forth_end_name_testing
../src/forth_system.S:1047   .data:000005c4 forth_name_latest
../src/forth_system.S:1047   .data:000005d3 forth_end_name_latest
../src/forth_system.S:999    .text:00000750 forth_code_latest
../src/forth_system.S:1047   .text:00000762 $d
../src/forth_system.S:1047   .text:00000764 $d

UNDEFINED SYMBOLS
_sheap
memcpy
usb_serial_getchar
usb_serial_putchar
